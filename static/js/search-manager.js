// ===============================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ò–°–ö–û–ú –°–û–û–ë–©–ï–ù–ò–ô
// static/js/search-manager.js
// ===============================

window.SearchManager = {
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    addKeyword: function() {
        const input = document.getElementById('wordInput');
        const word = input.value.trim().toLowerCase();
        
        if (!word) {
            window.UIUtils.showError('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
            return;
        }
        
        if (word.includes(' ')) {
            window.UIUtils.showError('–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∑–∞ —Ä–∞–∑');
            return;
        }
        
        if (window.MessageHunter.keywords.includes(word)) {
            window.UIUtils.showError('–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
            return;
        }
        
        window.MessageHunter.keywords.push(word);
        input.value = '';
        this.updateKeywordsDisplay();
        
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ${word}`);
    },
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     * @param {string} word - –°–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    removeKeyword: function(word) {
        window.MessageHunter.keywords = window.MessageHunter.keywords.filter(k => k !== word);
        this.updateKeywordsDisplay();
        console.log(`‚ûñ –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ${word}`);
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
     */
    updateKeywordsDisplay: function() {
        const display = document.getElementById('keywordsDisplay');
        if (!display) return;
        
        const keywords = window.MessageHunter.keywords;
        
        if (keywords.length === 0) {
            display.innerHTML = '<span style="color: #666; font-style: italic;">–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞...</span>';
        } else {
            display.innerHTML = keywords.map(word => 
                `<span class="keyword-tag">
                    ${word}
                    <span class="remove-btn" onclick="window.SearchManager.removeKeyword('${word}')">√ó</span>
                </span>`
            ).join('');
        }
    },
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    performSearch: function() {
        if (window.MessageHunter.keywords.length === 0) {
            window.UIUtils.showError('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        const groupsToUse = window.GroupsManager.getSelectedGroupsForCurrentTab();
        
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:`, {
            activeTab: window.TabManager.getActiveTab(),
            selectedGroups: window.MessageHunter.selectedGroups.length,
            autoSearchGroups: window.MessageHunter.autoSearchGroups.length,
            groupsToUse: groupsToUse.length
        });
        
        if (groupsToUse.length === 0) {
            window.UIUtils.showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–∏—Å–∫–∞');
            return;
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫
        this.startSearch(groupsToUse);
    },
    
    /**
     * –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
     * @param {Array} groupsToUse - –ú–∞—Å—Å–∏–≤ ID –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    startSearch: function(groupsToUse) {
        window.MessageHunter.searchAbortController = new AbortController();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateSearchUI(true);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.simulateSearchProgress(groupsToUse);
        
        console.log(`üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å ${groupsToUse.length} –≥—Ä—É–ø–ø–∞–º–∏`);
        
        fetch('/search', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                keyword: window.MessageHunter.keywords.join(' '),
                selected_groups: groupsToUse,
                search_depth: this.getSearchDepth()
            }),
            signal: window.MessageHunter.searchAbortController.signal
        })
        .then(response => response.json())
        .then(data => {
            this.handleSearchResult(data, groupsToUse);
        })
        .catch(error => {
            this.handleSearchError(error);
        });
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     * @param {Array} groupsToUse - –ì—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    handleSearchResult: function(data, groupsToUse) {
        clearInterval(window.progressInterval);
        this.updateSearchUI(false);
        
        if (data.error) {
            window.UIUtils.showError(data.error);
        } else {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            window.MessageHunter.lastSearchResults = {
                keywords: window.MessageHunter.keywords.slice(),
                results: data.results,
                groups_count: groupsToUse.length
            };
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.showResults(data.results, window.MessageHunter.keywords.join(', '));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            window.UIUtils.safeToggleElement('saveBtn', true);
            window.UIUtils.safeToggleElement('analyzeBtn', true);
            window.UIUtils.safeToggleElement('clearBtn', true);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ localStorage
            window.DataManager.SearchResults.save(
                data.results, 
                window.MessageHunter.keywords, 
                groupsToUse.length
            );
            
            window.UIUtils.showSuccess(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${data.results.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        }
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
     * @param {Error} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
     */
    handleSearchError: function(error) {
        clearInterval(window.progressInterval);
        this.updateSearchUI(false);
        
        if (error.name === 'AbortError') {
            window.UIUtils.showWarning('–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        } else {
            window.UIUtils.showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ');
            console.error('Search Error:', error);
        }
    },
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    stopSearch: function() {
        if (window.MessageHunter.searchAbortController) {
            window.MessageHunter.searchAbortController.abort();
            window.MessageHunter.searchAbortController = null;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å–µ—Ä–≤–µ—Ä—É –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            fetch('/stop_search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.UIUtils.showWarning('üõë –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
            });
            
            this.updateSearchUI(false);
        }
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–∏—Å–∫–∞
     * @param {boolean} searching - –ò–¥–µ—Ç –ª–∏ –ø–æ–∏—Å–∫ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
     */
    updateSearchUI: function(searching) {
        const loadingEl = document.getElementById('loading');
        const resultsEl = document.getElementById('results');
        const errorEl = document.getElementById('error');
        const searchBtn = document.getElementById('searchBtn');
        const stopBtn = document.getElementById('stopBtn');
        
        if (searching) {
            if (loadingEl) loadingEl.style.display = 'block';
            if (resultsEl) resultsEl.style.display = 'none';
            if (errorEl) errorEl.style.display = 'none';
            if (searchBtn) searchBtn.disabled = true;
            if (stopBtn) stopBtn.style.display = 'inline-block';
        } else {
            if (loadingEl) loadingEl.style.display = 'none';
            if (searchBtn) searchBtn.disabled = false;
            if (stopBtn) stopBtn.style.display = 'none';
        }
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –ø–æ–∏—Å–∫–∞
     */
    getSearchDepth: function() {
        const depthInput = document.getElementById('searchDepth');
        const value = parseInt(depthInput.value);
        
        if (value < 1) return 1;
        if (value > 10000) return 10000;
        return value || 500;
    },
    
    /**
     * –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
     * @param {Array} groupsToUse - –ì—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    simulateSearchProgress: function(groupsToUse) {
        let currentGroup = 0;
        let foundMessages = 0;
        let processedMessages = 0;
        const totalGroups = groupsToUse.length;
        const messagesPerGroup = this.getSearchDepth();
        
        if (window.progressInterval) {
            clearInterval(window.progressInterval);
        }
        
        window.progressInterval = setInterval(() => {
            if (currentGroup < totalGroups) {
                if (processedMessages < messagesPerGroup) {
                    processedMessages += Math.min(200, messagesPerGroup - processedMessages);
                    foundMessages += Math.floor(Math.random() * 3);
                    
                    const groupName = window.MessageHunter.allGroups.find(g => g.id === groupsToUse[currentGroup])?.title || `–ì—Ä—É–ø–ø–∞ ${currentGroup + 1}`;
                    
                    this.updateSearchProgress(
                        `üîç ${groupName}: ${processedMessages}/${messagesPerGroup} —Å–æ–æ–±—â–µ–Ω–∏–π`,
                        currentGroup + 1,
                        totalGroups,
                        foundMessages
                    );
                } else {
                    currentGroup++;
                    processedMessages = 0;
                    
                    if (currentGroup < totalGroups) {
                        const nextGroupName = window.MessageHunter.allGroups.find(g => g.id === groupsToUse[currentGroup])?.title || `–ì—Ä—É–ø–ø–∞ ${currentGroup + 1}`;
                        this.updateSearchProgress(
                            `üìÇ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥—Ä—É–ø–ø–µ: ${nextGroupName}`,
                            currentGroup,
                            totalGroups,
                            foundMessages
                        );
                    }
                }
            } else {
                this.updateSearchProgress(
                    'üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...',
                    totalGroups,
                    totalGroups,
                    foundMessages
                );
            }
        }, 800);
        
        // –ê–≤—Ç–æ–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        setTimeout(() => {
            if (window.progressInterval) {
                clearInterval(window.progressInterval);
            }
        }, 300000);
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
     * @param {string} text - –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
     * @param {number} current - –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞
     * @param {number} total - –í—Å–µ–≥–æ –≥—Ä—É–ø–ø
     * @param {number} found - –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    updateSearchProgress: function(text, current, total, found) {
        const loadingText = document.getElementById('loadingText');
        const groupProgress = document.getElementById('groupProgress');
        const foundProgress = document.getElementById('foundProgress');
        
        if (loadingText) loadingText.textContent = text;
        if (groupProgress) groupProgress.textContent = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ${current} –∏–∑ ${total}`;
        if (foundProgress) foundProgress.textContent = `–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${found}`;
    },
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     * @param {Array} results - –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param {string} keyword - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–∏—Å–∫–∞
     * @param {Array} accountsUsed - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    showResults: function(results, keyword, accountsUsed = []) {
        console.log('üîç showResults –≤—ã–∑–≤–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:', results.length);
        
        window.MessageHunter.allSearchResults = results;
        window.MessageHunter.displayedResults = 0;
        
        const resultsDiv = document.getElementById('results');
        const messagesDiv = document.getElementById('messages');
        const countDiv = document.getElementById('resultsCount');
        
        if (!resultsDiv || !messagesDiv || !countDiv) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');