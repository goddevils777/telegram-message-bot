// ===============================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ò–°–ö–û–ú –°–û–û–ë–©–ï–ù–ò–ô
// static/js/search-manager.js
// ===============================

window.SearchManager = {
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    isSearching: false,
    progressInterval: null,
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    resultsPerPage: 50,
    displayedResults: 0,
    isLoadingMore: false,
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∏—Å–∫–∞
     */
    init: function() {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SearchManager...');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.loadSavedResults();
        
        console.log('‚úÖ SearchManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    },
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers: function() {
        document.addEventListener('DOMContentLoaded', () => {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            const wordInput = document.getElementById('wordInput');
            if (wordInput) {
                wordInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.addKeyword();
                    }
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const messagesDiv = document.getElementById('messages');
            if (messagesDiv) {
                messagesDiv.addEventListener('scroll', (e) => {
                    this.handleScroll(e);
                });
            }
        });
    },
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    addKeyword: function() {
        const input = document.getElementById('wordInput');
        const word = input ? input.value.trim().toLowerCase() : '';
        
        if (!word) {
            window.UIUtils.showError('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
            return;
        }
        
        if (word.includes(' ')) {
            window.UIUtils.showError('–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∑–∞ —Ä–∞–∑');
            return;
        }
        
        if (window.MessageHunter.keywords.includes(word)) {
            window.UIUtils.showError('–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
            return;
        }
        
        window.MessageHunter.keywords.push(word);
        if (input) input.value = '';
        
        this.updateKeywordsDisplay();
        this.saveKeywords();
        
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ${word}`);
    },
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     * @param {string} word - –°–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    removeKeyword: function(word) {
        window.MessageHunter.keywords = window.MessageHunter.keywords.filter(k => k !== word);
        this.updateKeywordsDisplay();
        this.saveKeywords();
        
        console.log(`‚ûñ –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ${word}`);
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
     */
    updateKeywordsDisplay: function() {
        const display = document.getElementById('keywordsDisplay');
        if (!display) return;
        
        if (window.MessageHunter.keywords.length === 0) {
            display.innerHTML = '<span style="color: #666; font-style: italic;">–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞...</span>';
        } else {
            display.innerHTML = window.MessageHunter.keywords.map(word => 
                `<span class="keyword-tag" style="
                    background: #e3f2fd; 
                    color: #1976d2; 
                    padding: 6px 12px; 
                    border-radius: 20px; 
                    font-size: 13px; 
                    margin: 3px; 
                    display: inline-block;
                    cursor: pointer;
                ">
                    ${word}
                    <span class="remove-btn" onclick="window.SearchManager.removeKeyword('${word}')" style="
                        margin-left: 8px; 
                        color: #d32f2f; 
                        font-weight: bold;
                        cursor: pointer;
                    ">√ó</span>
                </span>`
            ).join('');
        }
    },
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
     */
    saveKeywords: function() {
        window.DataManager.save(
            'search_keywords',
            window.MessageHunter.keywords,
            24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
        );
    },
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
     */
    loadKeywords: function() {
        const saved = window.DataManager.load('search_keywords');
        if (saved && Array.isArray(saved)) {
            window.MessageHunter.keywords = saved;
            this.updateKeywordsDisplay();
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${saved.length}`);
        }
    },
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    performSearch: function() {
        if (window.MessageHunter.keywords.length === 0) {
            window.UIUtils.showError('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        const groupsToUse = this.getSelectedGroups();
        
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:`, {
            selectedGroups: window.MessageHunter.selectedGroups.length,
            groupsToUse: groupsToUse.length
        });
        
        if (groupsToUse.length === 0) {
            window.UIUtils.showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–∏—Å–∫–∞');
            return;
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫
        this.startSearch(groupsToUse);
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–∏—Å–∫–∞
     * @returns {Array} –ú–∞—Å—Å–∏–≤ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
     */
    getSelectedGroups: function() {
        return window.MessageHunter.selectedGroups || [];
    },
    
    /**
     * –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
     * @param {Array} groupsToUse - –ú–∞—Å—Å–∏–≤ ID –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    startSearch: function(groupsToUse) {
        this.isSearching = true;
        window.MessageHunter.searchAbortController = new AbortController();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateSearchUI(true);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.simulateSearchProgress(groupsToUse);
        
        console.log(`üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å ${groupsToUse.length} –≥—Ä—É–ø–ø–∞–º–∏`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º APIClient –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        window.APIClient.MessageHunterAPI.search({
            keyword: window.MessageHunter.keywords.join(' '),
            selected_groups: groupsToUse,
            search_depth: this.getSearchDepth()
        }, window.MessageHunter.searchAbortController.signal)
        .then(data => {
            this.handleSearchResult(data, groupsToUse);
        })
        .catch(error => {
            this.handleSearchError(error);
        });
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     * @param {Array} groupsToUse - –ì—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    handleSearchResult: function(data, groupsToUse) {
        this.clearProgressInterval();
        this.updateSearchUI(false);
        this.isSearching = false;
        
        if (data.error) {
            window.UIUtils.showError(data.error);
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        window.MessageHunter.lastSearchResults = {
            keywords: window.MessageHunter.keywords.slice(),
            results: data.results || [],
            groups_count: groupsToUse.length
        };
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.showResults(
            data.results || [], 
            window.MessageHunter.keywords.join(', '),
            data.accounts_used || []
        );
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        this.showActionButtons(true);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ localStorage
        window.DataManager.SearchResults.save(
            data.results || [], 
            window.MessageHunter.keywords, 
            groupsToUse.length
        );
        
        window.UIUtils.showSuccess(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${(data.results || []).length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        console.log('‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
     * @param {Error} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
     */
    handleSearchError: function(error) {
        this.clearProgressInterval();
        this.updateSearchUI(false);
        this.isSearching = false;
        
        if (error.name === 'AbortError') {
            window.UIUtils.showWarning('üõë –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        } else {
            window.UIUtils.showError('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ' + error.message);
            console.error('‚ùå Search Error:', error);
        }
    },
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    stopSearch: function() {
        if (window.MessageHunter.searchAbortController) {
            window.MessageHunter.searchAbortController.abort();
            window.MessageHunter.searchAbortController = null;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å–µ—Ä–≤–µ—Ä—É –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            window.APIClient.MessageHunterAPI.stopSearch()
            .then(data => {
                if (data.success) {
                    window.UIUtils.showWarning('üõë –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
            });
            
            this.updateSearchUI(false);
            this.isSearching = false;
        }
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–∏—Å–∫–∞
     * @param {boolean} searching - –ò–¥–µ—Ç –ª–∏ –ø–æ–∏—Å–∫ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
     */
    updateSearchUI: function(searching) {
        const loadingEl = document.getElementById('loading');
        const resultsEl = document.getElementById('results');
        const errorEl = document.getElementById('error');
        const searchBtn = document.getElementById('searchBtn');
        const stopBtn = document.getElementById('stopBtn');
        
        if (searching) {
            if (loadingEl) loadingEl.style.display = 'block';
            if (resultsEl) resultsEl.style.display = 'none';
            if (errorEl) errorEl.style.display = 'none';
            if (searchBtn) {
                searchBtn.disabled = true;
                searchBtn.textContent = 'üîç –ò—â–µ–º...';
            }
            if (stopBtn) stopBtn.style.display = 'inline-block';
        } else {
            if (loadingEl) loadingEl.style.display = 'none';
            if (searchBtn) {
                searchBtn.disabled = false;
                searchBtn.textContent = 'üîç –ò—Å–∫–∞—Ç—å';
            }
            if (stopBtn) stopBtn.style.display = 'none';
        }
    },
    
    /**
     * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
     * @param {boolean} show - –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏
     */
    showActionButtons: function(show) {
        const buttons = ['saveBtn', 'analyzeBtn', 'clearBtn'];
        buttons.forEach(btnId => {
            const btn = document.getElementById(btnId);
            if (btn) {
                btn.style.display = show ? 'inline-block' : 'none';
            }
        });
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –ø–æ–∏—Å–∫–∞
     * @returns {number} –ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞
     */
    getSearchDepth: function() {
        const depthInput = document.getElementById('searchDepth');
        const value = parseInt(depthInput ? depthInput.value : 500);
        
        if (value < 1) return 1;
        if (value > 10000) return 10000;
        return value || 500;
    },
    
    /**
     * –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
     * @param {Array} groupsToUse - –ì—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    simulateSearchProgress: function(groupsToUse) {
        let currentGroup = 0;
        let foundMessages = 0;
        let processedMessages = 0;
        const totalGroups = groupsToUse.length;
        const messagesPerGroup = this.getSearchDepth();
        
        this.clearProgressInterval();
        
        this.progressInterval = setInterval(() => {
            if (currentGroup < totalGroups) {
                if (processedMessages < messagesPerGroup) {
                    processedMessages += Math.min(200, messagesPerGroup - processedMessages);
                    foundMessages += Math.floor(Math.random() * 3);
                    
                    const group = window.MessageHunter.allGroups.find(g => g.id === groupsToUse[currentGroup]);
                    const groupName = group ? group.title : `–ì—Ä—É–ø–ø–∞ ${currentGroup + 1}`;
                    
                    this.updateSearchProgress(
                        `üîç ${groupName}: ${processedMessages}/${messagesPerGroup} —Å–æ–æ–±—â–µ–Ω–∏–π`,
                        currentGroup + 1,
                        totalGroups,
                        foundMessages
                    );
                } else {
                    currentGroup++;
                    processedMessages = 0;
                    
                    if (currentGroup < totalGroups) {
                        const nextGroup = window.MessageHunter.allGroups.find(g => g.id === groupsToUse[currentGroup]);
                        const nextGroupName = nextGroup ? nextGroup.title : `–ì—Ä—É–ø–ø–∞ ${currentGroup + 1}`;
                        this.updateSearchProgress(
                            `üìÇ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥—Ä—É–ø–ø–µ: ${nextGroupName}`,
                            currentGroup,
                            totalGroups,
                            foundMessages
                        );
                    }
                }
            } else {
                this.updateSearchProgress(
                    'üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...',
                    totalGroups,
                    totalGroups,
                    foundMessages
                );
            }
        }, 800);
        
        // –ê–≤—Ç–æ–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        setTimeout(() => {
            this.clearProgressInterval();
        }, 300000);
    },
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    clearProgressInterval: function() {
        if (this.progressInterval) {
            clearInterval(this.progressInterval);
            this.progressInterval = null;
        }
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
     * @param {string} text - –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
     * @param {number} current - –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞
     * @param {number} total - –í—Å–µ–≥–æ –≥—Ä—É–ø–ø
     * @param {number} found - –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    updateSearchProgress: function(text, current, total, found) {
        const loadingText = document.getElementById('loadingText');
        const groupProgress = document.getElementById('groupProgress');
        const foundProgress = document.getElementById('foundProgress');
        
        if (loadingText) loadingText.textContent = text;
        if (groupProgress) groupProgress.textContent = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ${current} –∏–∑ ${total}`;
        if (foundProgress) foundProgress.textContent = `–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${found}`;
    },
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     * @param {Array} results - –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param {string} keyword - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–∏—Å–∫–∞
     * @param {Array} accountsUsed - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    showResults: function(results, keyword, accountsUsed = []) {
        console.log('üîç –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', results.length);
        
        window.MessageHunter.allSearchResults = results;
        this.displayedResults = 0;
        this.isLoadingMore = false;
        
        const resultsDiv = document.getElementById('results');
        const messagesDiv = document.getElementById('messages');
        const countDiv = document.getElementById('resultsCount');
        
        if (!resultsDiv || !messagesDiv || !countDiv) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            return;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        const accountsInfo = accountsUsed && accountsUsed.length > 1 
            ? `<br><small style="color: #666; font-size: 12px;">üë• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${accountsUsed.join(', ')}</small>`
            : '';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        countDiv.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <div>
                    –ù–∞–π–¥–µ–Ω–æ <strong>${results.length}</strong> —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–ª–æ–≤–∞–º: <strong>${keyword}</strong> –≤ <strong>${window.MessageHunter.selectedGroups.length}</strong> –≥—Ä—É–ø–ø–∞—Ö
                </div>
                <div style="display: flex; gap: 10px;">
                    <button onclick="window.SearchManager.exportResults()" class="export-btn" style="
                        background: #28a745;
                        color: white;
                        border: none;
                        padding: 6px 12px;
                        border-radius: 5px;
                        cursor: pointer;
                        font-size: 12px;
                    ">
                        üìÑ –≠–∫—Å–ø–æ—Ä—Ç
                    </button>
                </div>
            </div>
            <small style="color: #666; font-size: 12px;">
                üìÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ ‚Ä¢ –°–∫—Ä–æ–ª–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –µ—â–µ
            </small>
            ${accountsInfo}
        `;
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        messagesDiv.innerHTML = '';
        
        if (results.length === 0) {
            messagesDiv.innerHTML = `
                <div style="padding: 40px; text-align: center; color: #666;">
                    <div style="font-size: 48px; margin-bottom: 15px;">üîç</div>
                    <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã</p>
                </div>
            `;
        } else {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.loadMoreResults();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        resultsDiv.style.display = 'block';
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        resultsDiv.scrollIntoView({ behavior: 'smooth' });
        
        console.log(`‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ${results.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    },
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
     */
    loadMoreResults: function() {
        if (this.isLoadingMore || this.displayedResults >= window.MessageHunter.allSearchResults.length) {
            return;
        }
        
        this.isLoadingMore = true;
        
        const messagesDiv = document.getElementById('messages');
        const startIndex = this.displayedResults;
        const endIndex = Math.min(startIndex + this.resultsPerPage, window.MessageHunter.allSearchResults.length);
        
        console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ${startIndex + 1}-${endIndex} –∏–∑ ${window.MessageHunter.allSearchResults.length}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (startIndex > 0) {
            const loadingDiv = document.createElement('div');
            loadingDiv.id = 'loadingMore';
            loadingDiv.innerHTML = '<div style="text-align: center; padding: 20px; color: #666;">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...</div>';
            messagesDiv.appendChild(loadingDiv);
        }
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            const loadingEl = document.getElementById('loadingMore');
            if (loadingEl) loadingEl.remove();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for (let i = startIndex; i < endIndex; i++) {
                const msg = window.MessageHunter.allSearchResults[i];
                this.addMessageToDisplay(msg, i + 1);
            }
            
            this.displayedResults = endIndex;
            this.isLoadingMore = false;
            
            console.log(`‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ ${this.displayedResults} –∏–∑ ${window.MessageHunter.allSearchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        }, 300);
    },
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     * @param {Object} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {number} index - –ò–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    addMessageToDisplay: function(msg, index) {
        const messagesDiv = document.getElementById('messages');
        if (!messagesDiv) return;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        const messageDate = window.Utils.DateUtils.parseMessageDate(msg.date);
        const freshnessIndicator = window.Utils.DateUtils.getRelativeTime(messageDate);
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message';
        messageDiv.style.cssText = `
            background: white;
            border: 1px solid #ddd;
            border-radius: 10px;
            margin-bottom: 15px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
        `;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageLink = this.generateMessageLink(msg);
        
        messageDiv.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <div style="display: inline-block; background: #0088cc; color: white; padding: 4px 8px; border-radius: 12px; font-size: 11px; font-weight: 600;">
                    ${freshnessIndicator}
                </div>
                <div style="font-size: 12px; color: #999;">
                    #${index}
                </div>
            </div>
            
            <div class="message-text" style="margin-bottom: 15px; line-height: 1.5;">
                ${this.highlightKeywords(msg.text, window.MessageHunter.keywords)}
            </div>
            
            ${msg.matched_words && msg.matched_words.length > 0 ? `
                <div class="matched-words" style="margin-bottom: 15px;">
                    <strong>üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:</strong> 
                    ${msg.matched_words.map(word => 
                        `<span style="background: #fff3cd; padding: 2px 6px; border-radius: 8px; font-size: 12px; margin: 0 2px;">${word}</span>`
                    ).join('')}
                </div>
            ` : ''}
            
            <div class="message-meta" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 15px; margin-bottom: 15px;">
                <div style="display: flex; align-items: center; gap: 8px;">
                    <span>üë§</span>
                    <span style="font-weight: 500;">@${msg.author}</span>
                </div>
                <div style="display: flex; align-items: center; gap: 8px;">
                    <span>üí¨</span>
                    <span>${msg.chat}</span>
                </div>
                <div style="display: flex; align-items: center; gap: 8px;">
                    <span>üìÖ</span>
                    <span>${msg.date}</span>
                </div>
            </div>
            
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; gap: 10px;">
                    <button onclick="window.SearchManager.copyMessage(${index - 1})" style="
                        background: #17a2b8;
                        color: white;
                        border: none;
                        padding: 6px 12px;
                        border-radius: 5px;
                        cursor: pointer;
                        font-size: 12px;
                    ">
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                </div>
                <a href="${messageLink}" target="_blank" style="
                    color: #0088cc; 
                    text-decoration: none; 
                    font-size: 12px;
                    padding: 6px 12px;
                    border: 1px solid #0088cc;
                    border-radius: 5px;
                    transition: all 0.2s;
                " 
                onmouseover="this.style.background='#0088cc'; this.style.color='white';"
                onmouseout="this.style.background='transparent'; this.style.color='#0088cc';">
                    üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
                </a>
            </div>
        `;
        
        messagesDiv.appendChild(messageDiv);
    },
    
    /**
     * –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
     * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @param {Array} keywords - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
     * @returns {string} –¢–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
     */
    highlightKeywords: function(text, keywords) {
        if (!keywords || keywords.length === 0) return text;
        
        let highlightedText = text;
        keywords.forEach(keyword => {
            const regex = new RegExp(`(${keyword})`, 'gi');
            highlightedText = highlightedText.replace(regex, '<mark style="background: #ffeb3b; padding: 1px 3px; border-radius: 3px;">$1</mark>');
        });
        
        return highlightedText;
    },
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
     * @param {Object} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @returns {string} –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    generateMessageLink: function(msg) {
        if (!msg.chat_id || !msg.message_id) {
            return '#';
        }
        
        if (msg.chat_username) {
            return `https://t.me/${msg.chat_username}/${msg.message_id}`;
        }
        
        const chatIdStr = msg.chat_id.toString();
        const cleanChatId = chatIdStr.startsWith('-100') ? chatIdStr.slice(4) : chatIdStr.replace('-', '');
        
        return `https://t.me/c/${cleanChatId}/${msg.message_id}`;
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
     */
    handleScroll: function(event) {
        const messagesDiv = event.target;
        const scrollTop = messagesDiv.scrollTop;
        const scrollHeight = messagesDiv.scrollHeight;
        const clientHeight = messagesDiv.clientHeight;
        
        const nearBottom = scrollTop + clientHeight >= scrollHeight - 100;
        
        if (nearBottom && !this.isLoadingMore && this.displayedResults < window.MessageHunter.allSearchResults.length) {
            console.log('üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–∫—Ä—É—Ç–∏–ª –¥–æ –∫–æ–Ω—Ü–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—â–µ...');
            this.loadMoreResults();
        }
    },
    
    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {number} messageIndex - –ò–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    copyMessage: function(messageIndex) {
        if (!window.MessageHunter.allSearchResults || !window.MessageHunter.allSearchResults[messageIndex]) {
            window.UIUtils.showError('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        const msg = window.MessageHunter.allSearchResults[messageIndex];
        
        const text = `üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø–æ–∏—Å–∫–∞

üë§ –ê–≤—Ç–æ—Ä: @${msg.author}
üí¨ –ì—Ä—É–ø–ø–∞: ${msg.chat}
üìÖ –î–∞—Ç–∞: ${msg.date}

–¢–µ–∫—Å—Ç:
"${msg.text}"

üîó –°—Å—ã–ª–∫–∞: ${this.generateMessageLink(msg)}`;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Utils –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        if (window.Utils && window.Utils.BrowserUtils && window.Utils.BrowserUtils.copyToClipboard) {
            window.Utils.BrowserUtils.copyToClipboard(text).then(success => {
                if (success) {
                    window.UIUtils.showToast('üìã –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
                    console.log('üìã –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ');
                } else {
                    this.fallbackCopyToClipboard(text);
                }
            });
        } else {
            this.fallbackCopyToClipboard(text);
        }
    },
    
    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    fallbackCopyToClipboard: function(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            window.UIUtils.showToast('üìã –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
            console.log('üìã –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ (fallback)');
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            window.UIUtils.showError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        } finally {
            document.body.removeChild(textArea);
        }
    },
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    exportResults: function() {
        if (!window.MessageHunter.allSearchResults || window.MessageHunter.allSearchResults.length === 0) {
            window.UIUtils.showError('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }
        
        console.log('üìÑ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...');
        
        const exportData = {
            exported_at: new Date().toISOString(),
            keywords: window.MessageHunter.keywords,
            total_results: window.MessageHunter.allSearchResults.length,
            groups_searched: window.MessageHunter.selectedGroups.length,
            messages: window.MessageHunter.allSearchResults.map((msg, index) => ({
                index: index + 1,
                author: msg.author,
                chat: msg.chat,
                date: msg.date,
                text: msg.text,
                matched_words: msg.matched_words || [],
                telegram_link: this.generateMessageLink(msg)
            }))
        };
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Utils –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if (window.Utils && window.Utils.FileUtils) {
            const filename = `search_results_${new Date().toISOString().split('T')[0]}.json`;
            window.Utils.FileUtils.downloadAsFile(
                JSON.stringify(exportData, null, 2),
                filename,
                'application/json'
            );
        } else {
            // Fallback
            const blob = new Blob([JSON.stringify(exportData, null, 2)], {
                type: 'application/json'
            });
            
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `search_results_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }
        
        window.UIUtils.showToast('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    },
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    clearAllResults: function() {
        if (!window.MessageHunter.lastSearchResults && window.MessageHunter.keywords.length === 0) {
            window.UIUtils.showError('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
            return;
        }
        
        if (!confirm('‚ùì –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞?')) {
            return;
        }
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        window.MessageHunter.keywords = [];
        window.MessageHunter.lastSearchResults = null;
        window.MessageHunter.allSearchResults = [];
        this.displayedResults = 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateKeywordsDisplay();
        
        const resultsDiv = document.getElementById('results');
        const aiResultsDiv = document.getElementById('aiResults');
        
        if (resultsDiv) resultsDiv.style.display = 'none';
        if (aiResultsDiv) aiResultsDiv.style.display = 'none';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        this.showActionButtons(false);
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        localStorage.removeItem('search_keywords');
        window.DataManager.SearchResults.clear();
        
        window.UIUtils.showToast('‚úÖ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã', 'success');
        console.log('üßπ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω—ã');
    },
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
     */
    saveCurrentSearch: function() {
        if (!window.MessageHunter.lastSearchResults) {
            window.UIUtils.showError('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }
        
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HistoryManager
        if (window.HistoryManager && window.HistoryManager.saveCurrentSearch) {
            window.HistoryManager.saveCurrentSearch();
        } else {
            window.UIUtils.showError('‚ùå HistoryManager –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
    },
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    loadSavedResults: function() {
        const savedData = window.DataManager.SearchResults.load();
        if (savedData && savedData.results && Array.isArray(savedData.results)) {
            console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ${savedData.results.length}`);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            window.MessageHunter.lastSearchResults = {
                keywords: savedData.keywords || [],
                results: savedData.results,
                groups_count: savedData.groups_count || 0
            };
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if (savedData.keywords && Array.isArray(savedData.keywords)) {
                window.MessageHunter.keywords = savedData.keywords;
                this.updateKeywordsDisplay();
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (savedData.results.length > 0) {
                this.showResults(
                    savedData.results,
                    savedData.keywords.join(', '),
                    []
                );
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)
                const saveBtn = document.getElementById('saveBtn');
                if (saveBtn) {
                    saveBtn.style.display = 'none';
                }
            }
        }
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    getSearchStats: function() {
        if (!window.MessageHunter.allSearchResults) {
            return null;
        }
        
        const results = window.MessageHunter.allSearchResults;
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä–∞–º
        const authorStats = {};
        results.forEach(msg => {
            authorStats[msg.author] = (authorStats[msg.author] || 0) + 1;
        });
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Ç–∞–º
        const chatStats = {};
        results.forEach(msg => {
            chatStats[msg.chat] = (chatStats[msg.chat] || 0) + 1;
        });
        
        // –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç
        const dates = results.map(msg => window.Utils.DateUtils.parseMessageDate(msg.date));
        const minDate = new Date(Math.min(...dates));
        const maxDate = new Date(Math.max(...dates));
        
        return {
            total: results.length,
            topAuthors: Object.entries(authorStats)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5),
            topChats: Object.entries(chatStats)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5),
            dateRange: {
                from: window.Utils.DateUtils.formatDate(minDate),
                to: window.Utils.DateUtils.formatDate(maxDate),
                span: Math.ceil((maxDate - minDate) / (1000 * 60 * 60 * 24)) + ' –¥–Ω–µ–π'
            }
        };
    },
    
    /**
     * –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞
     */
    showSearchStats: function() {
        const stats = this.getSearchStats();
        if (!stats) {
            window.UIUtils.showError('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
        `;
        
        modal.innerHTML = `
            <div style="
                background: white;
                padding: 30px;
                border-radius: 15px;
                max-width: 600px;
                max-height: 80vh;
                overflow-y: auto;
                box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            ">
                <h3 style="margin: 0 0 20px 0; color: #333;">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞</h3>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 20px; margin-bottom: 20px;">
                    <div style="text-align: center; background: #f8f9fa; padding: 15px; border-radius: 8px;">
                        <div style="font-size: 24px; font-weight: bold; color: #007bff;">${stats.total}</div>
                        <div style="font-size: 12px; color: #666;">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                    </div>
                    <div style="text-align: center; background: #f8f9fa; padding: 15px; border-radius: 8px;">
                        <div style="font-size: 24px; font-weight: bold; color: #28a745;">${stats.topChats.length}</div>
                        <div style="font-size: 12px; color: #666;">–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</div>
                    </div>
                    <div style="text-align: center; background: #f8f9fa; padding: 15px; border-radius: 8px;">
                        <div style="font-size: 24px; font-weight: bold; color: #6f42c1;">${stats.topAuthors.length}</div>
                        <div style="font-size: 12px; color: #666;">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤</div>
                    </div>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h4>üìÖ –ü–µ—Ä–∏–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π</h4>
                    <div style="background: #f8f9fa; padding: 10px; border-radius: 5px;">
                        –° ${stats.dateRange.from} –ø–æ ${stats.dateRange.to}<br>
                        <small>–û—Ö–≤–∞—Ç: ${stats.dateRange.span}</small>
                    </div>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h4>üë• –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤</h4>
                    ${stats.topAuthors.map(([author, count]) => `
                        <div style="display: flex; justify-content: space-between; padding: 5px 0; border-bottom: 1px solid #eee;">
                            <span>@${author}</span>
                            <span style="font-weight: bold;">${count}</span>
                        </div>
                    `).join('')}
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h4>üí¨ –¢–æ–ø —á–∞—Ç–æ–≤</h4>
                    ${stats.topChats.map(([chat, count]) => `
                        <div style="display: flex; justify-content: space-between; padding: 5px 0; border-bottom: 1px solid #eee;">
                            <span>${chat}</span>
                            <span style="font-weight: bold;">${count}</span>
                        </div>
                    `).join('')}
                </div>
                
                <div style="text-align: right;">
                    <button onclick="this.closest('.modal-overlay').remove()" 
                            style="
                                background: #6c757d;
                                color: white;
                                border: none;
                                padding: 10px 20px;
                                border-radius: 5px;
                                cursor: pointer;
                            ">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;
        
        modal.className = 'modal-overlay';
        document.body.appendChild(modal);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
        
        console.log('üìä –ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞');
    },
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∞–≤—Ç–æ—Ä—É
     * @param {string} author - –ò–º—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    filterByAuthor: function(author) {
        if (!window.MessageHunter.allSearchResults) return;
        
        const filtered = window.MessageHunter.allSearchResults.filter(msg => msg.author === author);
        this.showResults(filtered, `–∞–≤—Ç–æ—Ä: @${author}`, []);
        
        window.UIUtils.showToast(`–ü–æ–∫–∞–∑–∞–Ω–æ ${filtered.length} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç @${author}`, 'info');
    },
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —á–∞—Ç—É
     * @param {string} chat - –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    filterByChat: function(chat) {
        if (!window.MessageHunter.allSearchResults) return;
        
        const filtered = window.MessageHunter.allSearchResults.filter(msg => msg.chat === chat);
        this.showResults(filtered, `—á–∞—Ç: ${chat}`, []);
        
        window.UIUtils.showToast(`–ü–æ–∫–∞–∑–∞–Ω–æ ${filtered.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ "${chat}"`, 'info');
    },
    
    /**
     * –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    resetFilters: function() {
        if (!window.MessageHunter.lastSearchResults) return;
        
        this.showResults(
            window.MessageHunter.lastSearchResults.results,
            window.MessageHunter.lastSearchResults.keywords.join(', '),
            []
        );
        
        window.UIUtils.showToast('–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.addKeyword = function() {
    window.SearchManager.addKeyword();
};

window.removeKeyword = function(word) {
    window.SearchManager.removeKeyword(word);
};

window.performSearch = function() {
    window.SearchManager.performSearch();
};

window.stopSearch = function() {
    window.SearchManager.stopSearch();
};

window.showResults = function(results, keyword, accountsUsed) {
    window.SearchManager.showResults(results, keyword, accountsUsed);
};

window.clearAllResults = function() {
    window.SearchManager.clearAllResults();
};

window.saveCurrentSearch = function() {
    window.SearchManager.saveCurrentSearch();
};

window.exportSearchResults = function() {
    window.SearchManager.exportResults();
};

window.showSearchStats = function() {
    window.SearchManager.showSearchStats();
};

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    setTimeout(() => {
        window.SearchManager.init();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        window.SearchManager.loadKeywords();
    }, 300);
});

console.log('‚úÖ SearchManager –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');