// ===============================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü–ê–ú–ò
// static/js/groups-manager.js
// ===============================

window.GroupsManager = {
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏–∑ –∫—ç—à–∞
     */
    loadGroups: async function() {
        console.log('üìã –ó–∞–≥—Ä—É–∂–∞—é –≥—Ä—É–ø–ø—ã...');
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cached = window.DataManager.GroupsCache.load();
            if (cached && cached.length > 0) {
                console.log('üìã –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∫—ç—à –≥—Ä—É–ø–ø');
                window.MessageHunter.allGroups = cached;
                this.displayGroups(cached);
                console.log(`‚úÖ –ì—Ä—É–ø–ø—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞: ${cached.length}`);
                
                setTimeout(() => {
                    this.restoreAllSelections();
                }, 500);
                return;
            }
            
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≥—Ä—É–ø–ø—ã —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            window.UIUtils.showGroupsLoading(true);
            
            const response = await fetch('/get_groups');
            const data = await response.json();
            
            if (data.success) {
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.groups.length} –≥—Ä—É–ø–ø`);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                window.DataManager.GroupsCache.save(data.groups);
                
                window.MessageHunter.allGroups = data.groups;
                this.displayGroups(data.groups);
                console.log(`‚úÖ –ì—Ä—É–ø–ø—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã: ${data.groups.length}`);
                
                setTimeout(() => {
                    this.restoreAllSelections();
                }, 500);
                
            } else {
                throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', error);
            window.UIUtils.showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
        } finally {
            window.UIUtils.showGroupsLoading(false);
        }
    },
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –≤–æ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
     * @param {Array} groups - –ú–∞—Å—Å–∏–≤ –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    displayGroups: function(groups) {
        console.log(`üìã –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ${groups.length} –≥—Ä—É–ø–ø`);
        
        window.MessageHunter.allGroups = groups;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
        this.displayGroupsInContainer('autoSearchGroupsContainer', groups, 'autosearch-groups', 'toggleAutoSearchGroup');
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        this.displayGroupsInContainer('groupsContainer', groups, 'groups', 'toggleGroup');
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        this.displayGroupsInContainer('broadcastGroupsContainer', groups, 'broadcast-groups', 'toggleBroadcastGroup');
    },
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     * @param {Array} groups - –ú–∞—Å—Å–∏–≤ –≥—Ä—É–ø–ø
     * @param {string} inputName - –ò–º—è –¥–ª—è input —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     * @param {string} onchangeFunc - –§—É–Ω–∫—Ü–∏—è –¥–ª—è onchange
     */
    displayGroupsInContainer: function(containerId, groups, inputName, onchangeFunc) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        const html = groups.map(group => `
            <div class="group-item">
                <input type="checkbox" 
                    class="group-checkbox" 
                    name="${inputName}"
                    value="${group.id}"
                    id="${inputName}_${group.id}"
                    onchange="${onchangeFunc}('${group.id}')">
                <label for="${inputName}_${group.id}" class="group-info">
                    <div class="group-title">${group.title}</div>
                    <div class="group-type">üë• ${group.members_count || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
                </label>
            </div>
        `).join('');
        
        container.innerHTML = html;
        console.log(`‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≥—Ä—É–ø–ø—ã –≤ ${containerId}: ${groups.length}`);
    },
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø
     */
    forceReloadGroups: async function() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø...');
        
        try {
            // –û—á–∏—â–∞–µ–º –∫—ç—à
            window.DataManager.GroupsCache.clear();
            
            // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            window.MessageHunter.allGroups = [];
            window.MessageHunter.selectedGroups = [];
            window.MessageHunter.autoSearchGroups = [];
            window.MessageHunter.selectedBroadcastGroups = [];
            
            window.UIUtils.showToast('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...', 'info');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
            await this.loadGroups();
            
            window.UIUtils.showToast('‚úÖ –ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø:', error);
            window.UIUtils.showToast('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø', 'error');
        }
    },
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
     * @param {string} groupId - ID –≥—Ä—É–ø–ø—ã
     */
    toggleGroup: function(groupId) {
        const groups = window.MessageHunter.selectedGroups;
        
        if (groups.includes(groupId)) {
            window.MessageHunter.selectedGroups = groups.filter(id => id !== groupId);
            console.log(`‚ûñ –£–±—Ä–∞–ª –≥—Ä—É–ø–ø—É ${groupId}`);
        } else {
            window.MessageHunter.selectedGroups.push(groupId);
            console.log(`‚ûï –î–æ–±–∞–≤–∏–ª –≥—Ä—É–ø–ø—É ${groupId}`);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        this.saveSelections('search');
        this.updateCounter('search');
    },
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
     * @param {string} groupId - ID –≥—Ä—É–ø–ø—ã
     */
    toggleAutoSearchGroup: function(groupId) {
        console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≥—Ä—É–ø–ø—É –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞: ${groupId}`);
        
        const groups = window.MessageHunter.autoSearchGroups;
        
        if (groups.includes(groupId)) {
            window.MessageHunter.autoSearchGroups = groups.filter(id => id !== groupId);
        } else {
            window.MessageHunter.autoSearchGroups.push(groupId);
        }
        
        this.saveSelections('autosearch');
        this.updateCounter('autosearch');
    },
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
     * @param {string} groupId - ID –≥—Ä—É–ø–ø—ã
     */
    toggleBroadcastGroup: function(groupId) {
        const groups = window.MessageHunter.selectedBroadcastGroups;
        
        if (groups.includes(groupId)) {
            window.MessageHunter.selectedBroadcastGroups = groups.filter(id => id !== groupId);
        } else {
            window.MessageHunter.selectedBroadcastGroups.push(groupId);
        }
        
        this.saveSelections('broadcast');
        this.updateCounter('broadcast');
    },
    
    /**
     * –í—ã–±–æ—Ä –≤—Å–µ—Ö –≥—Ä—É–ø–ø –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     * @param {string} type - –¢–∏–ø: 'search', 'autosearch', 'broadcast'
     */
    selectAll: function(type) {
        const allIds = window.MessageHunter.allGroups.map(g => g.id);
        
        switch(type) {
            case 'search':
                window.MessageHunter.selectedGroups = allIds.slice();
                this.updateCheckboxes('groups', true);
                break;
            case 'autosearch':
                window.MessageHunter.autoSearchGroups = allIds.slice();
                this.updateCheckboxes('autosearch-groups', true);
                break;
            case 'broadcast':
                window.MessageHunter.selectedBroadcastGroups = allIds.slice();
                this.updateCheckboxes('broadcast-groups', true);
                break;
        }
        
        this.saveSelections(type);
        this.updateCounter(type);
        console.log(`‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –≥—Ä—É–ø–ø—ã –¥–ª—è ${type}`);
    },
    
    /**
     * –°–Ω—è—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     * @param {string} type - –¢–∏–ø: 'search', 'autosearch', 'broadcast'
     */
    deselectAll: function(type) {
        switch(type) {
            case 'search':
                window.MessageHunter.selectedGroups = [];
                this.updateCheckboxes('groups', false);
                break;
            case 'autosearch':
                window.MessageHunter.autoSearchGroups = [];
                this.updateCheckboxes('autosearch-groups', false);
                break;
            case 'broadcast':
                window.MessageHunter.selectedBroadcastGroups = [];
                this.updateCheckboxes('broadcast-groups', false);
                break;
        }
        
        this.saveSelections(type);
        this.updateCounter(type);
        console.log(`‚ùå –£–±—Ä–∞–Ω—ã –≤—Å–µ –≥—Ä—É–ø–ø—ã –¥–ª—è ${type}`);
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤
     * @param {string} inputName - –ò–º—è input —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     * @param {boolean} checked - –°–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    updateCheckboxes: function(inputName, checked) {
        document.querySelectorAll(`input[name="${inputName}"]`).forEach(cb => {
            cb.checked = checked;
        });
    },
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
     * @param {string} type - –¢–∏–ø –≥—Ä—É–ø–ø
     */
    saveSelections: function(type) {
        let groups;
        
        switch(type) {
            case 'search':
                groups = window.MessageHunter.selectedGroups;
                break;
            case 'autosearch':
                groups = window.MessageHunter.autoSearchGroups;
                break;
            case 'broadcast':
                groups = window.MessageHunter.selectedBroadcastGroups;
                break;
            default:
                console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø:', type);
                return;
        }
        
        window.DataManager.SelectedGroups.save(groups, type);
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≥—Ä—É–ø–ø—ã ${type}: ${groups.length}`);
    },
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤
     * @param {string} type - –¢–∏–ø –≥—Ä—É–ø–ø
     */
    loadSelections: function(type) {
        const groups = window.DataManager.SelectedGroups.load(type);
        
        switch(type) {
            case 'search':
                window.MessageHunter.selectedGroups = groups;
                break;
            case 'autosearch':
                window.MessageHunter.autoSearchGroups = groups;
                break;
            case 'broadcast':
                window.MessageHunter.selectedBroadcastGroups = groups;
                break;
        }
        
        console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≥—Ä—É–ø–ø—ã ${type}: ${groups.length}`);
    },
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤ –≥—Ä—É–ø–ø
     */
    restoreAllSelections: function() {
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã –≥—Ä—É–ø–ø...');
        
        setTimeout(() => {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—ã–±–æ—Ä—ã
            this.loadSelections('search');
            this.loadSelections('autosearch');
            this.loadSelections('broadcast');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤
            this.restoreCheckboxes('search', 'groups');
            this.restoreCheckboxes('autosearch', 'autosearch-groups');
            this.restoreCheckboxes('broadcast', 'broadcast-groups');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            this.updateCounter('search');
            this.updateCounter('autosearch');
            this.updateCounter('broadcast');
            
            console.log('‚úÖ –í—Å–µ –≤—ã–±–æ—Ä—ã –≥—Ä—É–ø–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        }, 300);
    },
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤
     * @param {string} type - –¢–∏–ø –≥—Ä—É–ø–ø
     * @param {string} inputName - –ò–º—è input —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    restoreCheckboxes: function(type, inputName) {
        let groups;
        
        switch(type) {
            case 'search':
                groups = window.MessageHunter.selectedGroups;
                break;
            case 'autosearch':
                groups = window.MessageHunter.autoSearchGroups;
                break;
            case 'broadcast':
                groups = window.MessageHunter.selectedBroadcastGroups;
                break;
            default:
                return;
        }
        
        groups.forEach(groupId => {
            const checkbox = document.querySelector(`input[name="${inputName}"][value="${groupId}"]`);
            if (checkbox) {
                checkbox.checked = true;
            }
        });
        
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ–∫–±–æ–∫—Å—ã ${type}: ${groups.length}`);
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
     * @param {string} type - –¢–∏–ø –≥—Ä—É–ø–ø
     */
    updateCounter: function(type) {
        let selectedCount;
        
        switch(type) {
            case 'search':
                selectedCount = window.MessageHunter.selectedGroups.length;
                break;
            case 'autosearch':
                selectedCount = window.MessageHunter.autoSearchGroups.length;
                break;
            case 'broadcast':
                selectedCount = window.MessageHunter.selectedBroadcastGroups.length;
                break;
            default:
                return;
        }
        
        const totalCount = window.MessageHunter.allGroups.length;
        window.UIUtils.updateCounter(type, selectedCount, totalCount);
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     */
    getSelectedGroupsForCurrentTab: function() {
        const activeTab = window.TabManager.getActiveTab();
        
        if (activeTab === 'autosearch') {
            return window.MessageHunter.autoSearchGroups;
        }
        
        return window.MessageHunter.selectedGroups;
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.toggleGroup = window.GroupsManager.toggleGroup.bind(window.GroupsManager);
window.toggleAutoSearchGroup = window.GroupsManager.toggleAutoSearchGroup.bind(window.GroupsManager);
window.toggleBroadcastGroup = window.GroupsManager.toggleBroadcastGroup.bind(window.GroupsManager);
window.forceReloadGroups = window.GroupsManager.forceReloadGroups.bind(window.GroupsManager);
window.selectAllGroups = () => window.GroupsManager.selectAll('search');
window.deselectAllGroups = () => window.GroupsManager.deselectAll('search');
window.selectAllAutoGroups = () => window.GroupsManager.selectAll('autosearch');
window.deselectAllAutoGroups = () => window.GroupsManager.deselectAll('autosearch');
window.selectAllBroadcastGroups = () => window.GroupsManager.selectAll('broadcast');
window.deselectAllBroadcastGroups = () => window.GroupsManager.deselectAll('broadcast');

console.log('‚úÖ GroupsManager –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');