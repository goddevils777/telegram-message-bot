// ===============================
// API –ö–õ–ò–ï–ù–¢
// static/js/api-client.js
// ===============================

window.APIClient = {
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config: {
        baseUrl: '',
        timeout: 30000,
        retryAttempts: 3,
        retryDelay: 1000
    },
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    activeRequests: new Map(),
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
     */
    init: function() {
        console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è APIClient...');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π URL
        this.config.baseUrl = window.location.origin;
        
        console.log('‚úÖ APIClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    },
    
    /**
     * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
     * @param {string} method - HTTP –º–µ—Ç–æ–¥
     * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise} Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
     */
    request: async function(method, url, options = {}) {
        const {
            data = null,
            headers = {},
            timeout = this.config.timeout,
            retries = this.config.retryAttempts,
            signal = null
        } = options;
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞
        const requestId = window.Utils.StringUtils.generateId();
        
        // –°–æ–∑–¥–∞–µ–º AbortController –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        const abortController = signal ? null : new AbortController();
        const requestSignal = signal || abortController.signal;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ fetch
        const fetchOptions = {
            method: method.toUpperCase(),
            headers: {
                'Content-Type': 'application/json',
                ...headers
            },
            signal: requestSignal
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST/PUT/PATCH
        if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
            fetchOptions.body = JSON.stringify(data);
        }
        
        // –ü–æ–ª–Ω—ã–π URL
        const fullUrl = url.startsWith('http') ? url : `${this.config.baseUrl}${url}`;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        console.log(`üåê ${method.toUpperCase()} ${url}`, data ? data : '');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        this.activeRequests.set(requestId, {
            url: fullUrl,
            method,
            startTime: Date.now(),
            abortController
        });
        
        let lastError = null;
        
        // –ü–æ–ø—ã—Ç–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        for (let attempt = 0; attempt <= retries; attempt++) {
            try {
                // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                const timeoutPromise = new Promise((_, reject) => {
                    setTimeout(() => reject(new Error('Request timeout')), timeout);
                });
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                const response = await Promise.race([
                    fetch(fullUrl, fetchOptions),
                    timeoutPromise
                ]);
                
                // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                this.activeRequests.delete(requestId);
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                const result = await this.handleResponse(response, url);
                
                // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const duration = Date.now() - this.activeRequests.get(requestId)?.startTime || 0;
                console.log(`‚úÖ ${method.toUpperCase()} ${url} (${duration}ms)`);
                
                return result;
                
            } catch (error) {
                lastError = error;
                
                // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                if (error.name === 'AbortError') {
                    console.log(`üö´ ${method.toUpperCase()} ${url} - –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω`);
                    throw error;
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                if (attempt === retries) {
                    console.error(`‚ùå ${method.toUpperCase()} ${url} - –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã`, error);
                    break;
                }
                
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                console.warn(`‚ö†Ô∏è ${method.toUpperCase()} ${url} - –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${retries + 1} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º...`);
                await window.Utils.PerformanceUtils.sleep(this.config.retryDelay * (attempt + 1));
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.activeRequests.delete(requestId);
        
        // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
        throw lastError;
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     * @param {Response} response - –û—Ç–≤–µ—Ç –æ—Ç fetch
     * @param {string} url - URL –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
     */
    handleResponse: async function(response, url) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if (!response.ok) {
            let errorMessage = `HTTP ${response.status}`;
            
            try {
                const errorData = await response.json();
                errorMessage = errorData.error || errorData.message || errorMessage;
            } catch {
                errorMessage = response.statusText || errorMessage;
            }
            
            throw new Error(errorMessage);
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try {
            return await response.json();
        } catch {
            // –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            return await response.text();
        }
    },
    
    /**
     * GET –∑–∞–ø—Ä–æ—Å
     * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise} Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    get: function(url, options = {}) {
        return this.request('GET', url, options);
    },
    
    /**
     * POST –∑–∞–ø—Ä–æ—Å
     * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise} Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    post: function(url, data = null, options = {}) {
        return this.request('POST', url, { ...options, data });
    },
    
    /**
     * PUT –∑–∞–ø—Ä–æ—Å
     * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise} Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    put: function(url, data = null, options = {}) {
        return this.request('PUT', url, { ...options, data });
    },
    
    /**
     * DELETE –∑–∞–ø—Ä–æ—Å
     * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise} Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    delete: function(url, options = {}) {
        return this.request('DELETE', url, options);
    },
    
    /**
     * PATCH –∑–∞–ø—Ä–æ—Å
     * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise} Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    patch: function(url, data = null, options = {}) {
        return this.request('PATCH', url, { ...options, data });
    },
    
    /**
     * –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    cancelAllRequests: function() {
        console.log(`üö´ –û—Ç–º–µ–Ω—è–µ–º ${this.activeRequests.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
        
        this.activeRequests.forEach((request, id) => {
            if (request.abortController) {
                request.abortController.abort();
            }
        });
        
        this.activeRequests.clear();
        console.log('‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–º–µ–Ω–µ–Ω—ã');
    },
    
    /**
     * –û—Ç–º–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ URL
     * @param {string} url - URL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
     */
    cancelRequestByUrl: function(url) {
        const foundRequests = [];
        
        this.activeRequests.forEach((request, id) => {
            if (request.url.includes(url)) {
                foundRequests.push({ id, request });
            }
        });
        
        foundRequests.forEach(({ id, request }) => {
            if (request.abortController) {
                request.abortController.abort();
            }
            this.activeRequests.delete(id);
        });
        
        console.log(`üö´ –û—Ç–º–µ–Ω–µ–Ω–æ ${foundRequests.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è URL: ${url}`);
    },
    
    /**
     * –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è API Message Hunter
     */
    MessageHunterAPI: {
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
         */
        checkApiKeys: function() {
            return window.APIClient.get('/check_api_keys');
        },
        
        /**
         * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–µ–π
         * @param {Object} keys - –û–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏ {api_id, api_hash}
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
         */
        saveApiKeys: function(keys) {
            return window.APIClient.post('/save_api_keys_local', keys);
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
         * @returns {Promise} –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
         */
        getGroups: function() {
            return window.APIClient.get('/get_groups');
        },
        
        /**
         * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
         * @param {Object} searchParams - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
         * @param {AbortSignal} signal - –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
         */
        search: function(searchParams, signal = null) {
            return window.APIClient.post('/search', searchParams, { signal });
        },
        
        /**
         * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
         */
        stopSearch: function() {
            return window.APIClient.post('/stop_search');
        },
        
        /**
         * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
         * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞
         */
        startAutoSearch: function(params) {
            return window.APIClient.post('/start_auto_search', params);
        },
        
        /**
         * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
         */
        stopAutoSearch: function() {
            return window.APIClient.post('/stop_auto_search');
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
         * @returns {Promise} –ù–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
         */
        getAutoSearchResults: function() {
            return window.APIClient.get('/get_auto_search_results');
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
         * @returns {Promise} –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
         */
        getAutoSearchStatus: function() {
            return window.APIClient.get('/get_auto_search_status');
        },
        
        /**
         * AI –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
         * @param {Object} analysisParams - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
         */
        analyzeWithAI: function(analysisParams) {
            return window.APIClient.post('/analyze_with_ai', analysisParams);
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
         * @returns {Promise} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
         */
        getAccountInfo: function() {
            return window.APIClient.get('/get_account_info');
        },
        
        /**
         * –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–º–µ–Ω—ã
         */
        switchAccount: function() {
            return window.APIClient.post('/switch_account');
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
         * @returns {Promise} –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
         */
        getHistory: function() {
            return window.APIClient.get('/get_history');
        },
        
        /**
         * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
         * @param {Object} searchData - –î–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
         */
        saveSearch: function(searchData) {
            return window.APIClient.post('/save_search', searchData);
        },
        
        /**
         * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
         * @param {number} searchId - ID –ø–æ–∏—Å–∫–∞
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
         */
        deleteSearch: function(searchId) {
            return window.APIClient.delete(`/delete_search/${searchId}`);
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ–∏—Å–∫–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
         * @param {number} searchId - ID –ø–æ–∏—Å–∫–∞
         * @returns {Promise} –î–µ—Ç–∞–ª–∏ –ø–æ–∏—Å–∫–∞
         */
        getSearchDetails: function(searchId) {
            return window.APIClient.get(`/get_search_details/${searchId}`);
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
         * @param {number} searchId - ID –ø–æ–∏—Å–∫–∞
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
         */
        getSearchResults: function(searchId) {
            return window.APIClient.get(`/get_search_results/${searchId}`);
        },
        
        /**
         * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏
         */
        clearHistory: function() {
            return window.APIClient.post('/clear_history');
        },
        
        /**
         * –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
         * @returns {Promise} –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏
         */
        exportHistory: function() {
            return window.APIClient.get('/export_history');
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
         * @returns {Promise} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
         */
        getHistoryStats: function() {
            return window.APIClient.get('/get_history_stats');
        },
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
         * @param {Object} taskData - –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
         */
        createBroadcastTask: function(taskData) {
            return window.APIClient.post('/create_broadcast_task', taskData);
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞—Å—Å—ã–ª–∫–∏
         * @returns {Promise} –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
         */
        getBroadcastTasks: function() {
            return window.APIClient.get('/get_broadcast_tasks');
        },
        
        /**
         * –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
         * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã
         */
        cancelBroadcastTask: function(taskId) {
            return window.APIClient.post(`/cancel_broadcast_task/${taskId}`);
        },
        
        /**
         * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
         * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
         */
        deleteBroadcastTask: function(taskId) {
            return window.APIClient.delete(`/delete_broadcast_task/${taskId}`);
        },
        
        /**
         * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
         * @param {Object} messageData - –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
         */
        sendTestMessage: function(messageData) {
            return window.APIClient.post('/send_test_message', messageData);
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         * @returns {Promise} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         */
        getUserStats: function() {
            return window.APIClient.get('/get_user_stats');
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
         * @returns {Promise} –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
         */
        getMultiAccounts: function() {
            return window.APIClient.get('/get_multi_accounts');
        },
        
        /**
         * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
         * @param {Object} accountData - –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
         */
        addAccount: function(accountData) {
            return window.APIClient.post('/add_account', accountData);
        },
        
        /**
         * –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
         * @param {string} accountId - ID –∞–∫–∫–∞—É–Ω—Ç–∞
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
         */
        removeAccount: function(accountId) {
            return window.APIClient.delete(`/remove_account/${accountId}`);
        },
        
        /**
         * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
         * @param {string} accountId - ID –∞–∫–∫–∞—É–Ω—Ç–∞
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
         */
        activateAccount: function(accountId) {
            return window.APIClient.post(`/activate_account/${accountId}`);
        }
    },
    
    /**
     * Batch API - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    Batch: {
        /**
         * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
         * @param {Array} requests - –ú–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
         * @param {Object} options - –û–ø—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
         */
        parallel: async function(requests, options = {}) {
            const {
                maxConcurrent = 5,
                continueOnError = true
            } = options;
            
            console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º ${requests.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–º–∞–∫—Å. ${maxConcurrent})`);
            
            const results = [];
            const chunks = window.Utils.ArrayUtils.chunk(requests, maxConcurrent);
            
            for (const chunk of chunks) {
                const chunkPromises = chunk.map(async (request, index) => {
                    try {
                        const result = await window.APIClient.request(
                            request.method,
                            request.url,
                            request.options || {}
                        );
                        return { success: true, data: result, index };
                    } catch (error) {
                        if (!continueOnError) {
                            throw error;
                        }
                        return { success: false, error: error.message, index };
                    }
                });
                
                const chunkResults = await Promise.all(chunkPromises);
                results.push(...chunkResults);
            }
            
            console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${results.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);
            return results;
        },
        
        /**
         * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
         * @param {Array} requests - –ú–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
         * @param {Object} options - –û–ø—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
         * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
         */
        sequential: async function(requests, options = {}) {
            const {
                delay = 0,
                continueOnError = true
            } = options;
            
            console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º ${requests.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ`);
            
            const results = [];
            
            for (let i = 0; i < requests.length; i++) {
                const request = requests[i];
                
                try {
                    const result = await window.APIClient.request(
                        request.method,
                        request.url,
                        request.options || {}
                    );
                    results.push({ success: true, data: result, index: i });
                } catch (error) {
                    if (!continueOnError) {
                        throw error;
                    }
                    results.push({ success: false, error: error.message, index: i });
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if (delay > 0 && i < requests.length - 1) {
                    await window.Utils.PerformanceUtils.sleep(delay);
                }
            }
            
            console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${results.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ`);
            return results;
        }
    },
    
    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ API
     */
    Cache: {
        storage: new Map(),
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
         * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
         * @returns {any} –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ null
         */
        get: function(key) {
            const cached = this.storage.get(key);
            if (!cached) return null;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
            if (cached.expires && Date.now() > cached.expires) {
                this.storage.delete(key);
                return null;
            }
            
            console.log(`üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞: ${key}`);
            return cached.data;
        },
        
        /**
         * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
         * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
         * @param {any} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
         * @param {number} ttl - –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
         */
        set: function(key, data, ttl = 5 * 60 * 1000) {
            this.storage.set(key, {
                data,
                expires: ttl > 0 ? Date.now() + ttl : null,
                created: Date.now()
            });
            console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: ${key} (TTL: ${ttl}ms)`);
        },
        
        /**
         * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
         * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
         */
        delete: function(key) {
            this.storage.delete(key);
            console.log(`üóëÔ∏è –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫—ç—à–∞: ${key}`);
        },
        
        /**
         * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
         */
        clear: function() {
            const size = this.storage.size;
            this.storage.clear();
            console.log(`üßπ –ö—ç—à –æ—á–∏—â–µ–Ω (—É–¥–∞–ª–µ–Ω–æ ${size} –∑–∞–ø–∏—Å–µ–π)`);
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
         * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
         */
        stats: function() {
            const entries = Array.from(this.storage.entries());
            const now = Date.now();
            
            return {
                total: entries.length,
                expired: entries.filter(([_, value]) => value.expires && now > value.expires).length,
                size: JSON.stringify(Object.fromEntries(this.storage)).length
            };
        }
    },
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     * @param {string} method - HTTP –º–µ—Ç–æ–¥
     * @param {string} url - URL
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
     */
    cachedRequest: function(method, url, options = {}) {
        // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
        if (method.toUpperCase() !== 'GET') {
            return this.request(method, url, options);
        }
        
        const cacheKey = `${method}:${url}:${JSON.stringify(options)}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cached = this.Cache.get(cacheKey);
        if (cached) {
            return Promise.resolve(cached);
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return this.request(method, url, options).then(result => {
            const ttl = options.cacheTtl || 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.Cache.set(cacheKey, result, ttl);
            return result;
        });
    },
    
    /**
     * Monitoring –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    Stats: {
        requests: [],
        maxHistory: 1000,
        
        /**
         * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
         * @param {Object} requestInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
         */
        addRequest: function(requestInfo) {
            this.requests.push({
                ...requestInfo,
                timestamp: Date.now()
            });
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if (this.requests.length > this.maxHistory) {
                this.requests = this.requests.slice(-this.maxHistory);
            }
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
         * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
         */
        getStats: function() {
            const now = Date.now();
            const lastHour = now - (60 * 60 * 1000);
            const recentRequests = this.requests.filter(r => r.timestamp > lastHour);
            
            const byMethod = window.Utils.ArrayUtils.groupBy(recentRequests, 'method');
            const byStatus = window.Utils.ArrayUtils.groupBy(recentRequests, 'status');
            
            return {
                total: this.requests.length,
                lastHour: recentRequests.length,
                byMethod: Object.keys(byMethod).reduce((acc, method) => {
                    acc[method] = byMethod[method].length;
                    return acc;
                }, {}),
                byStatus: Object.keys(byStatus).reduce((acc, status) => {
                    acc[status] = byStatus[status].length;
                    return acc;
                }, {}),
                averageResponseTime: recentRequests.length > 0 
                    ? recentRequests.reduce((sum, r) => sum + (r.duration || 0), 0) / recentRequests.length
                    : 0
            };
        },
        
        /**
         * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
         */
        clear: function() {
            this.requests = [];
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω–∞');
        }
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
     * @returns {Array} –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    getActiveRequests: function() {
        return Array.from(this.activeRequests.entries()).map(([id, request]) => ({
            id,
            url: request.url,
            method: request.method,
            duration: Date.now() - request.startTime
        }));
    },
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     * @returns {Promise<boolean>} –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    checkConnection: async function() {
        try {
            const start = Date.now();
            await this.get('/health', { timeout: 5000 });
            const duration = Date.now() - start;
            console.log(`üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (${duration}ms)`);
            return true;
        } catch (error) {
            console.error('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º:', error.message);
            return false;
        }
    },
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
     * @param {Object} headers - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    setGlobalHeaders: function(headers) {
        this.globalHeaders = { ...this.globalHeaders, ...headers };
        console.log('üåê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    },
    
    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
     * @param {boolean} enabled - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
     */
    setDebugMode: function(enabled) {
        this.debugMode = enabled;
        console.log(`üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ API: ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
window.api = window.APIClient.MessageHunterAPI;
window.apiGet = window.APIClient.get.bind(window.APIClient);
window.apiPost = window.APIClient.post.bind(window.APIClient);

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    window.APIClient.init();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
window.addEventListener('beforeunload', function() {
    window.APIClient.cancelAllRequests();
});

console.log('‚úÖ APIClient –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');