// ===============================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê–ú–ò
// static/js/account-manager.js
// ===============================

window.AccountManager = {
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
     */
    loadAccountInfo: function() {
        fetch('/get_account_info')
        .then(response => response.json())
        .then(data => {
            const accountInfoEl = document.getElementById('accountInfo');
            if (accountInfoEl && data.success) {
                accountInfoEl.innerHTML = `üë§ ${data.account_name}<br>üì± ${data.phone || '–õ–æ–∫–∞–ª—å–Ω—ã–π'}`;
            }
        })
        .catch(error => {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ');
        });
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö
     */
    updateAccountDisplay: function() {
        fetch('/get_account_info')
        .then(response => response.json())
        .then(data => {
            let accountText = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
            
            if (data.success) {
                accountText = `${data.account_name} | üì± ${data.phone}`;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            const elements = [
                'searchAccountInfo',
                'broadcastAccountInfo', 
                'autoSearchAccountInfo'
            ];
            
            elements.forEach(elementId => {
                const element = document.getElementById(elementId);
                if (element) {
                    element.textContent = accountText;
                }
            });
            
            console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        })
        .catch(error => {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ');
        });
    },
    
    /**
     * –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    switchAccount: function() {
        if (!window.UIUtils.showConfirm('–°–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç?')) return;
        
        fetch('/switch_account')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.href = '/';
            } else {
                window.UIUtils.showError('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            window.UIUtils.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        });
    },
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
     */
    loadMultiAccounts: function() {
        console.log('üë• –ó–∞–≥—Ä—É–∑–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
        const container = document.getElementById('multiAccountsContainer');
        const statsContainer = document.getElementById('accountsStats');
        
        if (container) {
            container.innerHTML = window.UIUtils.createLoadingElement('–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...').outerHTML;
        }
        
        fetch('/get_multi_accounts')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                this.displayMultiAccounts(data.accounts);
                this.updateAccountsStats(data.active_count || 0, data.accounts.length);
            } else {
                if (container) {
                    container.innerHTML = '<div style="text-align: center; padding: 20px; color: #dc3545;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</div>';
                }
                window.UIUtils.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
            }
        })
        .catch(error => {
            console.error('Error loading accounts:', error);
            if (container) {
                container.innerHTML = '<div style="text-align: center; padding: 20px; color: #dc3545;">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</div>';
            }
            window.UIUtils.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        });
    },
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
     * @param {Array} accounts - –ú–∞—Å—Å–∏–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
     */
    displayMultiAccounts: function(accounts) {
        const container = document.getElementById('multiAccountsContainer');
        
        if (!container) return;
        
        if (accounts.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; padding: 40px; color: #666;">
                    <div style="font-size: 48px; margin-bottom: 15px;">üë§</div>
                    <h3 style="color: #999; margin-bottom: 10px;">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</h3>
                    <p style="color: #999; font-size: 14px;">–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                    <button onclick="window.AccountManager.addNewAccount()" 
                            style="margin-top: 15px; padding: 10px 20px; background: #0088cc; color: white; border: none; border-radius: 8px; cursor: pointer;">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                    </button>
                </div>
            `;
            return;
        }
        
        container.innerHTML = accounts.map(account => {
            const userInfo = account.info?.user_info || {};
            const firstName = userInfo.first_name || '';
            const lastName = userInfo.last_name || '';
            const phone = userInfo.phone || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            
            return `
                <div class="account-item" style="
                    display: flex; 
                    align-items: center; 
                    padding: 15px; 
                    border-bottom: 1px solid #f1f3f4; 
                    transition: all 0.2s;
                    ${!account.is_active ? 'opacity: 0.7;' : ''}
                " onmouseover="this.style.background='#f8f9fa'" onmouseout="this.style.background='white'">
                    <input type="checkbox" 
                        class="account-toggle" 
                        id="account_${account.account_name}"
                        ${account.is_active ? 'checked' : ''}
                        onchange="window.AccountManager.toggleAccount('${account.account_name}')"
                        style="margin-right: 15px; width: 20px; height: 20px; transform: scale(1.2); cursor: pointer;">
                    
                    <div class="account-info" style="flex: 1;">
                        <div class="account-name" style="font-weight: 600; color: #333; margin-bottom: 5px; display: flex; align-items: center; gap: 10px;">
                            ${account.account_name}
                            ${account.is_current ? '<span style="background: #007bff; color: white; padding: 2px 6px; border-radius: 8px; font-size: 10px;">–¢–ï–ö–£–©–ò–ô</span>' : ''}
                        </div>
                        <div class="account-details" style="font-size: 12px; color: #666;">
                            üë§ ${firstName} ${lastName} | üì± ${phone}
                        </div>
                    </div>
                    
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <div class="account-status" style="
                            padding: 4px 8px; 
                            border-radius: 12px; 
                            font-size: 11px; 
                            font-weight: 600;
                            ${account.is_active ? 
                                'background: #d4edda; color: #155724;' : 
                                'background: #f8d7da; color: #721c24;'
                            }
                        ">
                            ${account.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                        </div>
                        
                        <div style="display: flex; gap: 5px;">
                            ${!account.is_current ? `
                                <button onclick="window.AccountManager.switchToAccount('${account.account_name}')"
                                        style="background: #007bff; color: white; border: none; padding: 4px 8px; border-radius: 6px; font-size: 10px; cursor: pointer;"
                                        title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç">
                                    üîÑ
                                </button>
                            ` : ''}
                            
                            <button onclick="window.AccountManager.removeAccount('${account.account_name}')"
                                    style="background: #dc3545; color: white; border: none; padding: 4px 8px; border-radius: 6px; font-size: 10px; cursor: pointer;"
                                    title="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç">
                                üóëÔ∏è
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        console.log(`‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
     * @param {number} activeCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
     * @param {number} totalCount - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
     */
    updateAccountsStats: function(activeCount, totalCount) {
        const container = document.getElementById('accountsStats');
        
        if (!container) return;
        
        const inactiveCount = totalCount - activeCount;
        
        container.innerHTML = `
            <div class="stats-card" style="
                background: white; 
                padding: 20px; 
                border-radius: 10px; 
                text-align: center; 
                border: 2px solid #e1e8ed;
                transition: transform 0.2s;
            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                <div class="stats-number" style="font-size: 32px; font-weight: bold; color: #0088cc; margin-bottom: 5px;">${totalCount}</div>
                <div class="stats-label" style="font-size: 14px; color: #666;">–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</div>
            </div>
            
            <div class="stats-card" style="
                background: white; 
                padding: 20px; 
                border-radius: 10px; 
                text-align: center; 
                border: 2px solid #e1e8ed;
                transition: transform 0.2s;
            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                <div class="stats-number" style="font-size: 32px; font-weight: bold; color: #28a745; margin-bottom: 5px;">${activeCount}</div>
                <div class="stats-label" style="font-size: 14px; color: #666;">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
            
            <div class="stats-card" style="
                background: white; 
                padding: 20px; 
                border-radius: 10px; 
                text-align: center; 
                border: 2px solid #e1e8ed;
                transition: transform 0.2s;
            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                <div class="stats-number" style="font-size: 32px; font-weight: bold; color: #dc3545; margin-bottom: 5px;">${inactiveCount}</div>
                <div class="stats-label" style="font-size: 14px; color: #666;">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
        `;
        
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${activeCount}/${totalCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö`);
    },
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
     * @param {string} accountName - –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    toggleAccount: async function(accountName) {
        const checkbox = document.getElementById(`account_${accountName}`);
        if (!checkbox) return;
        
        const action = checkbox.checked ? 'activate' : 'deactivate';
        const originalState = checkbox.checked;
        
        try {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º —á–µ–∫–±–æ–∫—Å –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
            checkbox.disabled = true;
            
            const response = await fetch('/toggle_account', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    account_name: accountName,
                    action: action
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                console.log(`‚úÖ ${data.message}`);
                window.UIUtils.showSuccess(`‚úÖ ${data.message}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                setTimeout(() => {
                    this.loadMultiAccounts();
                }, 1000);
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                checkbox.checked = !originalState;
                window.UIUtils.showError(data.error || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞');
            }
        } catch (error) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            checkbox.checked = !originalState;
            window.UIUtils.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            console.error('Toggle account error:', error);
        } finally {
            checkbox.disabled = false;
        }
    },
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç
     * @param {string} accountName - –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
     */
    switchToAccount: function(accountName) {
        if (!window.UIUtils.showConfirm(`–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç "${accountName}"?`)) return;
        
        window.UIUtils.showToast('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç...', 'info');
        
        fetch('/switch_to_account', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ account_name: accountName })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.UIUtils.showSuccess('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω');
                
                // –û—á–∏—â–∞–µ–º –∫—ç—à –≥—Ä—É–ø–ø
                if (window.DataManager) {
                    window.DataManager.GroupsCache.clear();
                }
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                window.UIUtils.showError(data.error || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞');
            }
        })
        .catch(error => {
            window.UIUtils.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            console.error('Switch account error:', error);
        });
    },
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
     * @param {string} accountName - –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    removeAccount: function(accountName) {
        if (!window.UIUtils.showConfirm(
            `–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç "${accountName}"?\n\n–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`
        )) return;
        
        window.UIUtils.showToast('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç...', 'warning');
        
        fetch('/remove_account', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ account_name: accountName })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.UIUtils.showSuccess('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                setTimeout(() => {
                    this.loadMultiAccounts();
                }, 500);
            } else {
                window.UIUtils.showError(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞');
            }
        })
        .catch(error => {
            window.UIUtils.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            console.error('Remove account error:', error);
        });
    },
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    addNewAccount: function() {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        const newWindow = window.open('/switch_account', '_blank');
        
        if (!newWindow) {
            window.UIUtils.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ–ø–∞–ø–æ–≤.');
            return;
        }
        
        window.UIUtils.showToast('üîÑ –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞', 'info');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç –∞–∫–∫–∞—É–Ω—Ç)
        const refreshInterval = setInterval(() => {
            if (newWindow.closed) {
                clearInterval(refreshInterval);
                setTimeout(() => {
                    this.loadMultiAccounts();
                }, 1000);
            }
        }, 1000);
        
        // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        setTimeout(() => {
            clearInterval(refreshInterval);
        }, 300000);
    },
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    exportAccountData: function() {
        if (!window.UIUtils.showConfirm('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞?')) return;
        
        window.UIUtils.showToast('üì• –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...', 'info');
        
        fetch('/export_account_data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                const blob = new Blob([JSON.stringify(data.data, null, 2)], { 
                    type: 'application/json' 
                });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `message_hunter_export_${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                window.UIUtils.showSuccess('‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
            } else {
                window.UIUtils.showError(data.error || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
            }
        })
        .catch(error => {
            window.UIUtils.showError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
            console.error('Export error:', error);
        });
    },
    
    /**
     * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    importAccountData: function() {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        
        input.onchange = (e) => {
            const file = e.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = (event) => {
                try {
                    const importData = JSON.parse(event.target.result);
                    this.processImportData(importData);
                } catch (error) {
                    window.UIUtils.showError('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON');
                }
            };
            reader.readAsText(file);
        };
        
        input.click();
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     * @param {Object} importData - –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    processImportData: function(importData) {
        if (!importData.version || !importData.data) {
            window.UIUtils.showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏–º–ø–æ—Ä—Ç–∞');
            return;
        }
        
        if (!window.UIUtils.showConfirm(
            `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç ${importData.exported_at}?\n\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã!`
        )) return;
        
        window.UIUtils.showToast('üì§ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...', 'info');
        
        fetch('/import_account_data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(importData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.UIUtils.showSuccess('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                window.UIUtils.showError(data.error || '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
            }
        })
        .catch(error => {
            window.UIUtils.showError('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
            console.error('Import error:', error);
        });
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.switchAccount = window.AccountManager.switchAccount.bind(window.AccountManager);

console.log('‚úÖ AccountManager –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');