// ===============================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–û–ô
// static/js/broadcast-manager.js
// ===============================

window.BroadcastManager = {
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    displayGroups: function() {
        console.log('üì§ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø —Ä–∞—Å—Å—ã–ª–∫–∏');
        const container = document.getElementById('broadcastGroupsContainer');
        
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä broadcastGroupsContainer –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        if (window.MessageHunter.allGroups.length === 0) {
            container.innerHTML = '<div style="text-align: center; padding: 20px; color: #666;">–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        container.innerHTML = window.MessageHunter.allGroups.map(group => `
            <div class="group-item">
                <input type="checkbox" 
                    class="group-checkbox" 
                    name="broadcast-groups"
                    value="${group.id}"
                    id="broadcast_group_${group.id}"
                    ${window.MessageHunter.selectedBroadcastGroups.includes(group.id) ? 'checked' : ''}
                    onchange="window.GroupsManager.toggleBroadcastGroup('${group.id}')">
                <label for="broadcast_group_${group.id}" class="group-info">
                    <div class="group-title">${group.title}</div>
                    <div class="group-type">üë• ${group.members_count || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
                </label>
            </div>
        `).join('');
        
        window.UIUtils.updateCounter('broadcast', window.MessageHunter.selectedBroadcastGroups.length, window.MessageHunter.allGroups.length);
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    refreshGroups: function() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏...');
        
        const container = document.getElementById('broadcastGroupsContainer');
        if (container) {
            container.innerHTML = window.UIUtils.createLoadingElement('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø...').outerHTML;
        }
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        window.DataManager.GroupsCache.clear();
        window.MessageHunter.allGroups = [];
        window.MessageHunter.selectedBroadcastGroups = [];
        
        window.UIUtils.showToast('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...', 'info');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã
        fetch('/get_groups')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.MessageHunter.allGroups = data.groups;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                window.DataManager.GroupsCache.save(window.MessageHunter.allGroups);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
                this.displayGroups();
                
                window.UIUtils.showSuccess('‚úÖ –ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${window.MessageHunter.allGroups.length} –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏`);
            } else {
                window.UIUtils.showError('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø');
                if (container) {
                    container.innerHTML = '<div style="text-align: center; padding: 20px; color: #dc3545;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø</div>';
                }
            }
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø:', error);
            window.UIUtils.showError('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
            if (container) {
                container.innerHTML = '<div style="text-align: center; padding: 20px; color: #dc3545;">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</div>';
            }
        });
    },
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    setDefaultDateTime: function() {
        console.log('üìÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        const now = new Date();
        
        const dateInput = document.getElementById('broadcastDate');
        if (dateInput) {
            const today = now.toISOString().split('T')[0];
            dateInput.value = today;
        }
        
        const timeInput = document.getElementById('broadcastTime');
        if (timeInput) {
            now.setMinutes(now.getMinutes() + 10);
            const timeString = now.toTimeString().slice(0, 5);
            timeInput.value = timeString;
        }
    },
    
    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    scheduleBroadcast: function() {
        const now = Date.now();
        if (window.lastScheduleCall && (now - window.lastScheduleCall) < 3000) {
            console.log('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
            return;
        }
        window.lastScheduleCall = now;
        
        console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏');
        
        const broadcastBtn = event.target;
        if (broadcastBtn.disabled) {
            console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = this.getFormData();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        const validationResult = this.validateFormData(formData);
        if (!validationResult.isValid) {
            window.UIUtils.showError(validationResult.error);
            return;
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        broadcastBtn.disabled = true;
        broadcastBtn.textContent = 'üì§ –ü–ª–∞–Ω–∏—Ä—É–µ–º...';
        
        console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å');
        
        fetch('/schedule_broadcast', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: formData.message,
                groups: window.MessageHunter.selectedBroadcastGroups,
                date: formData.date,
                time: formData.time,
                repeat: formData.repeat,
                delay_minutes: parseInt(formData.delay),
                random_sending: formData.randomSending
            })
        })
        .then(response => response.json())
        .then(data => {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            
            if (data.success) {
                this.showBroadcastSuccess(data.task_info);
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                this.clearForm();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                setTimeout(() => {
                    this.loadTasks();
                }, 1000);
            } else {
                window.UIUtils.showError(data.error || '–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏');
            }
        })
        .catch(error => {
            window.UIUtils.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            console.error('Error:', error);
        })
        .finally(() => {
            broadcastBtn.disabled = false;
            broadcastBtn.textContent = 'üì§ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É';
        });
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
     */
    getFormData: function() {
        const messageInput = document.getElementById('broadcastMessage');
        const dateInput = document.getElementById('broadcastDate');
        const timeInput = document.getElementById('broadcastTime');
        const repeatInput = document.getElementById('broadcastRepeat');
        const delayInput = document.getElementById('broadcastDelay');
        const randomInput = document.getElementById('randomSending');
        
        return {
            message: messageInput ? messageInput.value.trim() : '',
            date: dateInput ? dateInput.value : '',
            time: timeInput ? timeInput.value : '',
            repeat: repeatInput ? repeatInput.value : 'once',
            delay: delayInput ? delayInput.value : '15',
            randomSending: randomInput ? randomInput.checked : false
        };
    },
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
     * @param {Object} formData - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
     */
    validateFormData: function(formData) {
        if (!formData.message) {
            return { isValid: false, error: '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏' };
        }
        
        if (formData.message.length < 3) {
            return { isValid: false, error: '‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)' };
        }
        
        if (formData.message.length > 4000) {
            return { isValid: false, error: '‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)' };
        }
        
        if (window.MessageHunter.selectedBroadcastGroups.length === 0) {
            return { isValid: false, error: 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏' };
        }
        
        if (!formData.date) {
            return { isValid: false, error: 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏' };
        }
        
        if (!formData.time) {
            return { isValid: false, error: 'üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        const selectedDateTime = new Date(`${formData.date}T${formData.time}`);
        const currentTime = new Date();
        
        if (selectedDateTime <= currentTime) {
            return { isValid: false, error: '‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º' };
        }
        
        const maxDate = new Date();
        maxDate.setFullYear(maxDate.getFullYear() + 1);
        
        if (selectedDateTime > maxDate) {
            return { isValid: false, error: 'üìÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ –≥–æ–¥' };
        }
        
        return { isValid: true };
    },
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
     */
    clearForm: function() {
        const messageInput = document.getElementById('broadcastMessage');
        if (messageInput) messageInput.value = '';
        
        this.setDefaultDateTime();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
        const lengthEl = document.getElementById('messageLength');
        if (lengthEl) lengthEl.textContent = '0 —Å–∏–º–≤–æ–ª–æ–≤';
    },
    
    /**
     * –ü–æ–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
     * @param {Object} taskInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ
     */
    showBroadcastSuccess: function(taskInfo) {
        const successDiv = document.createElement('div');
        successDiv.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            z-index: 1000;
            max-width: 450px;
            text-align: center;
        `;
        
        const randomInfo = taskInfo.random_sending ? 
            `<p style="background: #fff3cd; padding: 8px; border-radius: 6px; color: #856404; font-size: 13px; margin: 10px 0;">
                üé≤ <strong>–†–∞–Ω–¥–æ–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:</strong> –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
            </p>` : '';
        
        successDiv.innerHTML = `
            <h3 style="color: #28a745; margin-bottom: 15px;">‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!</h3>
            <p><strong>üë§ –ê–∫–∫–∞—É–Ω—Ç:</strong> ${taskInfo.account_info || '–û—Å–Ω–æ–≤–Ω–æ–π'}</p>
            <p><strong>‚è∞ –í—Ä–µ–º—è:</strong> ${taskInfo.scheduled_time}</p>
            <p><strong>üìÇ –ì—Ä—É–ø–ø:</strong> ${taskInfo.groups_count}</p>
            <p><strong>üîÑ –ü–æ–≤—Ç–æ—Ä:</strong> ${taskInfo.repeat_text}</p>
            ${taskInfo.random_sending ? 
                '<p><strong>üé≤ –†–µ–∂–∏–º:</strong> –†–∞–Ω–¥–æ–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (24 —á–∞—Å–∞)</p>' : 
                `<p><strong>‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞:</strong> ${taskInfo.delay_minutes} –º–∏–Ω –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏</p>`
            }
            ${randomInfo}
            <p style="font-size: 12px; color: #666; margin-top: 10px;">
                ${taskInfo.random_sending ? 
                    '‚è±Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è' : 
                    `‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: ~${(taskInfo.groups_count - 1) * taskInfo.delay_minutes} –º–∏–Ω—É—Ç`
                }
            </p>
            <button onclick="this.parentElement.remove()" 
                    style="margin-top: 15px; padding: 10px 20px; background: #28a745; color: white; border: none; border-radius: 10px; cursor: pointer;">
                –ü–æ–Ω—è—Ç–Ω–æ
            </button>
        `;
        
        document.body.appendChild(successDiv);
        
        setTimeout(() => {
            if (successDiv.parentElement) {
                successDiv.remove();
            }
        }, 10000);
    },
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    toggleRandomSending: function() {
        const randomCheckbox = document.getElementById('randomSending');
        const normalSection = document.getElementById('normalDelaySection');
        const randomInfo = document.getElementById('randomDelayInfo');
        
        if (!randomCheckbox) return;
        
        if (randomCheckbox.checked) {
            if (normalSection) normalSection.style.display = 'none';
            if (randomInfo) randomInfo.style.display = 'block';
            console.log('üé≤ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ä–∞–Ω–¥–æ–º–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');
        } else {
            if (normalSection) normalSection.style.display = 'block';
            if (randomInfo) randomInfo.style.display = 'none';
            console.log('‚è∞ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ–±—ã—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
    },
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    loadTasks: function() {
        console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á —Ä–∞—Å—Å—ã–ª–∫–∏');
        const container = document.getElementById('broadcastTasksContainer');
        const tasksCountEl = document.getElementById('tasksCount');
        
        if (container) {
            container.innerHTML = window.UIUtils.createLoadingElement('–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏...').outerHTML;
        }
        
        if (tasksCountEl) {
            tasksCountEl.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        }
        
        fetch('/get_broadcast_tasks')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: ${data.tasks.length}`);
                this.displayTasks(data.tasks);
            } else {
                if (container) {
                    container.innerHTML = '<div style="text-align: center; padding: 20px; color: #dc3545;">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á</div>';
                }
                if (tasksCountEl) {
                    tasksCountEl.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
                }
                window.UIUtils.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á');
            }
        })
        .catch(error => {
            console.error('Error loading tasks:', error);
            if (container) {
                container.innerHTML = '<div style="text-align: center; padding: 20px; color: #dc3545;">‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</div>';
            }
            if (tasksCountEl) {
                tasksCountEl.textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
            }
            window.UIUtils.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        });
    },
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Ä–∞—Å—Å—ã–ª–∫–∏
     * @param {Array} tasks - –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á
     */
    displayTasks: function(tasks) {
        const container = document.getElementById('broadcastTasksContainer');
        const tasksCountEl = document.getElementById('tasksCount');
        
        console.log(`üìä –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–¥–∞—á–∏: ${tasks.length} —à—Ç.`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        if (tasksCountEl) {
            if (tasks.length === 0) {
                tasksCountEl.textContent = '–ù–µ—Ç –∑–∞–¥–∞—á';
            } else {
                const scheduledCount = tasks.filter(t => t.status === 'scheduled').length;
                const executingCount = tasks.filter(t => t.status === 'executing').length;
                const completedCount = tasks.filter(t => t.status === 'completed').length;
                const failedCount = tasks.filter(t => t.status === 'failed').length;
                
                tasksCountEl.innerHTML = `
                    –í—Å–µ–≥–æ: ${tasks.length} | 
                    ‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${scheduledCount} | 
                    üì§ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${executingCount} | 
                    ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${completedCount} | 
                    ‚ùå –û—à–∏–±–æ–∫: ${failedCount}
                `;
            }
        }
        
        if (!container) return;
        
        if (tasks.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; padding: 40px; color: #666;">
                    <div style="font-size: 48px; margin-bottom: 15px;">üì≠</div>
                    <h3 style="color: #999; margin-bottom: 10px;">–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</h3>
                    <p style="color: #999; font-size: 14px;">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "üì§ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = tasks.map(task => {
            return this.renderTaskItem(task);
        }).join('');
    },
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏
     * @param {Object} task - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
     */
    renderTaskItem: function(task) {
        let statusIcon = '‚è≥';
        let statusColor = '#0088cc';
        let statusText = task.status;
        
        if (task.status === 'completed') {
            statusIcon = '‚úÖ';
            statusColor = '#28a745';
            statusText = `–í—ã–ø–æ–ª–Ω–µ–Ω–æ (${task.sent_count}/${task.groups_count})`;
        } else if (task.status === 'failed') {
            statusIcon = '‚ùå';
            statusColor = '#dc3545';
            statusText = '–û—à–∏–±–∫–∞';
        } else if (task.status === 'executing') {
            statusIcon = 'üì§';
            statusColor = '#ff6b35';
            statusText = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
        }
        
        const timeInfo = this.getTimeToExecution(task.scheduled_time);
        
        return `
            <div style="
                border: 1px solid #e1e8ed; 
                border-radius: 10px; 
                padding: 20px; 
                margin-bottom: 15px; 
                background: white;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                transition: box-shadow 0.3s;
            " onmouseover="this.style.boxShadow='0 4px 15px rgba(0,0,0,0.15)'" 
            onmouseout="this.style.boxShadow='0 2px 8px rgba(0,0,0,0.1)'">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                    <div style="flex: 1;">
                        <div style="font-weight: 600; color: #333; margin-bottom: 5px;">
                            ${statusIcon} ${task.message_preview || '–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏'}
                        </div>
                        <div style="font-size: 12px; color: #666;">
                            ID: ${task.id} ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: ${task.created_at}
                        </div>
                    </div>
                    <div style="text-align: right; display: flex; gap: 10px; align-items: center;">
                        <div style="background: ${statusColor}; color: white; padding: 4px 8px; border-radius: 12px; font-size: 11px; font-weight: 600;">
                            ${statusText}
                        </div>
                        <button onclick="window.BroadcastManager.deleteTask('${task.id}')" 
                                style="background: #dc3545; color: white; border: none; padding: 4px 8px; border-radius: 8px; font-size: 10px; cursor: pointer;"
                                title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
                
                <div style="background: #f8f9fa; padding: 12px; border-radius: 8px; font-size: 13px;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 8px;">
                        <div><strong>üë§ –ê–∫–∫–∞—É–Ω—Ç:</strong> ${task.account_display || task.account_name || '–û—Å–Ω–æ–≤–Ω–æ–π'}</div>
                        <div><strong>üìÇ –ì—Ä—É–ø–ø—ã:</strong> ${task.groups_count} –≥—Ä—É–ø–ø</div>
                    </div>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 8px;">
                        <div><strong>‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞:</strong> ${task.scheduled_time}</div>
                        <div><strong>‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞:</strong> ${task.delay_minutes} –º–∏–Ω</div>
                    </div>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                        <div><strong>üîÑ –ü–æ–≤—Ç–æ—Ä:</strong> ${task.repeat}</div>
                        <div style="font-weight: 600; color: ${timeInfo.color};">
                            ‚è≥ ${timeInfo.text}
                        </div>
                    </div>

                    ${task.random_sending ? `
                        <div style="margin-top: 8px; padding: 8px; background: #fff3cd; border-radius: 6px; border-left: 3px solid #ffc107;">
                            <strong style="color: #856404;">üé≤ –†–∞–Ω–¥–æ–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:</strong>
                            <span style="color: #856404; font-size: 12px;">–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤</span>
                        </div>
                    ` : ''}
                    
                    ${task.status === 'failed' ? `
                        <div style="margin-top: 8px; padding-top: 8px; border-top: 1px solid #dee2e6; color: #dc3545;">
                            <strong>‚ùå –û—à–∏–±–∫–∞:</strong> ${task.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
                        </div>
                    ` : ''}
                </div>
            </div>
        `;
    },
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
     * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
     */
    deleteTask: function(taskId) {
        if (!window.UIUtils.showConfirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ${taskId}? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
            return;
        }
        
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É: ${taskId}`);
        
        const deleteBtn = event.target;
        const originalText = deleteBtn.textContent;
        deleteBtn.disabled = true;
        deleteBtn.textContent = '‚è≥';
        
        fetch('/delete_broadcast_task', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ task_id: taskId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.UIUtils.showSuccess('‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞');
                this.loadTasks();
            } else {
                window.UIUtils.showError('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
        })
        .catch(error => {
            window.UIUtils.showError('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            console.error('Error:', error);
        })
        .finally(() => {
            deleteBtn.disabled = false;
            deleteBtn.textContent = originalText;
        });
    },
    
    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
     * @param {string} scheduledTime - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
     */
    getTimeToExecution: function(scheduledTime) {
        const now = new Date();
        const scheduled = new Date(scheduledTime);
        const diffMs = scheduled.getTime() - now.getTime();
        
        if (diffMs <= 0) {
            return {
                text: '–í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ!',
                color: '#dc3545'
            };
        }
        
        const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diffMs % (1000 * 60)) / 1000);
        
        let timeText = '';
        
        if (days > 0) {
            timeText = `${days} –¥ ${hours} —á ${minutes} –º–∏–Ω`;
        } else if (hours > 0) {
            timeText = `${hours} —á ${minutes} –º–∏–Ω ${seconds} —Å–µ–∫`;
        } else if (minutes > 0) {
            timeText = `${minutes} –º–∏–Ω ${seconds} —Å–µ–∫`;
        } else {
            timeText = `${seconds} —Å–µ–∫`;
        }
        
        return {
            text: `–î–æ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${timeText}`,
            color: diffMs < 300000 ? '#ff6b35' : '#0088cc' // –ö—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç
        };
    },
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
     */
    initCharacterCounter: function() {
        const messageTextarea = document.getElementById('broadcastMessage');
        if (messageTextarea) {
            messageTextarea.addEventListener('input', function() {
                const length = this.value.length;
                const lengthEl = document.getElementById('messageLength');
                if (lengthEl) {
                    lengthEl.textContent = `${length} —Å–∏–º–≤–æ–ª–æ–≤`;
                    if (length > 4000) {
                        lengthEl.style.color = '#dc3545';
                    } else {
                        lengthEl.style.color = '#666';
                    }
                }
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
            const lengthEl = document.getElementById('messageLength');
            if (lengthEl) {
                lengthEl.textContent = '0 —Å–∏–º–≤–æ–ª–æ–≤';
            }
        }
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.scheduleBroadcast = window.BroadcastManager.scheduleBroadcast.bind(window.BroadcastManager);
window.refreshBroadcastGroups = window.BroadcastManager.refreshGroups.bind(window.BroadcastManager);
window.loadBroadcastTasks = window.BroadcastManager.loadTasks.bind(window.BroadcastManager);
window.deleteTask = window.BroadcastManager.deleteTask.bind(window.BroadcastManager);
window.toggleRandomSending = window.BroadcastManager.toggleRandomSending.bind(window.BroadcastManager);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        window.BroadcastManager.initCharacterCounter();
    }, 1000);
});

console.log('‚úÖ BroadcastManager –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');