// ===============================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï AI –ê–ù–ê–õ–ò–ó–û–ú
// static/js/ai-manager.js
// ===============================

window.AIManager = {
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞
    isAnalyzing: false,
    lastResults: null,
    userStats: null,
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    init: function() {
        console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AIManager...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.loadUserStats();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.setupEventHandlers();
        
        console.log('‚úÖ AIManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    },
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers: function() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Enter –≤ –ø–æ–ª–µ –ø—Ä–æ–º–ø—Ç–∞
        document.addEventListener('DOMContentLoaded', () => {
            const promptInput = document.getElementById('aiPromptInput');
            if (promptInput) {
                promptInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        this.startAnalysisWithPrompt();
                    }
                });
            }
        });
    },
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
     */
    openPromptModal: function() {
        if (!window.MessageHunter.lastSearchResults || !window.MessageHunter.lastSearchResults.results) {
            window.UIUtils.showError('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            return;
        }
        
        if (window.MessageHunter.lastSearchResults.results.length === 0) {
            window.UIUtils.showError('‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            return;
        }
        
        console.log('ü§ñ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ AI –ø—Ä–æ–º–ø—Ç–∞...');
        
        const modal = document.getElementById('aiPromptModal');
        if (modal) {
            modal.style.display = 'block';
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                const input = document.getElementById('aiPromptInput');
                if (input) {
                    input.focus();
                    input.select();
                }
            }, 100);
            
            console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ AI –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–æ');
        } else {
            console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ aiPromptModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    },
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º
     */
    closePromptModal: function() {
        const modal = document.getElementById('aiPromptModal');
        if (modal) {
            modal.style.display = 'none';
            console.log('üö™ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ AI –ø—Ä–æ–º–ø—Ç–∞ –∑–∞–∫—Ä—ã—Ç–æ');
        }
    },
    
    /**
     * –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
     */
    startAnalysisWithPrompt: function() {
        const promptInput = document.getElementById('aiPromptInput');
        const prompt = promptInput ? promptInput.value.trim() : '';
        
        if (!prompt) {
            window.UIUtils.showError('‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞');
            return;
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.closePromptModal();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        this.analyzeWithCustomPrompt(prompt);
    },
    
    /**
     * AI –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
     * @param {string} customPrompt - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    analyzeWithCustomPrompt: function(customPrompt) {
        if (!window.MessageHunter.lastSearchResults || !window.MessageHunter.lastSearchResults.results) {
            window.UIUtils.showError('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            return;
        }
        
        console.log('üéØ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø—Ä–æ–º–ø—Ç–æ–º:', customPrompt);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateAnalysisUI(true);
        
        const messagesToAnalyze = window.MessageHunter.lastSearchResults.results;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º APIClient –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        window.APIClient.MessageHunterAPI.analyzeWithAI({
            messages: messagesToAnalyze,
            custom_prompt: customPrompt
        })
        .then(data => {
            if (data.error) {
                throw new Error(data.error);
            } else {
                this.lastResults = {
                    potential_clients: data.potential_clients,
                    analyzed_count: data.analyzed_count,
                    custom_prompt: customPrompt
                };
                
                this.showResults(
                    data.potential_clients, 
                    data.analyzed_count, 
                    customPrompt
                );
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                this.loadUserStats();
                
                console.log('‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            }
        })
        .catch(error => {
            window.UIUtils.showError('‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: ' + error.message);
            console.error('‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:', error);
        })
        .finally(() => {
            this.updateAnalysisUI(false);
        });
    },
    
    /**
     * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
     */
    analyzeForClients: function() {
        const defaultPrompt = '–ù–∞–π–¥–∏ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ —Ö–æ—Ç—è—Ç —á—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç—å –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É –∑–∞ –¥–µ–Ω—å–≥–∏';
        this.analyzeWithCustomPrompt(defaultPrompt);
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
     * @param {boolean} isAnalyzing - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
     */
    updateAnalysisUI: function(isAnalyzing) {
        this.isAnalyzing = isAnalyzing;
        
        const analyzeBtn = document.getElementById('analyzeBtn');
        if (analyzeBtn) {
            analyzeBtn.disabled = isAnalyzing;
            analyzeBtn.textContent = isAnalyzing ? 'ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...' : 'ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å AI';
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –≤–æ –≤—Ä–µ–º—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if (isAnalyzing) {
            const aiResults = document.getElementById('aiResults');
            if (aiResults) {
                aiResults.style.display = 'none';
            }
        }
    },
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –∞–Ω–∞–ª–∏–∑–∞
     * @param {Array} potentialClients - –ú–∞—Å—Å–∏–≤ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
     * @param {number} analyzedCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param {string} customPrompt - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
     */
    showResults: function(potentialClients, analyzedCount, customPrompt = '') {
        const aiResultsDiv = document.getElementById('aiResults');
        const aiMessagesDiv = document.getElementById('aiMessages');
        const aiCountDiv = document.getElementById('aiResultsCount');
        
        if (!aiResultsDiv || !aiMessagesDiv || !aiCountDiv) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        aiCountDiv.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <div>
                    –ù–∞–π–¥–µ–Ω–æ <strong>${potentialClients.length}</strong> –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ <strong>${analyzedCount}</strong> –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                </div>
                <div style="display: flex; gap: 10px;">
                    <button onclick="window.AIManager.exportResults()" class="export-btn" style="
                        background: #28a745;
                        color: white;
                        border: none;
                        padding: 6px 12px;
                        border-radius: 5px;
                        cursor: pointer;
                        font-size: 12px;
                    ">
                        üìÑ –≠–∫—Å–ø–æ—Ä—Ç
                    </button>
                    <button onclick="window.AIManager.clearResults()" class="clear-btn" style="
                        background: #dc3545;
                        color: white;
                        border: none;
                        padding: 6px 12px;
                        border-radius: 5px;
                        cursor: pointer;
                        font-size: 12px;
                    ">
                        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                    </button>
                </div>
            </div>
            <div style="color: #666; font-size: 12px;">
                üéØ –ü—Ä–æ–º–ø—Ç: "${customPrompt || '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑'}"
            </div>
        `;
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        aiMessagesDiv.innerHTML = '';
        
        if (potentialClients.length === 0) {
            aiMessagesDiv.innerHTML = `
                <div style="padding: 40px; text-align: center; color: #666;">
                    <div style="font-size: 48px; margin-bottom: 15px;">ü§ñ</div>
                    <h3>AI –Ω–µ –Ω–∞—à–µ–ª –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</p>
                    <button onclick="window.AIManager.openPromptModal()" style="
                        background: #007bff;
                        color: white;
                        border: none;
                        padding: 10px 20px;
                        border-radius: 5px;
                        cursor: pointer;
                        margin-top: 15px;
                    ">
                        üéØ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç
                    </button>
                </div>
            `;
        } else {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            potentialClients.forEach((client, index) => {
                const clientDiv = this.createClientElement(client, index + 1);
                aiMessagesDiv.appendChild(clientDiv);
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        aiResultsDiv.style.display = 'block';
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        aiResultsDiv.scrollIntoView({ behavior: 'smooth' });
        
        console.log(`‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –∞–Ω–∞–ª–∏–∑–∞: ${potentialClients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    },
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
     * @param {Object} client - –û–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
     * @param {number} index - –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
     * @returns {HTMLElement} –≠–ª–µ–º–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–∞
     */
    createClientElement: function(client, index) {
        const clientDiv = document.createElement('div');
        clientDiv.className = 'message ai-client';
        clientDiv.style.cssText = `
            border-left: 5px solid #6f42c1;
            background: white;
            margin-bottom: 15px;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
        `;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageLink = this.generateMessageLink(client);
        
        clientDiv.innerHTML = `
            <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                <div style="font-weight: 600; color: #6f42c1; margin-bottom: 10px; display: flex; justify-content: space-between; align-items: center;">
                    <span>üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç #${index}</span>
                    <span style="font-size: 12px; color: #666;">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${client.confidence || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                </div>
                
                <div style="background: white; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                    <strong>üìù –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</strong><br>
                    <em style="color: #495057; line-height: 1.4;">"${client.original_message}"</em>
                </div>
                
                <div style="background: #fff3cd; padding: 12px; border-radius: 8px; margin-bottom: 10px;">
                    <strong style="color: #856404;">üí° –í—ã—è–≤–ª–µ–Ω–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å:</strong><br>
                    <span style="color: #856404;">${client.client_need}</span>
                </div>
                
                ${client.ai_reasoning ? `
                    <div style="background: #e3f2fd; padding: 12px; border-radius: 8px; margin-bottom: 10px; font-size: 13px;">
                        <strong style="color: #1976d2;">üß† –ê–Ω–∞–ª–∏–∑ AI:</strong><br>
                        <span style="color: #1976d2;">${client.ai_reasoning}</span>
                    </div>
                ` : ''}
            </div>
            
            <div class="message-meta" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 15px; margin-bottom: 15px;">
                <div style="display: flex; align-items: center; gap: 8px;">
                    <span>üë§</span>
                    <span style="font-weight: 500;">${client.author}</span>
                </div>
                <div style="display: flex; align-items: center; gap: 8px;">
                    <span>üí¨</span>
                    <span>${client.group}</span>
                </div>
                <div style="display: flex; align-items: center; gap: 8px;">
                    <span>üìÖ</span>
                    <span>${client.date}</span>
                </div>
                <div style="display: flex; align-items: center; gap: 8px;">
                    <span>üè∑Ô∏è</span>
                    <span style="color: #6f42c1; font-size: 12px;">AI –∫–ª–∏–µ–Ω—Ç</span>
                </div>
            </div>
            
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; gap: 10px;">
                    <button onclick="window.AIManager.copyClientInfo(${index - 1})" class="client-action-btn" style="
                        background: #17a2b8;
                        color: white;
                        border: none;
                        padding: 6px 12px;
                        border-radius: 5px;
                        cursor: pointer;
                        font-size: 12px;
                    ">
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button onclick="window.AIManager.markAsContacted(${index - 1})" class="client-action-btn" style="
                        background: #ffc107;
                        color: #212529;
                        border: none;
                        padding: 6px 12px;
                        border-radius: 5px;
                        cursor: pointer;
                        font-size: 12px;
                    ">
                        ‚úÖ –°–≤—è–∑–∞–ª—Å—è
                    </button>
                </div>
                <a href="${messageLink}" target="_blank" style="
                    color: #0088cc; 
                    text-decoration: none; 
                    font-size: 12px;
                    padding: 6px 12px;
                    border: 1px solid #0088cc;
                    border-radius: 5px;
                    transition: all 0.2s;
                " 
                onmouseover="this.style.background='#0088cc'; this.style.color='white';"
                onmouseout="this.style.background='transparent'; this.style.color='#0088cc';">
                    üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
                </a>
            </div>
        `;
        
        return clientDiv;
    },
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} client - –û–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
     * @returns {string} –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    generateMessageLink: function(client) {
        if (!client.chat_id || !client.message_id) {
            return '#';
        }
        
        if (client.chat_username) {
            return `https://t.me/${client.chat_username}/${client.message_id}`;
        }
        
        const chatIdStr = client.chat_id.toString();
        const cleanChatId = chatIdStr.startsWith('-100') ? chatIdStr.slice(4) : chatIdStr.replace('-', '');
        
        return `https://t.me/c/${cleanChatId}/${client.message_id}`;
    },
    
    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
     * @param {number} clientIndex - –ò–Ω–¥–µ–∫—Å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ
     */
    copyClientInfo: function(clientIndex) {
        if (!this.lastResults || !this.lastResults.potential_clients[clientIndex]) {
            window.UIUtils.showError('‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        const client = this.lastResults.potential_clients[clientIndex];
        
        const info = `üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç #${clientIndex + 1}

üë§ –ê–≤—Ç–æ—Ä: ${client.author}
üí¨ –ì—Ä—É–ø–ø–∞: ${client.group}
üìÖ –î–∞—Ç–∞: ${client.date}

üìù –°–æ–æ–±—â–µ–Ω–∏–µ:
"${client.original_message}"

üí° –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å:
${client.client_need}

üîó –°—Å—ã–ª–∫–∞: ${this.generateMessageLink(client)}`;
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        if (window.Utils && window.Utils.BrowserUtils && window.Utils.BrowserUtils.copyToClipboard) {
            window.Utils.BrowserUtils.copyToClipboard(info).then(success => {
                if (success) {
                    window.UIUtils.showToast('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
                    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
                } else {
                    this.fallbackCopyToClipboard(info);
                }
            });
        } else {
            this.fallbackCopyToClipboard(info);
        }
    },
    
    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    fallbackCopyToClipboard: function(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            window.UIUtils.showToast('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
            console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ (fallback)');
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            window.UIUtils.showError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
        } finally {
            document.body.removeChild(textArea);
        }
    },
    
    /**
     * –ü–æ–º–µ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ "—Å–≤—è–∑–∞–ª–∏—Å—å"
     * @param {number} clientIndex - –ò–Ω–¥–µ–∫—Å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ
     */
    markAsContacted: function(clientIndex) {
        if (!this.lastResults || !this.lastResults.potential_clients[clientIndex]) {
            window.UIUtils.showError('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const client = this.lastResults.potential_clients[clientIndex];
        
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ DOM
        const clientElements = document.querySelectorAll('.ai-client');
        if (clientElements[clientIndex]) {
            const element = clientElements[clientIndex];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
            element.style.opacity = '0.7';
            element.style.borderLeftColor = '#28a745';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É "–°–≤—è–∑–∞–ª–∏—Å—å"
            const statusBadge = document.createElement('div');
            statusBadge.style.cssText = `
                position: absolute;
                top: 10px;
                right: 10px;
                background: #28a745;
                color: white;
                padding: 4px 8px;
                border-radius: 12px;
                font-size: 11px;
                font-weight: 600;
                z-index: 10;
            `;
            statusBadge.textContent = '‚úÖ –°–≤—è–∑–∞–ª–∏—Å—å';
            
            element.appendChild(statusBadge);
            
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            const contactBtn = element.querySelector(`button[onclick*="markAsContacted(${clientIndex})"]`);
            if (contactBtn) {
                contactBtn.disabled = true;
                contactBtn.textContent = '‚úÖ –°–≤—è–∑–∞–ª–∏—Å—å';
                contactBtn.style.background = '#6c757d';
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        this.saveContactedStatus(client, clientIndex);
        
        window.UIUtils.showToast('‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ "—Å–≤—è–∑–∞–ª–∏—Å—å"', 'success');
        console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–≤—è–∑–∞–ª–∏—Å—å:', client.author);
    },
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
     * @param {Object} client - –û–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
     * @param {number} index - –ò–Ω–¥–µ–∫—Å –∫–ª–∏–µ–Ω—Ç–∞
     */
    saveContactedStatus: function(client, index) {
        try {
            const contacted = JSON.parse(localStorage.getItem('message_hunter_contacted_clients') || '[]');
            
            const contactRecord = {
                client_id: `${client.author}_${client.date}_${index}`,
                author: client.author,
                group: client.group,
                date: client.date,
                contacted_at: new Date().toISOString(),
                need: client.client_need
            };
            
            contacted.push(contactRecord);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if (contacted.length > 1000) {
                contacted.splice(0, contacted.length - 1000);
            }
            
            localStorage.setItem('message_hunter_contacted_clients', JSON.stringify(contacted));
            console.log('üíæ –°—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–≤—è–∑–∏:', error);
        }
    },
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –∞–Ω–∞–ª–∏–∑–∞
     */
    exportResults: function() {
        if (!this.lastResults || !this.lastResults.potential_clients) {
            window.UIUtils.showError('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }
        
        console.log('üìÑ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –∞–Ω–∞–ª–∏–∑–∞...');
        
        const exportData = {
            exported_at: new Date().toISOString(),
            analysis_prompt: this.lastResults.custom_prompt || '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
            total_analyzed: this.lastResults.analyzed_count,
            clients_found: this.lastResults.potential_clients.length,
            clients: this.lastResults.potential_clients.map((client, index) => ({
                index: index + 1,
                author: client.author,
                group: client.group,
                date: client.date,
                message: client.original_message,
                need: client.client_need,
                confidence: client.confidence,
                telegram_link: this.generateMessageLink(client),
                ai_reasoning: client.ai_reasoning || null
            }))
        };
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Utils –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if (window.Utils && window.Utils.FileUtils) {
            const filename = `ai_analysis_results_${new Date().toISOString().split('T')[0]}.json`;
            window.Utils.FileUtils.downloadAsFile(
                JSON.stringify(exportData, null, 2),
                filename,
                'application/json'
            );
        } else {
            // Fallback
            const blob = new Blob([JSON.stringify(exportData, null, 2)], {
                type: 'application/json'
            });
            
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `ai_analysis_results_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }
        
        window.UIUtils.showToast('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    },
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    loadUserStats: function() {
        if (window.APIClient && window.APIClient.MessageHunterAPI) {
            window.APIClient.MessageHunterAPI.getUserStats()
            .then(data => {
                if (data.success) {
                    this.userStats = data.stats;
                    this.updateStatsDisplay();
                    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                }
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            });
        }
    },
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatsDisplay: function() {
        if (!this.userStats) return;
        
        const statsElements = {
            'totalSearches': this.userStats.total_searches || 0,
            'totalAnalyses': this.userStats.total_ai_analyses || 0,
            'clientsFound': this.userStats.total_clients_found || 0,
            'lastAnalysis': this.userStats.last_analysis_date || '–ù–∏–∫–æ–≥–¥–∞'
        };
        
        Object.entries(statsElements).forEach(([elementId, value]) => {
            const element = document.getElementById(elementId);
            if (element) {
                element.textContent = value;
            }
        });
    },
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –∞–Ω–∞–ª–∏–∑–∞
     */
    clearResults: function() {
        if (!this.lastResults) {
            window.UIUtils.showError('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
            return;
        }
        
        if (!confirm('‚ùì –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –∞–Ω–∞–ª–∏–∑–∞?')) {
            return;
        }
        
        this.lastResults = null;
        
        const aiResults = document.getElementById('aiResults');
        if (aiResults) {
            aiResults.style.display = 'none';
        }
        
        window.UIUtils.showToast('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –∞–Ω–∞–ª–∏–∑–∞ –æ—á–∏—â–µ–Ω—ã', 'success');
        console.log('üßπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –∞–Ω–∞–ª–∏–∑–∞ –æ—á–∏—â–µ–Ω—ã');
    },
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤—è–∑–µ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
     */
    showContactedHistory: function() {
        try {
            const contacted = JSON.parse(localStorage.getItem('message_hunter_contacted_clients') || '[]');
            
            if (contacted.length === 0) {
                window.UIUtils.showToast('üìã –ò—Å—Ç–æ—Ä–∏—è —Å–≤—è–∑–µ–π –ø—É—Å—Ç–∞', 'info');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.5);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 10000;
            `;
            
            const historyHTML = contacted.slice(-50).reverse().map((record, index) => `
                <div style="
                    background: #f8f9fa;
                    padding: 15px;
                    border-radius: 8px;
                    margin-bottom: 10px;
                    border-left: 4px solid #28a745;
                ">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                        <strong>üë§ ${record.author}</strong>
                        <small style="color: #666;">${new Date(record.contacted_at).toLocaleString()}</small>
                    </div>
                    <div style="font-size: 13px; color: #666; margin-bottom: 5px;">
                        üìÇ ${record.group} | üìÖ ${record.date}
                    </div>
                    <div style="font-size: 13px; color: #495057;">
                        üí° ${record.need}
                    </div>
                </div>
            `).join('');
            
            modal.innerHTML = `
                <div style="
                    background: white;
                    padding: 30px;
                    border-radius: 15px;
                    max-width: 600px;
                    max-height: 80vh;
                    overflow-y: auto;
                    box-shadow: 0 10px 25px rgba(0,0,0,0.2);
                ">
                    <h3 style="margin: 0 0 20px 0; color: #333;">üìã –ò—Å—Ç–æ—Ä–∏—è —Å–≤—è–∑–µ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏</h3>
                    
                    <div style="margin-bottom: 15px; padding: 10px; background: #e3f2fd; border-radius: 8px;">
                        üìä –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: <strong>${contacted.length}</strong> | –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö: <strong>${Math.min(50, contacted.length)}</strong>
                    </div>
                    
                    <div style="max-height: 400px; overflow-y: auto;">
                        ${historyHTML}
                    </div>
                    
                    <div style="text-align: right; margin-top: 20px;">
                        <button onclick="this.closest('.modal-overlay').remove()" 
                                style="
                                    background: #6c757d;
                                    color: white;
                                    border: none;
                                    padding: 10px 20px;
                                    border-radius: 5px;
                                    cursor: pointer;
                                ">
                            –ó–∞–∫—Ä—ã—Ç—å
                        </button>
                    </div>
                </div>
            `;
            
            modal.className = 'modal-overlay';
            document.body.appendChild(modal);
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.remove();
                }
            });
            
            console.log('üìã –ü–æ–∫–∞–∑–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–≤—è–∑–µ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤—è–∑–µ–π:', error);
            window.UIUtils.showError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤—è–∑–µ–π');
        }
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
     */
    getAnalysisPreview: function() {
        if (!window.MessageHunter.lastSearchResults || !window.MessageHunter.lastSearchResults.results) {
            window.UIUtils.showError('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            return;
        }
        
        const results = window.MessageHunter.lastSearchResults.results;
        const preview = {
            totalMessages: results.length,
            dateRange: this.getDateRange(results),
            topKeywords: this.getTopKeywords(results),
            messageTypes: this.analyzeMessageTypes(results)
        };
        
        return preview;
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param {Array} results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     * @returns {Object} –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
     */
    getDateRange: function(results) {
        if (results.length === 0) return null;
        
        const dates = results.map(r => window.Utils.DateUtils.parseMessageDate(r.date)).filter(d => d);
        if (dates.length === 0) return null;
        
        const minDate = new Date(Math.min(...dates));
        const maxDate = new Date(Math.max(...dates));
        
        return {
            from: window.Utils.DateUtils.formatDate(minDate),
            to: window.Utils.DateUtils.formatDate(maxDate),
            span: Math.ceil((maxDate - minDate) / (1000 * 60 * 60 * 24)) + ' –¥–Ω–µ–π'
        };
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param {Array} results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     * @returns {Array} –¢–æ–ø –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
     */
    getTopKeywords: function(results) {
        const wordCount = {};
        const stopWords = ['–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∑–∞', '—á—Ç–æ', '–∫–∞–∫', '—ç—Ç–æ', '–Ω–µ', '—è', '–º—ã', '–≤—ã', '–æ–Ω', '–æ–Ω–∞', '–æ–Ω–∏'];
        
        results.forEach(result => {
            const words = result.text.toLowerCase()
                .replace(/[^\w\s]/g, ' ')
                .split(/\s+/)
                .filter(word => word.length > 2 && !stopWords.includes(word));
            
            words.forEach(word => {
                wordCount[word] = (wordCount[word] || 0) + 1;
            });
        });
        
        return Object.entries(wordCount)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 10)
            .map(([word, count]) => ({ word, count }));
    },
    
    /**
     * –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param {Array} results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    analyzeMessageTypes: function(results) {
        const types = {
            questions: 0,
            offers: 0,
            requests: 0,
            discussions: 0
        };
        
        const patterns = {
            questions: /[?Ôºü]|–∫–∞–∫|—á—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º/i,
            offers: /–ø—Ä–æ–¥–∞–º|–ø—Ä–æ–¥–∞—é|–ø—Ä–µ–¥–ª–∞–≥–∞—é|—É—Å–ª—É–≥–∏|—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å/i,
            requests: /–Ω—É–∂–µ–Ω|–∏—â—É|—Ç—Ä–µ–±—É–µ—Ç—Å—è|–∫—É–ø–ª—é|–ø–æ–º–æ–≥–∏—Ç–µ/i
        };
        
        results.forEach(result => {
            let categorized = false;
            
            Object.entries(patterns).forEach(([type, pattern]) => {
                if (!categorized && pattern.test(result.text)) {
                    types[type]++;
                    categorized = true;
                }
            });
            
            if (!categorized) {
                types.discussions++;
            }
        });
        
        return types;
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º
     * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
     */
    getPromptSuggestions: function() {
        return [
            {
                title: "–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É—Å–ª—É–≥",
                prompt: "–ù–∞–π–¥–∏ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç —É—Å–ª—É–≥–∏: –≤–µ–±-–¥–∏–∑–∞–π–Ω, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∞–π—Ç–æ–≤, SEO –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ, –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ –∏–ª–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
                category: "–£—Å–ª—É–≥–∏"
            },
            {
                title: "–ü–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Ç–æ–≤–∞—Ä–æ–≤", 
                prompt: "–ù–∞–π–¥–∏ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –∫—É–ø–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏",
                category: "–¢–æ–≤–∞—Ä—ã"
            },
            {
                title: "–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
                prompt: "–ù–∞–π–¥–∏ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤, –∫—É—Ä—Å—ã, —Ç—Ä–µ–Ω–∏–Ω–≥–∏ –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
                category: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
            },
            {
                title: "–ü–æ–∏—Å–∫ B2B –∫–ª–∏–µ–Ω—Ç–æ–≤",
                prompt: "–ù–∞–π–¥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –±–∏–∑–Ω–µ—Å–∞ –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –∏–ª–∏ –¥–µ–ª–æ–≤–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
                category: "B2B"
            },
            {
                title: "–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                prompt: "–ù–∞–π–¥–∏ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã, –¥–æ–º–∞, –æ—Ñ–∏—Å—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –∞—Ä–µ–Ω–¥—ã",
                category: "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
            },
            {
                title: "–ü–æ–∏—Å–∫ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
                prompt: "–ù–∞–π–¥–∏ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–æ—á–Ω–æ –∏—â—É—Ç —Ä–µ—à–µ–Ω–∏–µ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º—ã –∏ –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                category: "–°—Ä–æ—á–Ω–æ"
            }
        ];
    },
    
    /**
     * –ü–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º
     */
    showPromptSuggestions: function() {
        const suggestions = this.getPromptSuggestions();
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
        `;
        
        const suggestionsHTML = suggestions.map(suggestion => `
            <div style="
                background: #f8f9fa;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 10px;
                border-left: 4px solid #007bff;
                cursor: pointer;
                transition: background 0.2s;
            " onclick="window.AIManager.usePromptSuggestion('${suggestion.prompt.replace(/'/g, "\\'")}'); this.closest('.modal-overlay').remove();"
               onmouseover="this.style.background='#e3f2fd'"
               onmouseout="this.style.background='#f8f9fa'">
                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                    <strong>${suggestion.title}</strong>
                    <small style="background: #007bff; color: white; padding: 2px 6px; border-radius: 10px; font-size: 10px;">
                        ${suggestion.category}
                    </small>
                </div>
                <div style="font-size: 13px; color: #495057; line-height: 1.4;">
                    "${suggestion.prompt}"
                </div>
            </div>
        `).join('');
        
        modal.innerHTML = `
            <div style="
                background: white;
                padding: 30px;
                border-radius: 15px;
                max-width: 700px;
                max-height: 80vh;
                overflow-y: auto;
                box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            ">
                <h3 style="margin: 0 0 20px 0; color: #333;">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞</h3>
                
                <div style="margin-bottom: 15px; padding: 10px; background: #fff3cd; border-radius: 8px; font-size: 14px;">
                    <strong>üí° –°–æ–≤–µ—Ç:</strong> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π –ø—Ä–æ–º–ø—Ç —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                </div>
                
                <div style="max-height: 400px; overflow-y: auto;">
                    ${suggestionsHTML}
                </div>
                
                <div style="text-align: right; margin-top: 20px;">
                    <button onclick="this.closest('.modal-overlay').remove()" 
                            style="
                                background: #6c757d;
                                color: white;
                                border: none;
                                padding: 10px 20px;
                                border-radius: 5px;
                                cursor: pointer;
                            ">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;
        
        modal.className = 'modal-overlay';
        document.body.appendChild(modal);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
        
        console.log('üí° –ü–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤');
    },
    
    /**
     * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
     * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    usePromptSuggestion: function(prompt) {
        const promptInput = document.getElementById('aiPromptInput');
        if (promptInput) {
            promptInput.value = prompt;
        }
        
        // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        this.analyzeWithCustomPrompt(prompt);
        
        console.log('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:', prompt);
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.openAiPromptModal = function() {
    window.AIManager.openPromptModal();
};

window.closeAiPromptModal = function() {
    window.AIManager.closePromptModal();
};

window.startAiAnalysisWithPrompt = function() {
    window.AIManager.startAnalysisWithPrompt();
};

window.analyzeWithCustomPrompt = function(prompt) {
    window.AIManager.analyzeWithCustomPrompt(prompt);
};

window.showAIResults = function(potentialClients, analyzedCount, customPrompt) {
    window.AIManager.showResults(potentialClients, analyzedCount, customPrompt);
};

window.loadUserStats = function() {
    window.AIManager.loadUserStats();
};

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    setTimeout(() => {
        window.AIManager.init();
    }, 500);
});

console.log('‚úÖ AIManager –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');