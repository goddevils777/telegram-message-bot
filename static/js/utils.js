// ===============================
// –û–ë–©–ò–ï –£–¢–ò–õ–ò–¢–´
// static/js/utils.js
// ===============================

window.Utils = {
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
     */
    DateUtils: {
        /**
         * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
         * @param {string} dateString - –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM
         * @returns {Date} –û–±—ä–µ–∫—Ç Date
         */
        parseMessageDate: function(dateString) {
            const [datePart, timePart] = dateString.split(' ');
            const [day, month, year] = datePart.split('.');
            const [hours, minutes] = timePart.split(':');
            
            return new Date(year, month - 1, day, hours, minutes);
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥")
         * @param {Date|string} date - –î–∞—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
         * @returns {string} –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
         */
        getRelativeTime: function(date) {
            const now = new Date();
            const targetDate = typeof date === 'string' ? this.parseMessageDate(date) : date;
            const diffMs = now - targetDate;
            
            const seconds = Math.floor(diffMs / 1000);
            const minutes = Math.floor(seconds / 60);
            const hours = Math.floor(minutes / 60);
            const days = Math.floor(hours / 24);
            const months = Math.floor(days / 30);
            const years = Math.floor(days / 365);
            
            if (seconds < 60) return 'üî• –¢–æ–ª—å–∫–æ —á—Ç–æ';
            if (minutes < 60) return `‚ö° ${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
            if (hours < 24) return `‚ö° ${hours}—á –Ω–∞–∑–∞–¥`;
            if (days < 30) return `üìÖ ${days}–¥ –Ω–∞–∑–∞–¥`;
            if (months < 12) {
                const remainingDays = days % 30;
                return remainingDays > 0 ? `üìÖ ${months}–º–µ—Å ${remainingDays}–¥ –Ω–∞–∑–∞–¥` : `üìÖ ${months}–º–µ—Å –Ω–∞–∑–∞–¥`;
            }
            return `üìÖ ${years}–≥ –Ω–∞–∑–∞–¥`;
        },
        
        /**
         * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
         * @param {Date|string} date - –î–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
         */
        formatDate: function(date) {
            const targetDate = typeof date === 'string' ? new Date(date) : date;
            return targetDate.toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
         * @returns {number} –¢–µ–∫—É—â–∏–π timestamp
         */
        now: function() {
            return Date.now();
        }
    },
    
    /**
     * –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
     */
    StringUtils: {
        /**
         * –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏
         * @param {string} str - –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
         * @returns {string} –û—á–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
         */
        sanitize: function(str) {
            if (typeof str !== 'string') return '';
            return str.trim().replace(/\s+/g, ' ');
        },
        
        /**
         * –û–±—Ä–µ–∑–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º "..."
         * @param {string} str - –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
         * @param {number} maxLength - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
         * @returns {string} –û–±—Ä–µ–∑–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
         */
        truncate: function(str, maxLength = 100) {
            if (!str || str.length <= maxLength) return str;
            return str.substring(0, maxLength - 3) + '...';
        },
        
        /**
         * –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
         * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
         * @param {Array} keywords - –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
         * @param {string} className - CSS –∫–ª–∞—Å—Å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
         * @returns {string} HTML —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
         */
        highlightKeywords: function(text, keywords, className = 'highlight') {
            if (!text || !keywords || keywords.length === 0) return text;
            
            let result = text;
            keywords.forEach(keyword => {
                const regex = new RegExp(`(${keyword})`, 'gi');
                result = result.replace(regex, `<span class="${className}">$1</span>`);
            });
            
            return result;
        },
        
        /**
         * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
         * @param {number} length - –î–ª–∏–Ω–∞ ID
         * @returns {string} –°–ª—É—á–∞–π–Ω—ã–π ID
         */
        generateId: function(length = 8) {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let result = '';
            for (let i = 0; i < length; i++) {
                result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return result;
        },
        
        /**
         * –í–∞–ª–∏–¥–∞—Ü–∏—è email
         * @param {string} email - Email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
         * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
         */
        isValidEmail: function(email) {
            const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return regex.test(email);
        },
        
        /**
         * –û—á–∏—Å—Ç–∫–∞ HTML —Ç–µ–≥–æ–≤
         * @param {string} html - HTML —Å—Ç—Ä–æ–∫–∞
         * @returns {string} –¢–µ–∫—Å—Ç –±–µ–∑ HTML
         */
        stripHtml: function(html) {
            const tmp = document.createElement('div');
            tmp.innerHTML = html;
            return tmp.textContent || tmp.innerText || '';
        }
    },
    
    /**
     * –†–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏
     */
    ArrayUtils: {
        /**
         * –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞
         * @param {Array} array - –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
         * @returns {Array} –ú–∞—Å—Å–∏–≤ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
         */
        unique: function(array) {
            return [...new Set(array)];
        },
        
        /**
         * –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —á–∞—Å—Ç–∏
         * @param {Array} array - –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
         * @param {number} chunkSize - –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏
         * @returns {Array} –ú–∞—Å—Å–∏–≤ —á–∞—Å—Ç–µ–π
         */
        chunk: function(array, chunkSize) {
            const chunks = [];
            for (let i = 0; i < array.length; i += chunkSize) {
                chunks.push(array.slice(i, i + chunkSize));
            }
            return chunks;
        },
        
        /**
         * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
         * @param {Array} array - –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
         * @returns {Array} –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
         */
        shuffle: function(array) {
            const result = [...array];
            for (let i = result.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [result[i], result[j]] = [result[j], result[i]];
            }
            return result;
        },
        
        /**
         * –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É –º–∞—Å—Å–∏–≤–∞–º–∏
         * @param {Array} array1 - –ü–µ—Ä–≤—ã–π –º–∞—Å—Å–∏–≤
         * @param {Array} array2 - –í—Ç–æ—Ä–æ–π –º–∞—Å—Å–∏–≤
         * @returns {Array} –ú–∞—Å—Å–∏–≤ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
         */
        intersection: function(array1, array2) {
            return array1.filter(value => array2.includes(value));
        },
        
        /**
         * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –ø–æ –∫–ª—é—á—É
         * @param {Array} array - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
         * @param {string} key - –ö–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
         * @returns {Object} –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
         */
        groupBy: function(array, key) {
            return array.reduce((groups, item) => {
                const value = item[key];
                groups[value] = groups[value] || [];
                groups[value].push(item);
                return groups;
            }, {});
        }
    },
    
    /**
     * –†–∞–±–æ—Ç–∞ —Å URL –∏ —Å—Å—ã–ª–∫–∞–º–∏
     */
    LinkUtils: {
        /**
         * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
         * @param {Object} message - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
         * @returns {string} –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
         */
        generateTelegramLink: function(message) {
            if (!message.chat_id || !message.message_id) {
                return '#';
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å username —á–∞—Ç–∞
            if (message.chat_username) {
                return `https://t.me/${message.chat_username}/${message.message_id}`;
            }
            
            // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤
            const chatIdStr = message.chat_id.toString();
            const cleanChatId = chatIdStr.startsWith('-100') ? chatIdStr.slice(4) : chatIdStr.replace('-', '');
            
            return `https://t.me/c/${cleanChatId}/${message.message_id}`;
        },
        
        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL
         * @param {string} url - URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
         * @returns {Object} –û–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
         */
        getUrlParams: function(url = window.location.href) {
            const params = {};
            const urlObj = new URL(url);
            urlObj.searchParams.forEach((value, key) => {
                params[key] = value;
            });
            return params;
        },
        
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
         * @param {string} url - URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
         * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
         */
        isValidUrl: function(url) {
            try {
                new URL(url);
                return true;
            } catch {
                return false;
            }
        }
    },
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    ValidationUtils: {
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
         * @param {any} value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
         * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
         */
        isNotEmpty: function(value) {
            if (value === null || value === undefined) return false;
            if (typeof value === 'string') return value.trim().length > 0;
            if (Array.isArray(value)) return value.length > 0;
            if (typeof value === 'object') return Object.keys(value).length > 0;
            return true;
        },
        
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
         * @param {number} value - –ó–Ω–∞—á–µ–Ω–∏–µ
         * @param {number} min - –ú–∏–Ω–∏–º—É–º
         * @param {number} max - –ú–∞–∫—Å–∏–º—É–º
         * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
         */
        isInRange: function(value, min, max) {
            const num = parseFloat(value);
            return !isNaN(num) && num >= min && num <= max;
        },
        
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ API ID
         * @param {string} apiId - API ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
         * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
         */
        isValidApiId: function(apiId) {
            return /^\d+$/.test(apiId) && apiId.length >= 6 && apiId.length <= 10;
        },
        
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ API Hash
         * @param {string} apiHash - API Hash –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
         * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
         */
        isValidApiHash: function(apiHash) {
            return /^[a-fA-F0-9]{32}$/.test(apiHash);
        }
    },
    
    /**
     * –†–∞–±–æ—Ç–∞ —Å —á–∏—Å–ª–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    NumberUtils: {
        /**
         * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
         * @param {number} number - –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
         */
        formatNumber: function(number) {
            return new Intl.NumberFormat('ru-RU').format(number);
        },
        
        /**
         * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
         * @param {number} value - –ó–Ω–∞—á–µ–Ω–∏–µ
         * @param {number} total - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
         * @returns {string} –ü—Ä–æ—Ü–µ–Ω—Ç —Å —Å–∏–º–≤–æ–ª–æ–º %
         */
        getPercentage: function(value, total) {
            if (total === 0) return '0%';
            return Math.round((value / total) * 100) + '%';
        },
        
        /**
         * –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
         * @param {number} number - –ß–∏—Å–ª–æ
         * @param {number} decimals - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
         * @returns {number} –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
         */
        roundTo: function(number, decimals = 2) {
            return Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);
        },
        
        /**
         * –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
         * @param {number} min - –ú–∏–Ω–∏–º—É–º
         * @param {number} max - –ú–∞–∫—Å–∏–º—É–º
         * @returns {number} –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
         */
        randomBetween: function(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        },
        
        /**
         * –ö–ª–∞–º–ø–∏–Ω–≥ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
         * @param {number} value - –ó–Ω–∞—á–µ–Ω–∏–µ
         * @param {number} min - –ú–∏–Ω–∏–º—É–º
         * @param {number} max - –ú–∞–∫—Å–∏–º—É–º
         * @returns {number} –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞
         */
        clamp: function(value, min, max) {
            return Math.min(Math.max(value, min), max);
        }
    },
    
    /**
     * –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
     */
    PerformanceUtils: {
        /**
         * –î–µ–±–∞—É–Ω—Å —Ñ—É–Ω–∫—Ü–∏–∏
         * @param {Function} func - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∞
         * @param {number} wait - –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º—Å
         * @returns {Function} –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
         */
        debounce: function(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        },
        
        /**
         * –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–∏
         * @param {Function} func - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞
         * @param {number} limit - –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –º—Å
         * @returns {Function} –¢—Ä–æ—Ç—Ç–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
         */
        throttle: function(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            };
        },
        
        /**
         * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
         * @param {Function} func - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
         * @param {string} label - –ú–µ—Ç–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
         * @returns {any} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
         */
        measureTime: function(func, label = 'Function') {
            const start = performance.now();
            const result = func();
            const end = performance.now();
            console.log(`‚è±Ô∏è ${label} –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∑–∞ ${(end - start).toFixed(2)}ms`);
            return result;
        },
        
        /**
         * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞
         * @param {number} ms - –í—Ä–µ–º—è –ø–∞—É–∑—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
         * @returns {Promise} Promise –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
         */
        sleep: function(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    },
    
    /**
     * –†–∞–±–æ—Ç–∞ —Å DOM
     */
    DOMUtils: {
        /**
         * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
         * @param {string} id - ID —ç–ª–µ–º–µ–Ω—Ç–∞
         * @returns {HTMLElement|null} –≠–ª–µ–º–µ–Ω—Ç –∏–ª–∏ null
         */
        safeGetById: function(id) {
            return document.getElementById(id);
        },
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
         * @param {string} tag - –¢–µ–≥ —ç–ª–µ–º–µ–Ω—Ç–∞
         * @param {Object} attributes - –û–±—ä–µ–∫—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤
         * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
         * @returns {HTMLElement} –°–æ–∑–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
         */
        createElement: function(tag, attributes = {}, content = '') {
            const element = document.createElement(tag);
            
            Object.entries(attributes).forEach(([key, value]) => {
                if (key === 'style' && typeof value === 'object') {
                    Object.assign(element.style, value);
                } else {
                    element.setAttribute(key, value);
                }
            });
            
            if (content) {
                element.innerHTML = content;
            }
            
            return element;
        },
        
        /**
         * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
         * @param {string|HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –µ–≥–æ ID
         * @param {boolean} show - –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å
         */
        toggleVisibility: function(element, show) {
            const el = typeof element === 'string' ? this.safeGetById(element) : element;
            if (el) {
                el.style.display = show ? 'block' : 'none';
            }
        },
        
        /**
         * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–æ–≤
         * @param {string|HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –µ–≥–æ ID
         * @param {string|Array} classes - –ö–ª–∞—Å—Å –∏–ª–∏ –º–∞—Å—Å–∏–≤ –∫–ª–∞—Å—Å–æ–≤
         */
        addClass: function(element, classes) {
            const el = typeof element === 'string' ? this.safeGetById(element) : element;
            if (el) {
                const classList = Array.isArray(classes) ? classes : [classes];
                el.classList.add(...classList);
            }
        },
        
        /**
         * –£–¥–∞–ª–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–æ–≤
         * @param {string|HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –µ–≥–æ ID
         * @param {string|Array} classes - –ö–ª–∞—Å—Å –∏–ª–∏ –º–∞—Å—Å–∏–≤ –∫–ª–∞—Å—Å–æ–≤
         */
        removeClass: function(element, classes) {
            const el = typeof element === 'string' ? this.safeGetById(element) : element;
            if (el) {
                const classList = Array.isArray(classes) ? classes : [classes];
                el.classList.remove(...classList);
            }
        },
        
        /**
         * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
         * @param {string|HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –µ–≥–æ ID
         * @param {Object} options - –û–ø—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
         */
        scrollToElement: function(element, options = { behavior: 'smooth' }) {
            const el = typeof element === 'string' ? this.safeGetById(element) : element;
            if (el) {
                el.scrollIntoView(options);
            }
        }
    },
    
    /**
     * –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
     */
    FileUtils: {
        /**
         * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ —Ñ–∞–π–ª
         * @param {string} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
         * @param {string} filename - –ò–º—è —Ñ–∞–π–ª–∞
         * @param {string} mimeType - MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
         */
        downloadAsFile: function(data, filename, mimeType = 'text/plain') {
            const blob = new Blob([data], { type: mimeType });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
         * @param {number} bytes - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
         * @returns {string} –†–∞–∑–º–µ—Ä –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
         */
        formatFileSize: function(bytes) {
            if (bytes === 0) return '0 Bytes';
            
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        },
        
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
         * @param {string} filename - –ò–º—è —Ñ–∞–π–ª–∞
         * @param {Array} allowedExtensions - –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
         * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
         */
        isAllowedFileType: function(filename, allowedExtensions) {
            const extension = filename.toLowerCase().split('.').pop();
            return allowedExtensions.includes(extension);
        }
    },
    
    /**
     * –†–∞–±–æ—Ç–∞ —Å —Ü–≤–µ—Ç–∞–º–∏
     */
    ColorUtils: {
        /**
         * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
         * @returns {string} HEX —Ü–≤–µ—Ç
         */
        randomColor: function() {
            return '#' + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–∏ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
         * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞
         * @returns {string} HEX —Ü–≤–µ—Ç
         */
        stringToColor: function(str) {
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                hash = str.charCodeAt(i) + ((hash << 5) - hash);
            }
            
            const color = Math.abs(hash).toString(16).substring(0, 6);
            return '#' + '000000'.substring(0, 6 - color.length) + color;
        },
        
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–ª—ã–π –∏–ª–∏ —Ç–µ–º–Ω—ã–π —Ü–≤–µ—Ç
         * @param {string} hex - HEX —Ü–≤–µ—Ç
         * @returns {boolean} true –µ—Å–ª–∏ —Å–≤–µ—Ç–ª—ã–π
         */
        isLightColor: function(hex) {
            const rgb = parseInt(hex.slice(1), 16);
            const r = (rgb >> 16) & 0xff;
            const g = (rgb >> 8) & 0xff;
            const b = (rgb >> 0) & 0xff;
            
            const brightness = (r * 299 + g * 587 + b * 114) / 1000;
            return brightness > 155;
        }
    },
    
    /**
     * –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —É—Ç–∏–ª–∏—Ç—ã
     */
    CryptoUtils: {
        /**
         * –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
         * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
         * @returns {string} –•–µ—à —Å—Ç—Ä–æ–∫–∏
         */
        simpleHash: function(str) {
            let hash = 0;
            if (str.length === 0) return hash.toString();
            
            for (let i = 0; i < str.length; i++) {
                const char = str.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
            }
            
            return Math.abs(hash).toString(36);
        },
        
        /**
         * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID v4
         * @returns {string} UUID
         */
        generateUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
    },
    
    /**
     * –†–∞–±–æ—Ç–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
     */
    BrowserUtils: {
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ
         * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
         */
        getBrowserInfo: function() {
            const ua = navigator.userAgent;
            let browser = 'Unknown';
            
            if (ua.includes('Chrome')) browser = 'Chrome';
            else if (ua.includes('Firefox')) browser = 'Firefox';
            else if (ua.includes('Safari')) browser = 'Safari';
            else if (ua.includes('Edge')) browser = 'Edge';
            else if (ua.includes('Opera')) browser = 'Opera';
            
            return {
                name: browser,
                userAgent: ua,
                language: navigator.language,
                platform: navigator.platform,
                cookieEnabled: navigator.cookieEnabled,
                onLine: navigator.onLine
            };
        },
        
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ localStorage
         * @returns {boolean} –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ localStorage
         */
        isLocalStorageSupported: function() {
            try {
                const test = 'test';
                localStorage.setItem(test, test);
                localStorage.removeItem(test);
                return true;
            } catch {
                return false;
            }
        },
        
        /**
         * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
         * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
         * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
         */
        copyToClipboard: async function(text) {
            try {
                if (navigator.clipboard && navigator.clipboard.writeText) {
                    await navigator.clipboard.writeText(text);
                    return true;
                } else {
                    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                    const textArea = document.createElement('textarea');
                    textArea.value = text;
                    textArea.style.position = 'fixed';
                    textArea.style.left = '-999999px';
                    textArea.style.top = '-999999px';
                    document.body.appendChild(textArea);
                    textArea.focus();
                    textArea.select();
                    
                    const result = document.execCommand('copy');
                    document.body.removeChild(textArea);
                    return result;
                }
            } catch {
                return false;
            }
        },
        
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
         * @returns {Object} –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
         */
        getScreenSize: function() {
            return {
                width: window.innerWidth,
                height: window.innerHeight,
                availWidth: screen.availWidth,
                availHeight: screen.availHeight,
                devicePixelRatio: window.devicePixelRatio || 1
            };
        }
    },
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏
     */
    Logger: {
        /**
         * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
         * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
         * @param {any} data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
         */
        info: function(message, data = null) {
            console.log(`‚ÑπÔ∏è ${message}`, data ? data : '');
        },
        
        /**
         * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—Ö–∞
         * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
         * @param {any} data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
         */
        success: function(message, data = null) {
            console.log(`‚úÖ ${message}`, data ? data : '');
        },
        
        /**
         * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
         * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
         * @param {any} data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
         */
        warn: function(message, data = null) {
            console.warn(`‚ö†Ô∏è ${message}`, data ? data : '');
        },
        
        /**
         * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
         * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
         * @param {any} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
         */
        error: function(message, error = null) {
            console.error(`‚ùå ${message}`, error ? error : '');
        },
        
        /**
         * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
         * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
         * @param {any} data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
         */
        debug: function(message, data = null) {
            if (window.DEBUG_MODE) {
                console.log(`üêõ ${message}`, data ? data : '');
            }
        }
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
window.formatDate = window.Utils.DateUtils.formatDate;
window.getRelativeTime = window.Utils.DateUtils.getRelativeTime;
window.generateId = window.Utils.StringUtils.generateId;
window.sanitizeString = window.Utils.StringUtils.sanitize;
window.formatNumber = window.Utils.NumberUtils.formatNumber;
window.downloadFile = window.Utils.FileUtils.downloadAsFile;
window.copyToClipboard = window.Utils.BrowserUtils.copyToClipboard;

console.log('‚úÖ Utils –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');