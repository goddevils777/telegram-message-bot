// –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π - —á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
let groups = [];
let selectedGroups = [];
let keywords = [];

// –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã

// –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã

// –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã
function showGroups() {
    console.log('üîç –ü–æ–∫–∞–∑—ã–≤–∞—é –≥—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ø–æ–∏—Å–∫–∞...');
    
    // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ø–æ–∏—Å–∫–∞
    const searchTab = document.getElementById('search-tab');
    if (!searchTab) {
        console.log('‚ùå –í–∫–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    const container = searchTab.querySelector('.groups-container');
    if (!container) {
        console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä—É–ø–ø –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    container.innerHTML = groups.map(group => `
        <div class="group-item">
            <input type="checkbox" class="group-checkbox" id="group_${group.id}" onchange="toggleGroup('${group.id}', '${group.title}')">
            <label for="group_${group.id}" class="group-label">
                <div class="group-title">${group.title}</div>
                <div class="group-members">${group.members_count || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
            </label>
        </div>
    `).join('');
    
    console.log('‚úÖ –ì—Ä—É–ø–ø—ã –∑–∞–ø–∏—Å–∞–Ω—ã –¢–û–õ–¨–ö–û –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–∏—Å–∫–∞');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø
function loadGroups() {
    console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞—é –≥—Ä—É–ø–ø—ã...');
    
    fetch('/get_groups')
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            groups = data.groups;
            console.log('‚úÖ –ì—Ä—É–ø–ø—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', groups.length);
            showGroups();
        }
    });
}



// –í—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã
function toggleGroup(groupId, groupTitle) {
    console.log('üìÇ –ö–ª–∏–∫ –ø–æ –≥—Ä—É–ø–ø–µ:', groupTitle);
    
    const checkbox = document.getElementById(`group_${groupId}`);
    
    // –ù–ï –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üîç –†–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞:', checkbox.checked);
    
    if (checkbox.checked) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!selectedGroups.find(g => g.id === groupId)) {
            selectedGroups.push({id: groupId, title: groupTitle});
            console.log('‚úÖ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', groupTitle);
        }
    } else {
        // –£–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É
        selectedGroups = selectedGroups.filter(g => g.id !== groupId);
        console.log('‚ùå –ì—Ä—É–ø–ø–∞ —É–±—Ä–∞–Ω–∞:', groupTitle);
    }
    
    console.log('üìä –í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø:', selectedGroups.length);
    // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('üî¢ –ü–†–Ø–ú–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞...');
    const counter = document.getElementById('selectedCount');
    console.log('üéØ –≠–ª–µ–º–µ–Ω—Ç selectedCount:', counter);

    if (counter) {
        counter.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selectedGroups.length} –≥—Ä—É–ø–ø`;
        console.log('‚úÖ –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞–ø—Ä—è–º—É—é');
    } else {
        console.log('‚ùå selectedCount –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
function addKeyword() {
    const input = document.getElementById('wordInput');
    if (!input) {
        console.log('‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const word = input.value.trim();
    if (!word) {
        console.log('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ');
        return;
    }
    
    if (keywords.includes(word)) {
        console.log('‚ùå –°–ª–æ–≤–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', word);
        return;
    }
    
    keywords.push(word);
    input.value = '';
    
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ:', word);
    console.log('üìù –í—Å–µ–≥–æ —Å–ª–æ–≤:', keywords.length);
    
    showKeywords();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
function showKeywords() {
    const container = document.getElementById('keywordsDisplay');
    if (!container) {
        console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    container.innerHTML = keywords.map(word => `
        <span style="background: #007bff; color: white; padding: 5px 10px; margin: 3px; border-radius: 15px; display: inline-block;">
            ${word}
            <button onclick="removeKeyword('${word}')" style="background: none; border: none; color: white; margin-left: 5px; cursor: pointer;">√ó</button>
        </span>
    `).join('');
    
    console.log('‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Å–ª–æ–≤:', keywords.length);
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
function removeKeyword(word) {
    keywords = keywords.filter(k => k !== word);
    console.log('‚ùå –£–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ:', word);
    showKeywords();
}

// –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
function startSearch() {
    let progressInterval;
    console.log('üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    if (selectedGroups.length === 0) {
        console.log('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –≥—Ä—É–ø–ø—ã');
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if (keywords.length === 0) {
        console.log('‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞');
        alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ');
        return;
    }
    
    console.log('üìä –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...');
    console.log('üìÇ –ì—Ä—É–ø–ø:', selectedGroups.length);
    console.log('üìù –°–ª–æ–≤:', keywords.length);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    showSearchProgress(0, selectedGroups.length, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫
    const searchData = {
        groups: selectedGroups.map(g => g.id),
        keywords: keywords,
        limit: 1000 // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –≥—Ä—É–ø–ø—É
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫
    fetch('/parallel_search', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
            keyword: keywords.join(' '),
            selected_groups: selectedGroups.map(g => g.id),
            search_depth: getSearchDepth()
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log('üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', data);
        if (data.success) {
            console.log('‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            console.log('üìà –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', data.total || 0);
            showSearchResults(data.results);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', data.error);
            alert('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + data.error);
        }
   
        const progressInterval = setInterval(() => {
            checkSearchProgress();
        }, 2000);
    });
}

function checkSearchProgress() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∏—Å–∫–∞...');
    
    fetch('/search_progress')
    .then(response => response.json())
    .then(data => {
        console.log('üìä –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', data);
        
        if (data.current && data.total) {
            showSearchProgress(data.current, data.total, data.current_group || '–ü–æ–∏—Å–∫...');
        }
        
        if (data.finished) {
            console.log('‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É');
            clearInterval(progressInterval);
        }
    })
    .catch(error => {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    });
}



// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
function getSearchDepth() {
    const depthInput = document.getElementById('searchDepth') || 
                      document.getElementById('messagesLimit') || 
                      document.getElementById('messageCount');
    
    if (depthInput) {
        const value = parseInt(depthInput.value) || 1000;
        console.log('üìä –ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ –∏–∑ –ø–æ–ª—è:', value);
        return value;
    }
    
    console.log('üìä –ü–æ–ª–µ –≥–ª—É–±–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1000');
    return 1000;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-content').forEach(content => {
        content.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É

    const targetTab = document.getElementById(tabName + '-tab');
    if (targetTab) {
        targetTab.style.display = 'block';
        console.log('‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞:', tabName);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
        if (tabName === 'accounts') {
            loadAccounts();
        } else if (tabName === 'search') {
            loadGroups(); // –ì—Ä—É–ø–ø—ã –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ø–æ–∏—Å–∫–∞
        }
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
    event.target.classList.add('active');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã
function showAccounts(accounts) {
    const container = document.getElementById('accountsStats');
    if (!container) {
        console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä accountsStats –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞—é –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts.forEach(account => {
        activateAccountAuto(account.account_name);
    });
    
    container.innerHTML = accounts.map(account => `
        <div style="background: white; padding: 15px; border-radius: 10px; border: 2px solid #e1e8ed; margin-bottom: 10px;">
            <input type="checkbox" id="acc_${account.account_name}" style="margin-right: 10px;" checked onchange="toggleAccount('${account.account_name}')">
            <label for="acc_${account.account_name}" style="font-weight: bold;">
                ${account.user_info.first_name} ${account.user_info.last_name}
            </label>
            <div style="font-size: 12px; color: #666; margin-top: 5px;">
                üì± ${account.user_info.phone}
            </div>
        </div>
    `).join('');
    
console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');

// –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —à–∞–ø–∫–µ
console.log('üìä –ü–†–Ø–ú–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö');

const accountInfo = document.getElementById('accountInfo');
if (accountInfo) {
    accountInfo.textContent = `üë§ –ê–∫—Ç–∏–≤–Ω–æ: ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`;
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω accountInfo –≤ —à–∞–ø–∫–µ');
}

const searchAccountInfo = document.getElementById('searchAccountInfo');
if (searchAccountInfo) {
    const accountNames = accounts.map(acc => acc.user_info.first_name).join(', ');
    searchAccountInfo.textContent = `–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: ${accountNames}`;
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω searchAccountInfo:', accountNames);
} else {
    console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç searchAccountInfo –Ω–µ –Ω–∞–π–¥–µ–Ω');
}
    
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —à–∞–ø–∫–µ
function updateHeaderAccountInfo(accounts) {
    console.log('üìä –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –≤ —à–∞–ø–∫–µ');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç "üë§ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫–∫–∞—É–Ω—Ç..." –≤ —à–∞–ø–∫–µ
    const accountInfo = document.getElementById('accountInfo');
    if (accountInfo) {
        accountInfo.textContent = `üë§ –ê–∫—Ç–∏–≤–Ω–æ: ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω accountInfo –≤ —à–∞–ø–∫–µ');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—à–∫—É –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ø–æ–∏—Å–∫–∞
    const searchAccountInfo = document.getElementById('searchAccountInfo');
    if (searchAccountInfo) {
        const accountNames = accounts.map(acc => acc.user_info.first_name).join(', ');
        searchAccountInfo.textContent = `–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: ${accountNames}`;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω searchAccountInfo:', accountNames);
    } else {
        console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç searchAccountInfo –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
}

// –ê–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
function activateAccountAuto(accountName) {
    fetch('/toggle_account', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
            account_name: accountName,
            active: true
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${accountName} –∞–≤—Ç–æ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —à–∞–ø–∫–µ
function updateHeaderAccountInfo(accounts) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç "üë§ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫–∫–∞—É–Ω—Ç..."
    const accountInfo = document.getElementById('accountInfo');
    if (accountInfo) {
        accountInfo.textContent = `üë§ –ê–∫—Ç–∏–≤–Ω–æ: ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º "–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:"
    const searchAccountInfo = document.getElementById('autoSearchAccountInfo');
    if (searchAccountInfo) {
        const accountNames = accounts.map(acc => acc.user_info.first_name).join(', ');
        searchAccountInfo.textContent = `–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: ${accountNames}`;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–í–¢–û–†–û–ô)
function loadAccounts() {
    console.log('üë• –ó–∞–≥—Ä—É–∂–∞—é –∞–∫–∫–∞—É–Ω—Ç—ã...');
    
    fetch('/get_available_sessions')
    .then(response => response.json())
    .then(data => {
        console.log('üì° –û—Ç–≤–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', data);
        if (data.success) {
            console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.sessions.length);
            showAccounts(data.sessions);
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
function loadAccounts() {
    console.log('üë• –ó–∞–≥—Ä—É–∂–∞—é –∞–∫–∫–∞—É–Ω—Ç—ã...');
    
    fetch('/get_available_sessions')
    .then(response => response.json())
    .then(data => {
        console.log('üì° –û—Ç–≤–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', data);
        if (data.success) {
            console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.sessions.length);
            showAccounts(data.sessions);  // ‚Üê –≠–¢–ê –°–¢–†–û–ö–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨!
        }
    });
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
function toggleAccount(accountName) {
    console.log('üë§ –ü–µ—Ä–µ–∫–ª—é—á–∞—é –∞–∫–∫–∞—É–Ω—Ç:', accountName);
    
    const checkbox = document.getElementById(`acc_${accountName}`);
    
    fetch('/toggle_account', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
            account_name: accountName,
            active: checkbox.checked
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log('üì° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
        console.log('üìä –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:');
        console.log('  - success:', data.success);
        console.log('  - total:', data.total);
        console.log('  - results –¥–ª–∏–Ω–∞:', data.results?.length);
        console.log('  - results —Ç–∏–ø:', typeof data.results);
        console.log('  - –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', data.results?.slice(0, 3));
        
        if (data.success) {
            console.log('‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            console.log('üìà –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', data.total || 0);
            
            if (data.results && data.results.length > 0) {
                showSearchResults(data.results);
            } else {
                console.log('‚ùå –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', data.error);
            alert('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + data.error);
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
function showSearchResults(messages) {
    console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', messages.length);
    console.log('üìã –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', messages[0]);
    
    // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let resultsContainer = document.querySelector('.results');
    console.log('üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä results –Ω–∞–π–¥–µ–Ω:', !!resultsContainer);
    
    if (!resultsContainer) {
        console.log('‚ùå –°–æ–∑–¥–∞—é —Å–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        
        // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        resultsContainer = document.createElement('div');
        resultsContainer.style.cssText = 'border: 3px solid green; padding: 20px; margin: 20px; background: white;';
        
        const mainContent = document.querySelector('.container') || document.body;
        mainContent.appendChild(resultsContainer);
    } else {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        resultsContainer.style.display = 'block';
        resultsContainer.style.visibility = 'visible';
        resultsContainer.style.opacity = '1';
        resultsContainer.style.height = 'auto';
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞–Ω');
    }
    
    resultsContainer.innerHTML = `
        <h3 style="color: green;">üî• –ù–ê–ô–î–ï–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø (${messages.length})</h3>
        ${messages.map(msg => `
            <div style="padding: 20px; border: 1px solid #ccc; margin: 10px 0; background: #f9f9f9;">
                <div style="color: #333; margin-bottom: 10px;">${msg.text}</div>
                <div style="font-size: 14px; color: #666;">
                    üë§ ${msg.author} | üí¨ ${msg.chat} | üìÖ ${msg.date}
                </div>
            </div>
        `).join('')}
    `;

    console.log('üìù HTML –∑–∞–ø–∏—Å–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:', resultsContainer.innerHTML.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    console.log('üìè –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', resultsContainer.offsetWidth, 'x', resultsContainer.offsetHeight);
    console.log('üìç –ü–æ–∑–∏—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', resultsContainer.offsetTop, resultsContainer.offsetLeft);
    console.log('üéØ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:', resultsContainer);
}

// –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã
function selectAllAutoGroups() {
    console.log('‚úÖ –í—ã–±–∏—Ä–∞—é –≤—Å–µ –≥—Ä—É–ø–ø—ã');
    
    selectedGroups = [];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —á–µ–∫–±–æ–∫—Å–∞–º –≥—Ä—É–ø–ø
    document.querySelectorAll('.group-checkbox').forEach(checkbox => {
        checkbox.checked = true;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ ID —á–µ–∫–±–æ–∫—Å–∞
        const groupId = checkbox.id.replace('group_', '');
        const groupTitle = checkbox.nextElementSibling.querySelector('.group-title').textContent;
        
        selectedGroups.push({id: groupId, title: groupTitle});
    });
    
    updateGroupsCounter();
    console.log('‚úÖ –í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø:', selectedGroups.length);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    const counter = document.getElementById('selectedCount');
    if (counter) {
        counter.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selectedGroups.length} –≥—Ä—É–ø–ø`;
        console.log('‚úÖ –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö');
    }
}

function deselectAllAutoGroups() {
    console.log('üö® –í–´–ó–í–ê–ù–ê deselectAllAutoGroups - —É–±–∏—Ä–∞—é –≤—Å–µ –≥—Ä—É–ø–ø—ã');
    console.log('üî¢ –ë—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø:', selectedGroups.length);
    
    selectedGroups = [];
    
    // –°–Ω–∏–º–∞–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã
    document.querySelectorAll('.group-checkbox').forEach(checkbox => {
        checkbox.checked = false;
    });

    console.log('‚ùå –°–Ω—è—Ç–æ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø');
    console.log('üî¢ –°—Ç–∞–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø:', selectedGroups.length);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    const counter = document.getElementById('selectedCount');
    if (counter) {
        counter.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selectedGroups.length} –≥—Ä—É–ø–ø`;
        console.log('‚úÖ –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—Å–µ—Ö');
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
function forceReloadGroups() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...');
    loadGroups();
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≥—Ä—É–ø–ø
function updateGroupsCounter() {
    console.log('üî¢ –ò—â—É —ç–ª–µ–º–µ–Ω—Ç selectedCount...');
    
    const counter = document.getElementById('selectedCount');
    console.log('üéØ –≠–ª–µ–º–µ–Ω—Ç selectedCount:', counter);
    
    if (counter) {
        const oldText = counter.textContent;
        counter.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selectedGroups.length} –≥—Ä—É–ø–ø`;
        console.log('‚úÖ –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:');
        console.log('  - –ë—ã–ª–æ:', oldText);
        console.log('  - –°—Ç–∞–ª–æ:', counter.textContent);
        console.log('  - –≠–ª–µ–º–µ–Ω—Ç:', counter);
    } else {
        console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç selectedCount –ù–ï –ù–ê–ô–î–ï–ù');
        
        // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ ID
        const allElements = document.querySelectorAll('[id*="ount"], [id*="elect"]');
        console.log('üîç –≠–ª–µ–º–µ–Ω—Ç—ã —Å count/elect –≤ ID:', allElements);
        
        allElements.forEach(el => {
            console.log(`  - ID: ${el.id}, —Ç–µ–∫—Å—Ç: "${el.textContent}"`);
        });
    }
}

// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
function selectAllGroups() {
    console.log('‚úÖ –í—ã–±–∏—Ä–∞—é –≤—Å–µ –≥—Ä—É–ø–ø—ã');
    
    selectedGroups = [];
    
    document.querySelectorAll('.group-checkbox').forEach(checkbox => {
        checkbox.checked = true;
        
        const groupId = checkbox.id.replace('group_', '');
        const groupTitle = checkbox.nextElementSibling.querySelector('.group-title').textContent;
        
        selectedGroups.push({id: groupId, title: groupTitle});
    });
    
    updateGroupsCounter();
    console.log('‚úÖ –í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø:', selectedGroups.length);
}
function clearAllGroups() {
    console.log('üö® –í–´–ó–í–ê–ù–ê clearAllGroups - —É–±–∏—Ä–∞—é –≤—Å–µ –≥—Ä—É–ø–ø—ã');
    console.log('üî¢ –ë—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø:', selectedGroups.length);
    
    selectedGroups = [];
    
    document.querySelectorAll('.group-checkbox').forEach(checkbox => {
        checkbox.checked = false;
    });

    console.log('‚ùå –°–Ω—è—Ç–æ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø');
    console.log('üî¢ –°—Ç–∞–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø:', selectedGroups.length);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    const counter = document.getElementById('selectedCount');
    if (counter) {
        counter.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selectedGroups.length} –≥—Ä—É–ø–ø`;
        console.log('‚úÖ –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—Å–µ—Ö');
    }
}

function refreshGroups() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...');
    loadGroups();
}

function updateGroupsCounter() {
    const counter = document.getElementById('selectedGroupsCount');
    if (counter) {
        counter.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selectedGroups.length} –≥—Ä—É–ø–ø`;
    }
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
function showSearchProgress(current, total, groupName) {
    console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${current}/${total} - ${groupName}`);
    
    let progressDiv = document.getElementById('searchProgress');
    if (!progressDiv) {
        progressDiv = document.createElement('div');
        progressDiv.id = 'searchProgress';
        progressDiv.style.cssText = 'margin: 20px 0;';
        
        const container = document.querySelector('.container');
        container.appendChild(progressDiv);
    }
    
    const percent = Math.round((current / total) * 100);
    
    progressDiv.innerHTML = `
        <div style="background: #e3f2fd; padding: 15px; border-radius: 10px; border-left: 4px solid #2196f3;">
            <div style="font-weight: bold; margin-bottom: 5px;">üîç –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</div>
            <div>–ì—Ä—É–ø–ø–∞ ${current} –∏–∑ ${total}: ${groupName}</div>
            <div style="background: #ddd; height: 8px; border-radius: 4px; margin-top: 10px;">
                <div style="background: #2196f3; height: 8px; border-radius: 4px; width: ${percent}%;"></div>
            </div>
            <div style="text-align: center; margin-top: 5px; font-size: 12px;">${percent}%</div>
        </div>
    `;
}

// –î–µ–ª–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
window.selectAllAutoGroups = selectAllAutoGroups;
window.deselectAllAutoGroups = deselectAllAutoGroups;
window.forceReloadGroups = forceReloadGroups;
window.selectAllGroups = selectAllGroups;
window.clearAllGroups = clearAllGroups;
window.refreshGroups = refreshGroups;

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞');
    loadGroups();
    loadAccounts(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
});