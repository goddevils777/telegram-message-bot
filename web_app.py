from flask import Flask, render_template, request, redirect, session, jsonify
import hashlib
import hmac
import time
import os
import json
import sys
from urllib.parse import unquote
from pyrogram import Client
import asyncio
import threading
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta
import google.generativeai as genai
import requests
from session_manager import SessionManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.secret_key = "abc123xyz789randomd6d215bd18a5303bac88cbc4dcbab1d1"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
executor = ThreadPoolExecutor(max_workers=1)
GEMINI_API_KEY = "AIzaSyDQsK1Y11VPyd_D6TpPhuqvsgc7GvYrwco"
search_history = {}
user_sessions = {}
sms_auth_sessions = {}  # –î–ª—è SMS –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

# API –¥–∞–Ω–Ω—ã–µ
API_ID = 29318340
API_HASH = "68be30e447857e5e5aa24c23a41c686d"
BOT_TOKEN = "8083238823:AAHgAcvKL7nf29zz66kGB3bL6QCSHOVXCRA"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
session_manager = SessionManager(API_ID, API_HASH)

# –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤
USER_LIMITS = {
    'search_limit': 17,
    'ai_analysis_limit': 7
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_usage = {}

# USDT –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã
USDT_WALLET = "TMB8QT6n55WFvzQgN5QNGZWHozt2PjjMJE"

# –£—Ç–∏–ª–∏—Ç—ã
def load_saved_api_keys():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ API –∫–ª—é—á–∏"""
    global API_ID, API_HASH
    try:
        if os.path.exists('config/api_keys.json'):
            with open('config/api_keys.json', 'r') as f:
                config = json.load(f)
            API_ID = config['API_ID']
            API_HASH = config['API_HASH']
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã API –∫–ª—é—á–∏: ID={API_ID}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_saved_api_keys()

def get_user_client(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å API –∫–ª—é—á–∞–º–∏"""
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª –∫–ª—é—á–µ–π
    keys_file = 'config/api_keys.json'
    
    if not os.path.exists(keys_file):
        return None
    
    try:
        with open(keys_file, 'r') as f:
            keys_data = json.load(f)
        
        api_id = keys_data['API_ID']
        api_hash = keys_data['API_HASH']
        
        return Client(f"user_local", api_id=api_id, api_hash=api_hash)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None

def check_user_limits(user_id, action_type):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_usage:
        user_usage[user_id] = {
            'searches_used': 0,
            'ai_analysis_used': 0,
            'is_premium': False
        }
    
    user_data = user_usage[user_id]
    
    if user_data['is_premium']:
        return True, "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if action_type == 'search':
        if user_data['searches_used'] >= USER_LIMITS['search_limit']:
            return False, f"–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤ ({USER_LIMITS['search_limit']})"
        return True, f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–∏—Å–∫–æ–≤: {USER_LIMITS['search_limit'] - user_data['searches_used']}"
    
    elif action_type == 'ai_analysis':
        if user_data['ai_analysis_used'] >= USER_LIMITS['ai_analysis_limit']:
            return False, f"–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç AI –∞–Ω–∞–ª–∏–∑–æ–≤ ({USER_LIMITS['ai_analysis_limit']})"
        return True, f"–û—Å—Ç–∞–ª–æ—Å—å AI –∞–Ω–∞–ª–∏–∑–æ–≤: {USER_LIMITS['ai_analysis_limit'] - user_data['ai_analysis_used']}"
    
    return True, "OK"

def increment_usage(user_id, action_type):
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    if user_id not in user_usage:
        user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': False}
    
    if action_type == 'search':
        user_usage[user_id]['searches_used'] += 1
    elif action_type == 'ai_analysis':
        user_usage[user_id]['ai_analysis_used'] += 1

def verify_telegram_auth(auth_data, bot_token):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {auth_data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['id', 'first_name', 'auth_date']
    for field in required_fields:
        if field not in auth_data:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
            return False
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ (–æ—Ç–ª–∞–¥–∫–∞)")
    return True

def is_user_account_connected(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    keys_file = 'config/api_keys.json'
    return os.path.exists(keys_file)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    # –ü—Ä—è–º–æ–π –≤—Ö–æ–¥ –≤ –¥–∞—à–±–æ—Ä–¥ –±–µ–∑ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    return render_template('dashboard.html')


@app.route('/get_telegram_user_info', methods=['GET'])
def get_telegram_user_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = {
        'first_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'last_name': '',
        'username': 'local_user',
        'user_id': 'local',
        'has_photo': False,
        'avatar_data': None
    }
    
    return jsonify({
        'success': True,
        'user_info': user_info
    })



@app.route('/get_groups', methods=['GET'])
def get_groups():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 'local_user'
    
    if not is_user_account_connected(user_id):
        return jsonify({'error': '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏'}), 403
    
    try:
        def run_get_groups():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                user_client = get_user_client(user_id)
                if not user_client:
                    return []
                
                groups = loop.run_until_complete(get_user_groups_real(user_client))
                return groups
            finally:
                loop.close()
        
        future = executor.submit(run_get_groups)
        groups = future.result(timeout=60)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(groups)} —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø")
        
        return jsonify({
            'success': True,
            'groups': groups
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
@app.route('/search', methods=['POST'])
def search():
    """API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 'local_user'
    
    if not is_user_account_connected(user_id):
        return jsonify({'error': '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏'}), 403
    
    keyword = request.json.get('keyword', '').strip()
    selected_groups = request.json.get('selected_groups', [])
    
    if not keyword:
        return jsonify({'error': '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'}), 400
    
    if not selected_groups:
        return jsonify({'error': '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞'}), 400
    
    try:
        def run_search():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                user_client = get_user_client(user_id)
                if not user_client:
                    return []
                
                results = loop.run_until_complete(search_in_selected_groups_real(user_client, keyword, selected_groups))
                return results
            finally:
                loop.close()
        
        future = executor.submit(run_search)
        results = future.result(timeout=120)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if user_id not in user_usage:
            user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': True}
        user_usage[user_id]['searches_used'] += 1
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è '{keyword}'")
        
        return jsonify({
            'success': True,
            'results': results,
            'total': len(results)
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}'}), 500
    
# –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
    
    keyword = request.json.get('keyword', '').strip()
    selected_groups = request.json.get('selected_groups', [])
    
    if not keyword:
        return jsonify({'error': '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'}), 400
    
    if not selected_groups:
        return jsonify({'error': '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞'}), 400
    
    try:
            def run_search():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    user_client = get_user_client(user_id)
                    if not user_client:
                        return []
                    
                    results = loop.run_until_complete(search_in_selected_groups_real(user_client, keyword, selected_groups))
                    return results
                finally:
                    loop.close()
            
            future = executor.submit(run_search)
            results = future.result(timeout=120)
            
            increment_usage(user_id, 'search')
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è '{keyword}'")
            
            return jsonify({
                'success': True,
                'results': results,
                'total': len(results)
            })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}'}), 500

@app.route('/save_search', methods=['POST'])
def save_search():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    user_id = 'local_user'
    
    search_record = {
        'id': len(search_history.get(user_id, [])) + 1,
        'keywords': data.get('keywords', []),
        'results_count': data.get('results_count', 0),
        'groups_count': data.get('groups_count', 0),
        'date': datetime.now().strftime("%d.%m.%Y %H:%M"),
        'results': data.get('results', [])[:20]
    }
    
    if user_id not in search_history:
        search_history[user_id] = []
    
    search_history[user_id].insert(0, search_record)
    
    if len(search_history[user_id]) > 50:
        search_history[user_id] = search_history[user_id][:50]
    
    print(f"‚úÖ –ü–æ–∏—Å–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    return jsonify({'success': True, 'message': '–ü–æ–∏—Å–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é'})

@app.route('/get_history', methods=['GET'])
def get_history():
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 'local_user'
    history = search_history.get(user_id, [])
    
    return jsonify({
        'success': True,
        'history': history
    })

@app.route('/delete_search/<int:search_id>', methods=['DELETE'])
def delete_search(search_id):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–∏—Å–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    user_id = 'local_user'
    if user_id in search_history:
        search_history[user_id] = [s for s in search_history[user_id] if s['id'] != search_id]
    
    return jsonify({'success': True})

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–∏–º–∏—Ç—ã
@app.route('/get_user_stats', methods=['GET'])
def get_user_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    user_id = 'local_user'
    
    if user_id not in user_usage:
        user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': True}
    
    user_data = user_usage[user_id]
    
    return jsonify({
        'searches_used': user_data['searches_used'],
        'searches_remaining': 999,  # –ë–µ–∑–ª–∏–º–∏—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        'ai_analysis_used': user_data['ai_analysis_used'],
        'ai_analysis_remaining': 999,  # –ë–µ–∑–ª–∏–º–∏—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        'is_premium': True,  # –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–º–∏—É–º
        'usdt_wallet': USDT_WALLET
    })

# AI –∞–Ω–∞–ª–∏–∑
@app.route('/analyze_with_ai', methods=['POST'])
def analyze_with_ai():
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 'local_user'
    
    data = request.json
    messages = data.get('messages', [])
    
    if not messages:
        return jsonify({'error': '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}), 400
    
    print(f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    try:
        potential_clients = analyze_messages_for_needs(messages)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if user_id not in user_usage:
            user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': True}
        user_usage[user_id]['ai_analysis_used'] += 1
        
        return jsonify({
            'success': True,
            'potential_clients': potential_clients,
            'analyzed_count': len(messages)
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}), 500

def analyze_messages_for_needs(messages):
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini API"""
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        messages_text = ""
        for i, msg in enumerate(messages, 1):
            messages_text += f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}:\n"
            messages_text += f"–ê–≤—Ç–æ—Ä: @{msg.get('author', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            messages_text += f"–ì—Ä—É–ø–ø–∞: {msg.get('chat', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            messages_text += f"–î–∞—Ç–∞: {msg.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            messages_text += f"–¢–µ–∫—Å—Ç: {msg.get('text', '')}\n"
            messages_text += "---\n"
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –≥—Ä—É–ø–ø –∏ –Ω–∞–π–¥–∏ —Ç–µ, –≥–¥–µ –ª—é–¥–∏ –≤—ã—Ä–∞–∂–∞—é—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏—â—É—Ç —É—Å–ª—É–≥–∏.

{messages_text}

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
[
  {{
    "message_number": 1,
    "original_message": "–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
    "client_need": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
    "author": "@username",
    "group": "–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", 
    "date": "–¥–∞—Ç–∞",
    "confidence": "–≤—ã—Å–æ–∫–∞—è"
  }}
]

–ò—â–∏ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:
- –ü–æ–∏—Å–∫ —É—Å–ª—É–≥/—Ç–æ–≤–∞—Ä–æ–≤
- –ü—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏ –∑–∞ –¥–µ–Ω—å–≥–∏
- –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
- –ñ–µ–ª–∞–Ω–∏–µ —á—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç—å
- –ü—Ä–æ–±–ª–µ–º—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∑–∞ –¥–µ–Ω—å–≥–∏

–ò–≥–Ω–æ—Ä–∏—Ä—É–π:
- –û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
- –ù–æ–≤–æ—Å—Ç–∏ –∏ –º–µ–º—ã
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç, –≤–µ—Ä–Ω–∏: []"""

        response = model.generate_content(prompt)
        ai_response = response.text.strip()
        
        if ai_response.startswith('```json'):
            ai_response = ai_response.replace('```json', '').replace('```', '').strip()
        elif ai_response.startswith('```'):
            ai_response = ai_response.split('\n', 1)[1]
            if ai_response.endswith('```'):
                ai_response = ai_response.rsplit('\n', 1)[0]
        
        potential_clients = json.loads(ai_response)
        print(f"Gemini –Ω–∞—à–µ–ª {len(potential_clients)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return potential_clients
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
        return []

# –ü–ª–∞—Ç–µ–∂–∏
@app.route('/check_payment', methods=['POST'])
def check_payment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if 'user_id' not in session:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    user_id = session['user_id']
    
    try:
        payment_found, payment_info = check_tron_usdt_payment(USDT_WALLET, amount_usdt=10)
        
        if payment_found:
            if user_id not in user_usage:
                user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': False}
            
            user_usage[user_id]['is_premium'] = True
            
            return jsonify({
                'success': True,
                'message': '–ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                'payment_info': payment_info
            })
        else:
            return jsonify({
                'success': False,
                'message': payment_info
            })
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'}), 500




@app.route('/check_api_keys', methods=['GET'])
def check_api_keys():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–∏ API –∫–ª—é—á–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        if os.path.exists('config/api_keys.json'):
            with open('config/api_keys.json', 'r') as f:
                config = json.load(f)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
            return jsonify({
                'has_keys': True, 
                'api_id': str(config.get('API_ID', '')),
                'api_hash_masked': config.get('API_HASH', '')[:10] + '...' if config.get('API_HASH') else '',
                'has_hash': bool(config.get('API_HASH'))
            })
        
        return jsonify({'has_keys': False})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π: {e}")
        return jsonify({'has_keys': False})

@app.route('/save_api_keys_local', methods=['POST'])
def save_api_keys_local():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç API –∫–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    data = request.json
    api_id = data.get('api_id', '').strip()
    api_hash = data.get('api_hash', '').strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è API ID (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    if not api_id:
        return jsonify({'error': '–í–≤–µ–¥–∏—Ç–µ API ID'}), 400
    
    if not api_id.isdigit():
        return jsonify({'error': 'API ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'}), 400
    
    try:
        global API_ID, API_HASH
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        existing_config = {}
        if os.path.exists('config/api_keys.json'):
            with open('config/api_keys.json', 'r') as f:
                existing_config = json.load(f)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º API ID
        API_ID = int(api_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º API Hash —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
        if api_hash:
            if len(api_hash) < 32:
                return jsonify({'error': 'API Hash —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π'}), 400
            API_HASH = api_hash
        else:
            # –ï—Å–ª–∏ API Hash –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            API_HASH = existing_config.get('API_HASH', API_HASH)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            'API_ID': API_ID,
            'API_HASH': API_HASH,
            'updated_at': time.time()
        }
        
        os.makedirs('config', exist_ok=True)
        with open('config/api_keys.json', 'w') as f:
            json.dump(config, f, indent=2)
        
        print(f"‚úÖ API –∫–ª—é—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ID={API_ID}, Hash={'–æ–±–Ω–æ–≤–ª–µ–Ω' if api_hash else '–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–µ–∂–Ω–∏–π'}")
        
        return jsonify({
            'success': True,
            'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
            'updated_hash': bool(api_hash)
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}'}), 500

def check_tron_usdt_payment(wallet_address, amount_usdt=10, hours_back=24):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ USDT TRC-20 –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ TronScan API"""
    try:
        url = "https://apilist.tronscan.org/api/token_trc20/transfers"
        params = {
            'limit': 50,
            'start': 0,
            'toAddress': wallet_address,
            'contract_address': 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'
        }
        
        response = requests.get(url, params=params, timeout=10)
        if response.status_code != 200:
            return False, "–û—à–∏–±–∫–∞ API TronScan"
        
        data = response.json()
        transfers = data.get('token_transfers', [])
        
        cutoff_time = datetime.now() - timedelta(hours=hours_back)
        
        for transfer in transfers:
            transfer_amount = float(transfer['quant']) / 1000000
            transfer_time = datetime.fromtimestamp(transfer['block_ts'] / 1000)
            
            if (transfer_amount >= amount_usdt and transfer_time > cutoff_time):
                return True, {
                    'hash': transfer['transaction_id'],
                    'amount': transfer_amount,
                    'time': transfer_time.strftime('%d.%m.%Y %H:%M'),
                    'from_address': transfer['from_address']
                }
        
        return False, "–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

async def get_user_groups_real(client):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await client.start()
        
        groups = []
        processed_count = 0
        
        print("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        async for dialog in client.get_dialogs():
            chat = dialog.chat
            
            if chat.type.name in ["GROUP", "SUPERGROUP"]:
                try:
                    groups.append({
                        'id': str(chat.id),
                        'title': chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                        'type': chat.type.name,
                        'members_count': getattr(chat, 'members_count', 0),
                        'status': '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞'
                    })
                    
                    processed_count += 1
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {chat.title}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    if processed_count % 5 == 0:
                        await asyncio.sleep(1)
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {chat.title}: {e}")
                    continue
        
        await client.stop()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        groups.sort(key=lambda x: x.get('members_count', 0), reverse=True)
        
        print(f"‚úÖ –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø")
        return groups
        
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
        return []

async def search_in_selected_groups_real(client, keyword, selected_group_ids):
    """–†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö"""
    try:
        await client.start()
        
        keywords = [word.strip().lower() for word in keyword.split() if word.strip()]
        
        if not keywords:
            return []
        
        print(f"üîç –ü–æ–∏—Å–∫ —Å–ª–æ–≤: {keywords}")
        print(f"üìÇ –í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö: {len(selected_group_ids)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        chat_groups = []
        async for dialog in client.get_dialogs():
            chat = dialog.chat
            if (chat.type.name in ["GROUP", "SUPERGROUP"] and 
                str(chat.id) in selected_group_ids):
                chat_groups.append(chat)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chat_groups)} –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–∏—Å–∫–∞")
        
        found_messages = []
        
        for i, chat in enumerate(chat_groups, 1):
            try:
                print(f"[{i}/{len(chat_groups)}] üîç –ò—â—É –≤: {chat.title}")
                
                message_count = 0
                async for message in client.get_chat_history(chat.id, limit=200):
                    if message.text:
                        message_text = message.text.lower()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        matched_words = [word for word in keywords if word in message_text]
                        
                        if matched_words:
                            found_messages.append({
                                'text': message.text,
                                'author': message.from_user.username if message.from_user and message.from_user.username else "–ê–Ω–æ–Ω–∏–º",
                                'chat': chat.title,
                                'date': message.date.strftime("%d.%m.%Y %H:%M"),
                                'matched_words': matched_words
                            })
                            
                        message_count += 1
                
                print(f"  üìù –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len([m for m in found_messages if m['chat'] == chat.title])}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                await asyncio.sleep(0.5)
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {chat.title}: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–æ–π
                continue
        
        await client.stop()
        
        print(f"üéâ –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ: {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 50-—é —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        return found_messages[:50]
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []

if __name__ == '__main__':
    app.run(debug=True, port=8000)