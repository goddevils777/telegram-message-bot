from flask import Flask, render_template, request, redirect, session, jsonify
import hashlib
import hmac
import time
import os
import json
import sys
from urllib.parse import unquote
from pyrogram import Client
import asyncio
import threading
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta
import google.generativeai as genai
import requests
from session_manager import SessionManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.secret_key = "abc123xyz789randomd6d215bd18a5303bac88cbc4dcbab1d1"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
executor = ThreadPoolExecutor(max_workers=1)
GEMINI_API_KEY = "AIzaSyDQsK1Y11VPyd_D6TpPhuqvsgc7GvYrwco"
search_history = {}
user_sessions = {}
sms_auth_sessions = {}  # –î–ª—è SMS –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

# API –¥–∞–Ω–Ω—ã–µ
API_ID = 29318340
API_HASH = "68be30e447857e5e5aa24c23a41c686d"
BOT_TOKEN = "8083238823:AAHgAcvKL7nf29zz66kGB3bL6QCSHOVXCRA"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
session_manager = SessionManager(API_ID, API_HASH)

# –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤
USER_LIMITS = {
    'search_limit': 17,
    'ai_analysis_limit': 7
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_usage = {}

# USDT –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã
USDT_WALLET = "TMB8QT6n55WFvzQgN5QNGZWHozt2PjjMJE"

# –£—Ç–∏–ª–∏—Ç—ã
def get_user_client(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return session_manager.get_user_client(user_id)

def check_user_limits(user_id, action_type):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_usage:
        user_usage[user_id] = {
            'searches_used': 0,
            'ai_analysis_used': 0,
            'is_premium': False
        }
    
    user_data = user_usage[user_id]
    
    if user_data['is_premium']:
        return True, "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if action_type == 'search':
        if user_data['searches_used'] >= USER_LIMITS['search_limit']:
            return False, f"–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤ ({USER_LIMITS['search_limit']})"
        return True, f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–∏—Å–∫–æ–≤: {USER_LIMITS['search_limit'] - user_data['searches_used']}"
    
    elif action_type == 'ai_analysis':
        if user_data['ai_analysis_used'] >= USER_LIMITS['ai_analysis_limit']:
            return False, f"–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç AI –∞–Ω–∞–ª–∏–∑–æ–≤ ({USER_LIMITS['ai_analysis_limit']})"
        return True, f"–û—Å—Ç–∞–ª–æ—Å—å AI –∞–Ω–∞–ª–∏–∑–æ–≤: {USER_LIMITS['ai_analysis_limit'] - user_data['ai_analysis_used']}"
    
    return True, "OK"

def increment_usage(user_id, action_type):
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    if user_id not in user_usage:
        user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': False}
    
    if action_type == 'search':
        user_usage[user_id]['searches_used'] += 1
    elif action_type == 'ai_analysis':
        user_usage[user_id]['ai_analysis_used'] += 1

def verify_telegram_auth(auth_data, bot_token):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {auth_data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['id', 'first_name', 'auth_date']
    for field in required_fields:
        if field not in auth_data:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
            return False
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ (–æ—Ç–ª–∞–¥–∫–∞)")
    return True

def is_user_account_connected(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return session_manager.has_session(user_id)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    if 'user_id' in session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = session['user_id']
        if not is_user_account_connected(user_id):
            return render_template('connect_account.html', user=session)
        
        return render_template('dashboard.html', user=session)
    return render_template('login.html')

@app.route('/auth')
def auth():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram"""
    auth_data = dict(request.args)
    
    if verify_telegram_auth(auth_data, BOT_TOKEN):
        user_id = str(auth_data.get('id'))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
        session['user_id'] = user_id
        session['first_name'] = auth_data.get('first_name', '')
        session['last_name'] = auth_data.get('last_name', '')
        session['username'] = auth_data.get('username', '')
        session['photo_url'] = auth_data.get('photo_url', '')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–ø–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—É—é)
        try:
            import shutil
            shutil.copy('user_sessions/test_user.json', f'user_sessions/{user_id}.json')
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        
        return redirect('/')
    else:
        return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", 401

@app.route('/logout')
def logout():
    session.clear()
    return redirect('/')

# –ü–æ–∏—Å–∫ –∏ –≥—Ä—É–ø–ø—ã
@app.route('/search', methods=['POST'])
def search():
    """API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤"""
    if 'user_id' not in session:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    user_id = session['user_id']
    
    if not is_user_account_connected(user_id):
        return jsonify({'error': '–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç'}), 403
    
    can_search, message = check_user_limits(user_id, 'search')
    if not can_search:
        return jsonify({'error': message, 'limit_exceeded': True}), 403
    
    keyword = request.json.get('keyword', '').strip()
    selected_groups = request.json.get('selected_groups', [])
    
    if not keyword:
        return jsonify({'error': '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'}), 400
    
    if not selected_groups:
        return jsonify({'error': '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞'}), 400
    
    try:
        def run_search():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                user_client = get_user_client(user_id)
                if not user_client:
                    return []
                
                results = loop.run_until_complete(search_in_selected_groups(user_client, keyword, selected_groups))
                return results
            finally:
                loop.close()
        
        future = executor.submit(run_search)
        results = future.result(timeout=120)
        
        increment_usage(user_id, 'search')
        
        return jsonify({
            'success': True,
            'results': results,
            'total': len(results)
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}'}), 500

@app.route('/get_groups', methods=['GET'])
def get_groups():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if 'user_id' not in session:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    user_id = session['user_id']
    
    if not is_user_account_connected(user_id):
        return jsonify({'error': '–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç'}), 403
    
    try:
        def run_get_groups():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                user_client = get_user_client(user_id)
                if not user_client:
                    return []
                
                groups = loop.run_until_complete(get_user_groups(user_client))
                return groups
            finally:
                loop.close()
        
        future = executor.submit(run_get_groups)
        groups = future.result(timeout=60)
        
        return jsonify({
            'success': True,
            'groups': groups
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
@app.route('/save_search', methods=['POST'])
def save_search():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    if 'user_id' not in session:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    data = request.json
    user_id = session['user_id']
    
    search_record = {
        'id': len(search_history.get(user_id, [])) + 1,
        'keywords': data.get('keywords', []),
        'results_count': data.get('results_count', 0),
        'groups_count': data.get('groups_count', 0),
        'date': datetime.now().strftime("%d.%m.%Y %H:%M"),
        'results': data.get('results', [])[:20]
    }
    
    if user_id not in search_history:
        search_history[user_id] = []
    
    search_history[user_id].insert(0, search_record)
    
    if len(search_history[user_id]) > 50:
        search_history[user_id] = search_history[user_id][:50]
    
    return jsonify({'success': True, 'message': '–ü–æ–∏—Å–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é'})

@app.route('/get_history', methods=['GET'])
def get_history():
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"""
    if 'user_id' not in session:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    user_id = session['user_id']
    history = search_history.get(user_id, [])
    
    return jsonify({
        'success': True,
        'history': history
    })

@app.route('/delete_search/<int:search_id>', methods=['DELETE'])
def delete_search(search_id):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–∏—Å–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    if 'user_id' not in session:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    user_id = session['user_id']
    if user_id in search_history:
        search_history[user_id] = [s for s in search_history[user_id] if s['id'] != search_id]
    
    return jsonify({'success': True})

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–∏–º–∏—Ç—ã
@app.route('/get_user_stats', methods=['GET'])
def get_user_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if 'user_id' not in session:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    user_id = session['user_id']
    if user_id not in user_usage:
        user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': False}
    
    user_data = user_usage[user_id]
    
    return jsonify({
        'searches_used': user_data['searches_used'],
        'searches_remaining': max(0, USER_LIMITS['search_limit'] - user_data['searches_used']),
        'ai_analysis_used': user_data['ai_analysis_used'],
        'ai_analysis_remaining': max(0, USER_LIMITS['ai_analysis_limit'] - user_data['ai_analysis_used']),
        'is_premium': user_data['is_premium'],
        'usdt_wallet': USDT_WALLET
    })

@app.route('/get_telegram_user_info', methods=['GET'])
def get_telegram_user_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if 'user_id' not in session:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    try:
        user_info = {
            'first_name': session.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
            'last_name': session.get('last_name', ''),
            'username': session.get('username', ''),
            'user_id': session.get('user_id', ''),
            'has_photo': False,
            'avatar_data': None
        }
        
        return jsonify({
            'success': True,
            'user_info': user_info
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# AI –∞–Ω–∞–ª–∏–∑
@app.route('/analyze_with_ai', methods=['POST'])
def analyze_with_ai():
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤"""
    if 'user_id' not in session:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    user_id = session['user_id']
    
    can_analyze, message = check_user_limits(user_id, 'ai_analysis')
    if not can_analyze:
        return jsonify({'error': message, 'limit_exceeded': True}), 403
    
    data = request.json
    messages = data.get('messages', [])
    
    if not messages:
        return jsonify({'error': '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}), 400
    
    if len(messages) > 30:
        return jsonify({'error': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ú–∞–∫—Å–∏–º—É–º 30 –∑–∞ —Ä–∞–∑'}), 400
    
    try:
        potential_clients = analyze_messages_for_needs(messages)
        increment_usage(user_id, 'ai_analysis')
        
        return jsonify({
            'success': True,
            'potential_clients': potential_clients,
            'analyzed_count': len(messages)
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}), 500

def analyze_messages_for_needs(messages):
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini API"""
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        messages_text = ""
        for i, msg in enumerate(messages, 1):
            messages_text += f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}:\n"
            messages_text += f"–ê–≤—Ç–æ—Ä: @{msg.get('author', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            messages_text += f"–ì—Ä—É–ø–ø–∞: {msg.get('chat', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            messages_text += f"–î–∞—Ç–∞: {msg.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            messages_text += f"–¢–µ–∫—Å—Ç: {msg.get('text', '')}\n"
            messages_text += "---\n"
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –≥—Ä—É–ø–ø –∏ –Ω–∞–π–¥–∏ —Ç–µ, –≥–¥–µ –ª—é–¥–∏ –≤—ã—Ä–∞–∂–∞—é—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏—â—É—Ç —É—Å–ª—É–≥–∏.

{messages_text}

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
[
  {{
    "message_number": 1,
    "original_message": "–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
    "client_need": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
    "author": "@username",
    "group": "–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", 
    "date": "–¥–∞—Ç–∞",
    "confidence": "–≤—ã—Å–æ–∫–∞—è"
  }}
]

–ò—â–∏ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:
- –ü–æ–∏—Å–∫ —É—Å–ª—É–≥/—Ç–æ–≤–∞—Ä–æ–≤
- –ü—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏ –∑–∞ –¥–µ–Ω—å–≥–∏
- –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
- –ñ–µ–ª–∞–Ω–∏–µ —á—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç—å
- –ü—Ä–æ–±–ª–µ–º—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∑–∞ –¥–µ–Ω—å–≥–∏

–ò–≥–Ω–æ—Ä–∏—Ä—É–π:
- –û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
- –ù–æ–≤–æ—Å—Ç–∏ –∏ –º–µ–º—ã
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç, –≤–µ—Ä–Ω–∏: []"""

        response = model.generate_content(prompt)
        ai_response = response.text.strip()
        
        if ai_response.startswith('```json'):
            ai_response = ai_response.replace('```json', '').replace('```', '').strip()
        elif ai_response.startswith('```'):
            ai_response = ai_response.split('\n', 1)[1]
            if ai_response.endswith('```'):
                ai_response = ai_response.rsplit('\n', 1)[0]
        
        potential_clients = json.loads(ai_response)
        print(f"Gemini –Ω–∞—à–µ–ª {len(potential_clients)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return potential_clients
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
        return []

# –ü–ª–∞—Ç–µ–∂–∏
@app.route('/check_payment', methods=['POST'])
def check_payment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if 'user_id' not in session:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    user_id = session['user_id']
    
    try:
        payment_found, payment_info = check_tron_usdt_payment(USDT_WALLET, amount_usdt=10)
        
        if payment_found:
            if user_id not in user_usage:
                user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': False}
            
            user_usage[user_id]['is_premium'] = True
            
            return jsonify({
                'success': True,
                'message': '–ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                'payment_info': payment_info
            })
        else:
            return jsonify({
                'success': False,
                'message': payment_info
            })
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'}), 500

@app.route('/send_auth_code', methods=['POST'])
def send_auth_code():
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if 'user_id' not in session:
        return jsonify({'success': False, 'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'})
    
    user_id = session['user_id']
    bot_username = "my_message_hunter_bot"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –∏–º—è –¢–í–û–ï–ì–û –±–æ—Ç–∞
    bot_url = f"https://t.me/{bot_username}?start={user_id}"
    
    return jsonify({
        'success': True, 
        'redirect_to_bot': True,
        'bot_url': bot_url
    })

@app.route('/check_auth_status', methods=['POST'])
def check_auth_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if 'user_id' not in session:
        return jsonify({'connected': False})
    
    user_id = session['user_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
    if session_manager.has_session(user_id):
        return jsonify({'connected': True, 'success': True})
    
    return jsonify({'connected': False, 'pending': True})

def check_tron_usdt_payment(wallet_address, amount_usdt=10, hours_back=24):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ USDT TRC-20 –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ TronScan API"""
    try:
        url = "https://apilist.tronscan.org/api/token_trc20/transfers"
        params = {
            'limit': 50,
            'start': 0,
            'toAddress': wallet_address,
            'contract_address': 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'
        }
        
        response = requests.get(url, params=params, timeout=10)
        if response.status_code != 200:
            return False, "–û—à–∏–±–∫–∞ API TronScan"
        
        data = response.json()
        transfers = data.get('token_transfers', [])
        
        cutoff_time = datetime.now() - timedelta(hours=hours_back)
        
        for transfer in transfers:
            transfer_amount = float(transfer['quant']) / 1000000
            transfer_time = datetime.fromtimestamp(transfer['block_ts'] / 1000)
            
            if (transfer_amount >= amount_usdt and transfer_time > cutoff_time):
                return True, {
                    'hash': transfer['transaction_id'],
                    'amount': transfer_amount,
                    'time': transfer_time.strftime('%d.%m.%Y %H:%M'),
                    'from_address': transfer['from_address']
                }
        
        return False, "–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

# Async —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram API
async def get_user_groups(client):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≥–¥–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await client.start()
        
        groups = []
        processed_count = 0
        async for dialog in client.get_dialogs():
            chat = dialog.chat
            
            if chat.type.name in ["GROUP", "SUPERGROUP"]:
                try:
                    if processed_count > 0 and processed_count % 5 == 0:
                        print(f"‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ {processed_count} –≥—Ä—É–ø–ø...")
                        await asyncio.sleep(3)
                    
                    processed_count += 1
                    
                    recent_messages = []
                    async for msg in client.get_chat_history(chat.id, limit=5):
                        recent_messages.append(msg)
                        break
                    
                    if recent_messages:
                        groups.append({
                            'id': str(chat.id),
                            'title': chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                            'type': '–ê–ö–¢–ò–í–ù–ê–Ø –ì–†–£–ü–ü–ê',
                            'members_count': getattr(chat, 'members_count', 0),
                            'status': '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞'
                        })
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {chat.title}")
                    else:
                        print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞: {chat.title}")
                    
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    if "FLOOD_WAIT" in str(e):
                        wait_time = int(str(e).split("wait of ")[1].split(" seconds")[0])
                        print(f"‚è≥ FLOOD_WAIT: –∂–¥—ë–º {wait_time} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(wait_time + 1)
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {chat.title}: {e}")
                    continue
        
        await client.stop()
        groups.sort(key=lambda x: x.get('members_count', 0), reverse=True)
        
        print(f"‚úÖ –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ {len(groups)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø")
        return groups
        
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []

async def search_in_selected_groups(client, keyword, selected_group_ids):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö"""
    try:
        await client.start()
        
        keywords = [word.strip().lower() for word in keyword.split() if word.strip()]
        
        if not keywords:
            return []
        
        print(f"–ü–æ–∏—Å–∫ —Å–ª–æ–≤: {keywords}")
        print(f"–í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö: {len(selected_group_ids)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–∞–Ω–∞–ª—ã)
        chat_groups = []
        async for dialog in client.get_dialogs():
            chat = dialog.chat
            if (chat.type.name in ["GROUP", "SUPERGROUP"] and 
                str(chat.id) in selected_group_ids):
                chat_groups.append(chat)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –æ–±—â–µ–Ω–∏—è: {len(chat_groups)}")
        
        found_messages = []
        
        for i, chat in enumerate(chat_groups, 1):
            try:
                print(f"[{i}/{len(chat_groups)}] –ò—â—É –≤: {chat.title}")
                
                async for message in client.get_chat_history(chat.id, limit=500):
                    if message.text:
                        message_text = message.text.lower()
                        
                        if any(word in message_text for word in keywords):
                            found_messages.append({
                                'text': message.text,
                                'author': message.from_user.username if message.from_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                                'chat': chat.title,
                                'date': message.date.strftime("%d.%m.%Y %H:%M"),
                                'matched_words': [word for word in keywords if word in message_text]
                            })
                
                await asyncio.sleep(0.5)
                        
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ {chat.title}: {e}")
        
        await client.stop()
        print(f"–ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ: {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return found_messages[:50]
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return []

if __name__ == '__main__':
    app.run(debug=True, port=8000)