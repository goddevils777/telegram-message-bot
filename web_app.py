from flask import Flask, render_template, request, redirect, session, jsonify
import hashlib
import hmac
import time
import os
import json
import sys
from urllib.parse import unquote
from pyrogram import Client
import asyncio
import threading
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta
import google.generativeai as genai
import requests
from session_manager import SessionManager
from flask import Response
import signal
import schedule
import uuid

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.secret_key = "abc123xyz789randomd6d215bd18a5303bac88cbc4dcbab1d1"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
SEARCH_SETTINGS = {
    'messages_per_group': 5000,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –≥—Ä—É–ø–ø—É
    'max_results': 10000,          # –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
    'pause_between_groups': 2,   # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
    'batch_size': 500           # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
}
# –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
ACTIVE_SEARCHES = {}  # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
SEARCH_LOCK = threading.Lock()

# –°–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
active_clients = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ {account_name: client}
client_managers = {}  # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞

class MultiAccountManager:
    def __init__(self):
        self.clients = {}
        self.sessions_info = {}
    
    def load_available_accounts(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        sessions_dir = 'sessions'
        if not os.path.exists(sessions_dir):
            return []
        
        accounts = []
        for file in os.listdir(sessions_dir):
            if file.endswith('_info.json'):
                try:
                    account_name = file.replace('_info.json', '')
                    with open(f"{sessions_dir}/{file}", 'r', encoding='utf-8') as f:
                        info = json.load(f)
                    
                    session_file = f"{sessions_dir}/{info['session_file']}"
                    if os.path.exists(session_file):
                        accounts.append({
                            'account_name': account_name,
                            'info': info,
                            'session_path': session_file,
                            'is_active': account_name in self.clients
                        })
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {file}: {e}")
                    continue
        
        return accounts
    
    def activate_account(self, account_name):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        try:
            if account_name in self.clients:
                print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_name} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
                return True
            
            sessions_dir = 'sessions'
            info_file = f"{sessions_dir}/{account_name}_info.json"
            
            if not os.path.exists(info_file):
                print(f"‚ùå –§–∞–π–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ {info_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open(info_file, 'r', encoding='utf-8') as f:
                info = json.load(f)
            
            session_file = f"{sessions_dir}/{info['session_file']}"
            if not os.path.exists(session_file):
                print(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–∑–∂–µ
            session_path = session_file.replace('.session', '')
            
            self.clients[account_name] = {
                'session_path': session_path,
                'api_id': API_ID,
                'api_hash': API_HASH,
                'ready': True
            }
            self.sessions_info[account_name] = info
            
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_name} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {e}")
            return False
    
    def deactivate_account(self, account_name):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç"""
        try:
            if account_name in self.clients:
                del self.clients[account_name]
                if account_name in self.sessions_info:
                    del self.sessions_info[account_name]
                print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                return True
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {account_name}: {e}")
            return False
    
    def get_client(self, account_name):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if account_name not in self.clients:
            return None
        
        client_info = self.clients[account_name]
        if isinstance(client_info, dict) and 'session_path' in client_info:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω
            return Client(
                client_info['session_path'],
                api_id=client_info['api_id'],
                api_hash=client_info['api_hash']
            )
        
        return client_info
    
    def get_active_accounts(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        return list(self.clients.keys())

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
account_manager = MultiAccountManager()

def check_session_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è"""
    session_files = [f for f in os.listdir('.') if f.startswith('user_') and f.endswith('.session')]
    
    if session_files:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {session_files[0]}")
        return True
    else:
        print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ–±-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
REQUIRES_AUTH = not check_session_exists()
auth_sessions = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

def create_session_manually():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª"""
    print("\nüîê –°–û–ó–î–ê–ù–ò–ï –°–ï–°–°–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥ pyrogram –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    client = Client("user_local", api_id=API_ID, api_hash=API_HASH)
    
    # –≠—Ç–æ—Ç –∫–æ–¥ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∑–∞–ø—Ä–æ—Å–∏—Ç –Ω–æ–º–µ—Ä –∏ –∫–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
    with client:
        me = client.get_me()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name}")
        print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: user_local.session")
        
        return True



@app.route('/stop_search', methods=['POST'])
def stop_search():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    user_id = 'local_user'
    
    with SEARCH_LOCK:
        if user_id in ACTIVE_SEARCHES:
            ACTIVE_SEARCHES[user_id]['cancelled'] = True
            print(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return jsonify({'success': True, 'message': '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è...'})
        else:
            return jsonify({'success': False, 'message': '–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'})

def is_search_cancelled(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω –ª–∏ –ø–æ–∏—Å–∫"""
    with SEARCH_LOCK:
        return ACTIVE_SEARCHES.get(user_id, {}).get('cancelled', False)

def start_search_tracking(user_id):
    """–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
    with SEARCH_LOCK:
        ACTIVE_SEARCHES[user_id] = {'cancelled': False, 'start_time': time.time()}

def end_search_tracking(user_id):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
    with SEARCH_LOCK:
        if user_id in ACTIVE_SEARCHES:
            del ACTIVE_SEARCHES[user_id]


@app.route('/get_search_settings', methods=['GET'])
def get_search_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞"""
    return jsonify(SEARCH_SETTINGS)

@app.route('/update_search_settings', methods=['POST'])
def update_search_settings():
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞"""
    global SEARCH_SETTINGS
    data = request.json
    
    if 'messages_per_group' in data:
        SEARCH_SETTINGS['messages_per_group'] = min(int(data['messages_per_group']), 10000)
    
    return jsonify({'success': True, 'settings': SEARCH_SETTINGS})

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
executor = ThreadPoolExecutor(max_workers=1)
GEMINI_API_KEY = "AIzaSyDQsK1Y11VPyd_D6TpPhuqvsgc7GvYrwco"
search_history = {}
user_sessions = {}
sms_auth_sessions = {}  # –î–ª—è SMS –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

# API –¥–∞–Ω–Ω—ã–µ
API_ID = 29318340
API_HASH = "68be30e447857e5e5aa24c23a41c686d"
BOT_TOKEN = "8083238823:AAHgAcvKL7nf29zz66kGB3bL6QCSHOVXCRA"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
session_manager = SessionManager(API_ID, API_HASH)

# –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤
USER_LIMITS = {
    'search_limit': 17,
    'ai_analysis_limit': 7
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_usage = {}
# –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
broadcast_tasks = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
scheduler_thread = None  # –ü–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

# USDT –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã
USDT_WALLET = "TMB8QT6n55WFvzQgN5QNGZWHozt2PjjMJE"

# –£—Ç–∏–ª–∏—Ç—ã
def load_saved_api_keys():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ API –∫–ª—é—á–∏"""
    global API_ID, API_HASH
    try:
        if os.path.exists('config/api_keys.json'):
            with open('config/api_keys.json', 'r') as f:
                config = json.load(f)
            API_ID = config['API_ID']
            API_HASH = config['API_HASH']
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã API –∫–ª—é—á–∏: ID={API_ID}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_saved_api_keys()

def get_user_client(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å API –∫–ª—é—á–∞–º–∏"""
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª –∫–ª—é—á–µ–π
    keys_file = 'config/api_keys.json'
    
    if not os.path.exists(keys_file):
        return None
    
    try:
        with open(keys_file, 'r') as f:
            keys_data = json.load(f)
        
        api_id = keys_data['API_ID']
        api_hash = keys_data['API_HASH']
        
        return Client(f"user_local", api_id=api_id, api_hash=api_hash)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None

def check_user_limits(user_id, action_type):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_usage:
        user_usage[user_id] = {
            'searches_used': 0,
            'ai_analysis_used': 0,
            'is_premium': False
        }
    
    user_data = user_usage[user_id]
    
    if user_data['is_premium']:
        return True, "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if action_type == 'search':
        if user_data['searches_used'] >= USER_LIMITS['search_limit']:
            return False, f"–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤ ({USER_LIMITS['search_limit']})"
        return True, f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–∏—Å–∫–æ–≤: {USER_LIMITS['search_limit'] - user_data['searches_used']}"
    
    elif action_type == 'ai_analysis':
        if user_data['ai_analysis_used'] >= USER_LIMITS['ai_analysis_limit']:
            return False, f"–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç AI –∞–Ω–∞–ª–∏–∑–æ–≤ ({USER_LIMITS['ai_analysis_limit']})"
        return True, f"–û—Å—Ç–∞–ª–æ—Å—å AI –∞–Ω–∞–ª–∏–∑–æ–≤: {USER_LIMITS['ai_analysis_limit'] - user_data['ai_analysis_used']}"
    
    return True, "OK"

def increment_usage(user_id, action_type):
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    if user_id not in user_usage:
        user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': False}
    
    if action_type == 'search':
        user_usage[user_id]['searches_used'] += 1
    elif action_type == 'ai_analysis':
        user_usage[user_id]['ai_analysis_used'] += 1

def verify_telegram_auth(auth_data, bot_token):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {auth_data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['id', 'first_name', 'auth_date']
    for field in required_fields:
        if field not in auth_data:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
            return False
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ (–æ—Ç–ª–∞–¥–∫–∞)")
    return True

def is_user_account_connected(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    keys_file = 'config/api_keys.json'
    return os.path.exists(keys_file)

@app.route('/')
def index():
    if REQUIRES_AUTH:
        return render_template('bot_auth.html')  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    else:
        return render_template('dashboard.html')  # –û–±—ã—á–Ω—ã–π –¥–∞—à–±–æ—Ä–¥


@app.route('/get_telegram_user_info', methods=['GET'])
def get_telegram_user_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = {
        'first_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'last_name': '',
        'username': 'local_user',
        'user_id': 'local',
        'has_photo': False,
        'avatar_data': None
    }
    
    return jsonify({
        'success': True,
        'user_info': user_info
    })



@app.route('/get_groups', methods=['GET'])
def get_groups():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 'local_user'
    
    if not is_user_account_connected(user_id):
        return jsonify({'error': '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏'}), 403
    
    try:
        def run_get_groups():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                user_client = get_user_client(user_id)
                if not user_client:
                    return []
                
                groups = loop.run_until_complete(get_user_groups_real(user_client))
                return groups
            finally:
                loop.close()
        
        future = executor.submit(run_get_groups)
        groups = future.result(timeout=60)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(groups)} —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø")
        
        return jsonify({
            'success': True,
            'groups': groups
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
@app.route('/search', methods=['POST'])
def search():
    """API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    user_id = 'local_user'
    
    if not is_user_account_connected(user_id):
        return jsonify({'error': '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏'}), 403
    
    keyword = request.json.get('keyword', '').strip()
    selected_groups = request.json.get('selected_groups', [])
    search_depth = request.json.get('search_depth', 500)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 500
    print(f"üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞: {search_depth} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –≥—Ä—É–ø–ø—É")
    
    if not keyword or not selected_groups:
        return jsonify({'error': '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã'}), 400
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    start_search_tracking(user_id)
    
    try:
        def run_search():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                user_client = get_user_client(user_id)
                if not user_client:
                    return []
                
                results = loop.run_until_complete(search_in_selected_groups_real(user_client, keyword, selected_groups, search_depth, user_id))
                return results
            finally:
                loop.close()
        
        future = executor.submit(run_search)
        results = future.result(timeout=300)  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–∏—Å–∫
        if is_search_cancelled(user_id):
            end_search_tracking(user_id)
            return jsonify({'error': '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'cancelled': True})
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if user_id not in user_usage:
            user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': True}
        user_usage[user_id]['searches_used'] += 1
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è '{keyword}'")
        
        end_search_tracking(user_id)
        return jsonify({
            'success': True,
            'results': results,
            'total': len(results)
        })
        
    except Exception as e:
        end_search_tracking(user_id)
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}'}), 500
    
# –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
    
    keyword = request.json.get('keyword', '').strip()
    selected_groups = request.json.get('selected_groups', [])
    
    if not keyword:
        return jsonify({'error': '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'}), 400
    
    if not selected_groups:
        return jsonify({'error': '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞'}), 400
    
    try:
            def run_search():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    user_client = get_user_client(user_id)
                    if not user_client:
                        return []
                    
                    results = loop.run_until_complete(search_in_selected_groups_real(user_client, keyword, selected_groups))
                    return results
                finally:
                    loop.close()
            
            future = executor.submit(run_search)
            results = future.result(timeout=120)
            
            increment_usage(user_id, 'search')
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è '{keyword}'")
            
            return jsonify({
                'success': True,
                'results': results,
                'total': len(results)
            })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}'}), 500

@app.route('/save_search', methods=['POST'])
def save_search():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    user_id = 'local_user'
    
    try:
        data = request.json
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'}), 400
        
        search_record = {
            'id': len(search_history.get(user_id, [])) + 1,
            'keywords': data.get('keywords', []),
            'results_count': data.get('results_count', 0),
            'groups_count': data.get('groups_count', 0),
            'date': datetime.now().strftime("%d.%m.%Y %H:%M"),
            'results': data.get('results', [])[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        }
        
        if user_id not in search_history:
            search_history[user_id] = []
        
        search_history[user_id].insert(0, search_record)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 50 –∑–∞–ø–∏—Å—è–º–∏
        if len(search_history[user_id]) > 50:
            search_history[user_id] = search_history[user_id][:50]
        
        print(f"‚úÖ –ü–æ–∏—Å–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return jsonify({'success': True, 'message': '–ü–æ–∏—Å–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é'})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}'}), 500

@app.route('/get_history', methods=['GET'])
def get_history():
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 'local_user'
    history = search_history.get(user_id, [])
    
    return jsonify({
        'success': True,
        'history': history
    })

@app.route('/delete_search/<int:search_id>', methods=['DELETE'])
def delete_search(search_id):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–∏—Å–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    user_id = 'local_user'
    if user_id in search_history:
        search_history[user_id] = [s for s in search_history[user_id] if s['id'] != search_id]
    
    return jsonify({'success': True})

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–∏–º–∏—Ç—ã
@app.route('/get_user_stats', methods=['GET'])
def get_user_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    user_id = 'local_user'
    
    if user_id not in user_usage:
        user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': True}
    
    user_data = user_usage[user_id]
    
    return jsonify({
        'searches_used': user_data['searches_used'],
        'searches_remaining': 999,  # –ë–µ–∑–ª–∏–º–∏—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        'ai_analysis_used': user_data['ai_analysis_used'],
        'ai_analysis_remaining': 999,  # –ë–µ–∑–ª–∏–º–∏—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        'is_premium': True,  # –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–º–∏—É–º
        'usdt_wallet': USDT_WALLET
    })

# AI –∞–Ω–∞–ª–∏–∑
@app.route('/analyze_with_ai', methods=['POST'])
def analyze_with_ai():
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 'local_user'
    
    data = request.json
    messages = data.get('messages', [])
    custom_prompt = data.get('custom_prompt', '').strip()  # ‚Üê –ü–û–õ–£–ß–ê–ï–ú –ö–ê–°–¢–û–ú–ù–´–ô –ü–†–û–ú–ü–¢

    print(f"üéØ –ü–æ–ª—É—á–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{custom_prompt}'")
    
    if not messages:
        return jsonify({'error': '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}), 400
    
    print(f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    try:
        potential_clients = analyze_messages_for_needs(messages, custom_prompt)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if user_id not in user_usage:
            user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': True}
        user_usage[user_id]['ai_analysis_used'] += 1
        
        return jsonify({
            'success': True,
            'potential_clients': potential_clients,
            'analyzed_count': len(messages)
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}), 500

def analyze_messages_for_needs(messages, custom_prompt=''):
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini API"""
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        messages_text = ""
        for i, msg in enumerate(messages, 1):
            messages_text += f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}:\n"
            messages_text += f"–ê–≤—Ç–æ—Ä: @{msg.get('author', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            messages_text += f"–ì—Ä—É–ø–ø–∞: {msg.get('chat', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            messages_text += f"–î–∞—Ç–∞: {msg.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            messages_text += f"–¢–µ–∫—Å—Ç: {msg.get('text', '')}\n"
            messages_text += "---\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ –±–∞–∑–æ–≤—ã–π
        if custom_prompt:
            user_instruction = custom_prompt
            print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {custom_prompt}")
        else:
            user_instruction = "–Ω–∞–π–¥–∏ —Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–¥–µ –ª—é–¥–∏ –≤—ã—Ä–∞–∂–∞—é—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏—â—É—Ç —É—Å–ª—É–≥–∏"
            print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")

        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –≥—Ä—É–ø–ø –∏ {user_instruction}.

        {messages_text}

        –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
        [
        {{
            "message_number": 1,
            "original_message": "–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
            "client_need": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ —á—Ç–æ –∏—â–µ—Ç —á–µ–ª–æ–≤–µ–∫",
            "author": "@username",
            "group": "–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", 
            "date": "–¥–∞—Ç–∞",
            "confidence": "–≤—ã—Å–æ–∫–∞—è"
        }}
        ]

        –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞: {user_instruction}

        –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –≤–µ—Ä–Ω–∏: []"""

        response = model.generate_content(prompt)
        ai_response = response.text.strip()
        
        if ai_response.startswith('```json'):
            ai_response = ai_response.replace('```json', '').replace('```', '').strip()
        elif ai_response.startswith('```'):
            ai_response = ai_response.split('\n', 1)[1]
            if ai_response.endswith('```'):
                ai_response = ai_response.rsplit('\n', 1)[0]
        
        potential_clients = json.loads(ai_response)
        print(f"Gemini –Ω–∞—à–µ–ª {len(potential_clients)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return potential_clients
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
        return []

# –ü–ª–∞—Ç–µ–∂–∏
@app.route('/check_payment', methods=['POST'])
def check_payment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if 'user_id' not in session:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    user_id = session['user_id']
    
    try:
        payment_found, payment_info = check_tron_usdt_payment(USDT_WALLET, amount_usdt=10)
        
        if payment_found:
            if user_id not in user_usage:
                user_usage[user_id] = {'searches_used': 0, 'ai_analysis_used': 0, 'is_premium': False}
            
            user_usage[user_id]['is_premium'] = True
            
            return jsonify({
                'success': True,
                'message': '–ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                'payment_info': payment_info
            })
        else:
            return jsonify({
                'success': False,
                'message': payment_info
            })
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'}), 500




@app.route('/check_api_keys', methods=['GET'])
def check_api_keys():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–∏ API –∫–ª—é—á–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        if os.path.exists('config/api_keys.json'):
            with open('config/api_keys.json', 'r') as f:
                config = json.load(f)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
            return jsonify({
                'has_keys': True, 
                'api_id': str(config.get('API_ID', '')),
                'api_hash_masked': config.get('API_HASH', '')[:10] + '...' if config.get('API_HASH') else '',
                'has_hash': bool(config.get('API_HASH'))
            })
        
        return jsonify({'has_keys': False})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π: {e}")
        return jsonify({'has_keys': False})

@app.route('/save_api_keys_local', methods=['POST'])
def save_api_keys_local():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç API –∫–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    data = request.json
    api_id = data.get('api_id', '').strip()
    api_hash = data.get('api_hash', '').strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è API ID (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    if not api_id:
        return jsonify({'error': '–í–≤–µ–¥–∏—Ç–µ API ID'}), 400
    
    if not api_id.isdigit():
        return jsonify({'error': 'API ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'}), 400
    
    try:
        global API_ID, API_HASH
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        existing_config = {}
        if os.path.exists('config/api_keys.json'):
            with open('config/api_keys.json', 'r') as f:
                existing_config = json.load(f)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º API ID
        API_ID = int(api_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º API Hash —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
        if api_hash:
            if len(api_hash) < 32:
                return jsonify({'error': 'API Hash —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π'}), 400
            API_HASH = api_hash
        else:
            # –ï—Å–ª–∏ API Hash –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            API_HASH = existing_config.get('API_HASH', API_HASH)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            'API_ID': API_ID,
            'API_HASH': API_HASH,
            'updated_at': time.time()
        }
        
        os.makedirs('config', exist_ok=True)
        with open('config/api_keys.json', 'w') as f:
            json.dump(config, f, indent=2)
        
        print(f"‚úÖ API –∫–ª—é—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ID={API_ID}, Hash={'–æ–±–Ω–æ–≤–ª–µ–Ω' if api_hash else '–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–µ–∂–Ω–∏–π'}")
        
        return jsonify({
            'success': True,
            'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
            'updated_hash': bool(api_hash)
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}'}), 500

@app.route('/help')
def help_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø—Ä–∞–≤–∫–∏"""
    return render_template('help.html')

from flask import Response
import json

@app.route('/search_progressive', methods=['POST'])
def search_progressive():
    """–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    user_id = 'local_user'
    
    if not is_user_account_connected(user_id):
        return jsonify({'error': '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏'}), 403
    
    keyword = request.json.get('keyword', '').strip()
    selected_groups = request.json.get('selected_groups', [])
    
    if not keyword or not selected_groups:
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'}), 400
    
    def generate_search_stream():
        try:
            def run_progressive_search():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    user_client = get_user_client(user_id)
                    if not user_client:
                        return
                    
                    loop.run_until_complete(search_with_progress(user_client, keyword, selected_groups, yield_progress))
                finally:
                    loop.close()
            
            def yield_progress(data):
                yield f"data: {json.dumps(data)}\n\n"
            
            global progress_generator
            progress_generator = None
            
            future = executor.submit(run_progressive_search)
            future.result(timeout=300)  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            
        except Exception as e:
            yield f"data: {json.dumps({'type': 'error', 'error': str(e)})}\n\n"
    
    return Response(
        generate_search_stream(),
        mimetype='text/plain',
        headers={
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive',
        }
    )

progress_generator = None

async def search_with_progress(client, keyword, selected_group_ids, yield_func):
    """–ü–æ–∏—Å–∫ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    global progress_generator
    
    try:
        await client.start()
        await asyncio.sleep(2)
        
        keywords = [word.strip().lower() for word in keyword.split() if word.strip()]
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        chat_groups = []
        async for dialog in client.get_dialogs():
            chat = dialog.chat
            if (chat.type.name in ["GROUP", "SUPERGROUP"] and 
                str(chat.id) in selected_group_ids):
                chat_groups.append(chat)
        
        total_groups = len(chat_groups)
        total_found = 0
        
        for i, chat in enumerate(chat_groups, 1):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø—ã
                progress_data = {
                    'type': 'group_start',
                    'group_name': chat.title,
                    'current_group': i,
                    'total_groups': total_groups
                }
                yield f"data: {json.dumps(progress_data)}\n\n"
                
                group_messages = []
                message_count = 0
                
                async for message in client.get_chat_history(chat.id, limit=200):
                    if message.text:
                        message_text = message.text.lower()
                        matched_words = [word for word in keywords if word in message_text]
                        
                        found_messages.append({
                            'text': message.text,
                            'author': message.from_user.username if message.from_user and message.from_user.username else "–ê–Ω–æ–Ω–∏–º",
                            'chat': chat.title,
                            'date': message.date.strftime("%d.%m.%Y %H:%M"),
                            'date_timestamp': message.date.timestamp(),
                            'matched_words': matched_words,
                            'message_id': message.id,        # ‚Üê ID —Å–æ–æ–±—â–µ–Ω–∏—è
                            'chat_id': chat.id,             # ‚Üê ID —á–∞—Ç–∞
                            'chat_username': getattr(chat, 'username', None)  # ‚Üê Username —á–∞—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                        })
                        
                        # –î–ï–¢–ê–õ–¨–ù–´–ô –õ–û–ì –ö–ê–ñ–î–û–ì–û –ù–ê–ô–î–ï–ù–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
                        print(f"  ‚úÖ –ù–ê–ô–î–ï–ù–û: '{message.text[:50]}...' –æ—Ç @{message.from_user.username if message.from_user and message.from_user.username else '–ê–Ω–æ–Ω–∏–º'} –≤ {message.date.strftime('%d.%m %H:%M')}")
                        print(f"      –°–ª–æ–≤–∞: {matched_words}")
                        total_found += 1
                        
                        message_count += 1
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                        if message_count % 10 == 0:
                            progress_data = {
                                'type': 'progress',
                                'current_group': i,
                                'total_groups': total_groups,
                                'total_found': total_found,
                                'group_messages': message_count
                            }
                            yield f"data: {json.dumps(progress_data)}\n\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø—ã
                if group_messages:
                    results_data = {
                        'type': 'results',
                        'messages': group_messages,
                        'group': chat.title
                    }
                    yield f"data: {json.dumps(results_data)}\n\n"
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≥—Ä—É–ø–ø—ã
                progress_data = {
                    'type': 'progress',
                    'current_group': i,
                    'total_groups': total_groups,
                    'total_found': total_found
                }
                yield f"data: {json.dumps(progress_data)}\n\n"
                
                await asyncio.sleep(0.5)
                
            except Exception as e:
                error_data = {
                    'type': 'error',
                    'error': f"–û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {chat.title}: {str(e)}"
                }
                yield f"data: {json.dumps(error_data)}\n\n"
                continue
        
        await client.stop()
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        final_data = {
            'type': 'complete',
            'total_found': total_found
        }
        yield f"data: {json.dumps(final_data)}\n\n"
        
    except Exception as e:
        error_data = {
            'type': 'error',
            'error': str(e)
        }
        yield f"data: {json.dumps(error_data)}\n\n"

def check_tron_usdt_payment(wallet_address, amount_usdt=10, hours_back=24):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ USDT TRC-20 –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ TronScan API"""
    try:
        url = "https://apilist.tronscan.org/api/token_trc20/transfers"
        params = {
            'limit': 50,
            'start': 0,
            'toAddress': wallet_address,
            'contract_address': 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'
        }
        
        response = requests.get(url, params=params, timeout=10)
        if response.status_code != 200:
            return False, "–û—à–∏–±–∫–∞ API TronScan"
        
        data = response.json()
        transfers = data.get('token_transfers', [])
        
        cutoff_time = datetime.now() - timedelta(hours=hours_back)
        
        for transfer in transfers:
            transfer_amount = float(transfer['quant']) / 1000000
            transfer_time = datetime.fromtimestamp(transfer['block_ts'] / 1000)
            
            if (transfer_amount >= amount_usdt and transfer_time > cutoff_time):
                return True, {
                    'hash': transfer['transaction_id'],
                    'amount': transfer_amount,
                    'time': transfer_time.strftime('%d.%m.%Y %H:%M'),
                    'from_address': transfer['from_address']
                }
        
        return False, "–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

async def get_user_groups_real(client):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await client.start()
        
        groups = []
        processed_count = 0
        
        print("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        await asyncio.sleep(2)
        
        async for dialog in client.get_dialogs():
            chat = dialog.chat
            
            if chat.type.name in ["GROUP", "SUPERGROUP"]:
                try:
                    groups.append({
                        'id': str(chat.id),
                        'title': chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                        'type': chat.type.name,
                        'members_count': getattr(chat, 'members_count', 0),
                        'status': '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞'
                    })
                    
                    processed_count += 1
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {chat.title}")
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
                    if processed_count % 3 == 0:
                        await asyncio.sleep(2)
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {chat.title}: {e}")
                    continue
        
        await client.stop()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        groups.sort(key=lambda x: x.get('members_count', 0), reverse=True)
        
        print(f"‚úÖ –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø")
        return groups
        
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
        if "BadMsgNotification" in str(e) or "msg_id is too low" in str(e):
            print("‚ö†Ô∏è –û–®–ò–ë–ö–ê –í–†–ï–ú–ï–ù–ò: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ!")
            print("Windows: w32tm /resync")
            print("Mac: sudo sntp -sS time.apple.com") 
            print("Linux: sudo ntpdate -s time.nist.gov")
        return []

async def search_in_selected_groups_real(client, keyword, selected_group_ids, search_depth=500, user_id='local_user'):
    """–†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    try:
        await client.start()
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –≤ –Ω–∞—á–∞–ª–µ
        if is_search_cancelled(user_id):
            print("üõë –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –≤ –Ω–∞—á–∞–ª–µ")
            await client.stop()
            return []
        
        keywords = [word.strip().lower() for word in keyword.split() if word.strip()]
        
        if not keywords:
            print("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return []
        
        print(f"üîç –ü–æ–∏—Å–∫ —Å–ª–æ–≤: {keywords}")
        print(f"üìÇ –í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö: {len(selected_group_ids)}")
        print(f"üìú –ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞: {search_depth} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –≥—Ä—É–ø–ø—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        chat_groups = []
        print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...")
        
        async for dialog in client.get_dialogs():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø
            if is_search_cancelled(user_id):
                print("üõë –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø")
                await client.stop()
                return []
                
            chat = dialog.chat
            if (chat.type.name in ["GROUP", "SUPERGROUP"] and 
                str(chat.id) in selected_group_ids):
                chat_groups.append(chat)
                print(f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {chat.title}")
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chat_groups)} –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–∏—Å–∫–∞")
        
        if not chat_groups:
            print("‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–∏—Å–∫–∞!")
            return []
        
        found_messages = []
        
        for i, chat in enumerate(chat_groups, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–æ–π
            if is_search_cancelled(user_id):
                print(f"üõë –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –Ω–∞ –≥—Ä—É–ø–ø–µ {i}/{len(chat_groups)}")
                break
                
            try:
                print(f"[{i}/{len(chat_groups)}] üîç –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ –≤: {chat.title}")
                
                message_count = 0
                chat_found = 0
                processed_batches = 0
                
                # –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
                async for message in client.get_chat_history(chat.id, limit=search_depth):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if message_count % 100 == 0 and is_search_cancelled(user_id):
                        print(f"üõë –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {chat.title} –ø–æ—Å–ª–µ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                        await client.stop()
                        return found_messages  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ —á—Ç–æ —É–∂–µ –Ω–∞—à–ª–∏
                    
                    if message.text:
                        message_text = message.text.lower()
                        
                        # –î–ï–¢–ê–õ–¨–ù–´–ô –õ–û–ì –ö–ê–ñ–î–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
                        if message_count < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            print(f"    –°–æ–æ–±—â–µ–Ω–∏–µ {message_count+1}: '{message.text[:30]}...' –æ—Ç {message.date.strftime('%d.%m %H:%M')}")
                            print(f"    –ò—â–µ–º —Å–ª–æ–≤–∞ {keywords} –≤ —Ç–µ–∫—Å—Ç–µ...")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        matched_words = [word for word in keywords if word in message_text]
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "—Ä–æ–∂–∏—â–µ" –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                        if any('—Ä–æ–∂–∏—â–µ' in keyword.lower() for keyword in keywords):
                            if '—Ä–æ–∂–∏—â–µ' in message_text:
                                print(f"    üéØ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: '{message.text[:50]}...'")
                                print(f"    –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
                                print(f"    –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (lower): '{message_text[:50]}...'")
                        
                    if matched_words:
                        found_messages.append({
                            'text': message.text,
                            'author': message.from_user.username if message.from_user and message.from_user.username else "–ê–Ω–æ–Ω–∏–º",
                            'chat': chat.title,
                            'date': message.date.strftime("%d.%m.%Y %H:%M"),
                            'date_timestamp': message.date.timestamp(),
                            'matched_words': matched_words,
                            'message_id': message.id,
                            'chat_id': chat.id,
                            'chat_username': getattr(chat, 'username', None)
                        })
                        chat_found += 1
                            
                        message_count += 1
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500 —Å–æ–æ–±—â–µ–Ω–∏–π
                        if message_count % SEARCH_SETTINGS['batch_size'] == 0:
                            processed_batches += 1
                            print(f"  üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {message_count}/{SEARCH_SETTINGS['messages_per_group']} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ: {chat_found}")
                            await asyncio.sleep(0.3)
                
                group_matches = [m for m in found_messages if m['chat'] == chat.title]
                print(f"  üìù –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(group_matches)}")
                if len(group_matches) > 0:
                    print(f"      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ: {group_matches[-1]['date']}")
                                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                await asyncio.sleep(SEARCH_SETTINGS['pause_between_groups'])
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {chat.title}: {e}")
                await asyncio.sleep(5)
                continue
        
        await client.stop()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
        if is_search_cancelled(user_id):
            print("üõë –ü–æ–∏—Å–∫ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ - —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Å–≤–µ—Ä—Ö—É
        found_messages.sort(key=lambda msg: msg['date_timestamp'], reverse=True)

        # –ü–†–û–í–ï–†–Ø–ï–ú –°–û–†–¢–ò–†–û–í–ö–£
        print(f"üîç –ü–†–û–í–ï–†–ö–ê –°–û–†–¢–ò–†–û–í–ö–ò:")
        for i, msg in enumerate(found_messages[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  {i+1}. {msg['date']} - timestamp: {msg['date_timestamp']}")

        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ timestamp, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è  
        for msg in found_messages:
            if 'date_timestamp' in msg:
                del msg['date_timestamp']

        print(f"üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:")
        if found_messages:
            first_msg = found_messages[0]
            print(f"  message_id: {first_msg.get('message_id', '–ù–ï–¢')}")
            print(f"  chat_id: {first_msg.get('chat_id', '–ù–ï–¢')}")
            print(f"  chat_username: {first_msg.get('chat_username', '–ù–ï–¢')}")
            
        print(f"üéâ –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ: {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        print(f"üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {min(len(found_messages), SEARCH_SETTINGS['max_results'])} –∏–∑ {len(found_messages)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ timestamp –≤—ã—à–µ)
        return found_messages[:SEARCH_SETTINGS['max_results']]
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []

@app.route('/schedule_broadcast', methods=['POST'])
def schedule_broadcast():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = 'local_user'
    
    data = request.json
    message = data.get('message', '').strip()
    groups = data.get('groups', [])
    date = data.get('date', '')
    time = data.get('time', '')
    repeat = data.get('repeat', 'once')
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not message:
        return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
    
    if not groups:
        return jsonify({'error': '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏'}), 400
    
    if not date or not time:
        return jsonify({'error': '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è'}), 400
    
    try:
        # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç
        scheduled_datetime = datetime.strptime(f"{date} {time}", "%Y-%m-%d %H:%M")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if scheduled_datetime <= datetime.now():
            return jsonify({'error': '–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º'}), 400
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
        task_id = str(uuid.uuid4())[:8]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        task_info = {
            'id': task_id,
            'message': message,
            'groups': groups,
            'scheduled_time': scheduled_datetime,
            'repeat': repeat,
            'status': 'scheduled',
            'created_at': datetime.now(),
            'user_id': user_id
        }
        
        broadcast_tasks[task_id] = task_info
        
        print(f"üì§ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:")
        print(f"  ID: {task_id}")
        print(f"  –í—Ä–µ–º—è: {scheduled_datetime}")
        print(f"  –ì—Ä—É–ø–ø: {len(groups)}")
        print(f"  –ü–æ–≤—Ç–æ—Ä: {repeat}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        start_scheduler()
        
        return jsonify({
            'success': True,
            'task_id': task_id,
            'task_info': {
                'scheduled_time': scheduled_datetime.strftime('%d.%m.%Y %H:%M'),
                'groups_count': len(groups),
                'repeat_text': get_repeat_text(repeat)
            }
        })
        
    except ValueError as e:
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏'}), 400
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}'}), 500

@app.route('/get_account_info', methods=['GET'])
def get_account_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ
        if os.path.exists('current_account.json'):
            with open('current_account.json', 'r', encoding='utf-8') as f:
                account_info = json.load(f)
            
            user_info = account_info['user_info']
            return jsonify({
                'success': True,
                'account_name': f"{user_info['first_name']} {user_info['last_name']}".strip(),
                'phone': user_info['phone'],
                'username': user_info['username'],
                'user_id': user_info['id']
            })
        
        # –ï—Å–ª–∏ –Ω–µ—Ç current_account.json, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        def run_get_account():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                return loop.run_until_complete(get_current_account_info())
            finally:
                loop.close()
        
        future = executor.submit(run_get_account)
        account_info = future.result(timeout=30)
        
        if account_info:
            return jsonify({
                'success': True,
                'account_name': f"{account_info['first_name']} {account_info['last_name']}".strip(),
                'phone': account_info['phone'],
                'username': account_info['username'],
                'user_id': account_info['user_id']
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞: {str(e)}'
        })

def get_repeat_text(repeat):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    repeat_texts = {
        'once': '–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ',
        'daily': '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å',
        'weekly': '–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é',
        'monthly': '–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü'
    }
    return repeat_texts.get(repeat, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

def start_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    global scheduler_thread
    
    if scheduler_thread is None or not scheduler_thread.is_alive():
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω")

def run_scheduler():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    while True:
        try:
            check_broadcast_tasks()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            time.sleep(60)

def check_broadcast_tasks():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
    now = datetime.now()
    
    for task_id, task in list(broadcast_tasks.items()):
        if task['status'] == 'scheduled' and task['scheduled_time'] <= now:
            print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {task_id}")
            execute_broadcast_task(task)

def execute_broadcast_task(task):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    try:
        task['status'] = 'executing'
        user_id = task.get('user_id', 'local_user')
        
        print(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {task['id']}")
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {task['message'][:100]}...")
        print(f"üìÇ –ì—Ä—É–ø–ø: {len(task['groups'])}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_broadcast():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                user_client = get_user_client(user_id)
                if not user_client:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                
                result = loop.run_until_complete(send_broadcast_messages(
                    user_client, 
                    task['message'], 
                    task['groups']
                ))
                
                task['sent_count'] = result['sent']
                task['failed_count'] = result['failed']
                task['status'] = 'completed'
                task['completed_at'] = datetime.now()
                
                print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ {task['id']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {result['sent']}, –æ—à–∏–±–æ–∫ {result['failed']}")
                
            except Exception as e:
                task['status'] = 'failed'
                task['error'] = str(e)
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ {task['id']}: {e}")
            finally:
                loop.close()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        broadcast_thread = threading.Thread(target=run_broadcast, daemon=True)
        broadcast_thread.start()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if task['repeat'] != 'once':
            schedule_next_repeat(task)
            
    except Exception as e:
        task['status'] = 'failed'
        task['error'] = str(e)
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ {task['id']}: {e}")

@app.route('/get_broadcast_tasks', methods=['GET'])
def get_broadcast_tasks():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        tasks_list = []
        
        for task_id, task in broadcast_tasks.items():
            task_info = {
                'id': task_id,
                'message_preview': task['message'][:50] + '...' if len(task['message']) > 50 else task['message'],
                'groups_count': len(task['groups']),
                'scheduled_time': task['scheduled_time'].strftime('%d.%m.%Y %H:%M'),
                'status': task['status'],
                'repeat': get_repeat_text(task['repeat']),
                'created_at': task['created_at'].strftime('%d.%m.%Y %H:%M')
            }
            
            if task['status'] == 'completed':
                task_info['sent_count'] = task.get('sent_count', 0)
                task_info['failed_count'] = task.get('failed_count', 0)
                task_info['completed_at'] = task['completed_at'].strftime('%d.%m.%Y %H:%M')
            
            if task['status'] == 'failed':
                task_info['error'] = task.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            
            tasks_list.append(task_info)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        tasks_list.sort(key=lambda x: x['created_at'], reverse=True)
        
        return jsonify({
            'success': True,
            'tasks': tasks_list
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞: {str(e)}'
        })

async def send_broadcast_messages(client, message, group_ids):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã"""
    try:
        await client.start()
        
        sent_count = 0
        failed_count = 0
        errors = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
        available_groups = {}
        async for dialog in client.get_dialogs():
            chat = dialog.chat
            if chat.type.name in ["GROUP", "SUPERGROUP"]:
                available_groups[str(chat.id)] = chat
        
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø: {len(available_groups)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for group_id in group_ids:
            if group_id in available_groups:
                chat = available_groups[group_id]
                
                try:
                    print(f"üì§ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤: {chat.title}")
                    
                    # –ü–†–û–°–¢–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ë–ï–ó –ü–†–û–í–ï–†–û–ö
                    await client.send_message(chat.id, message)
                    sent_count += 1
                    
                    print(f"‚úÖ –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat.title}")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    failed_count += 1
                    error_msg = str(e)
                    
                    # –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                    if "CHAT_WRITE_FORBIDDEN" in error_msg:
                        error_msg = "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
                    elif "USER_BANNED_IN_CHANNEL" in error_msg:
                        error_msg = "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ"
                    elif "SLOWMODE_WAIT" in error_msg:
                        error_msg = "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"
                    elif "CHAT_ADMIN_REQUIRED" in error_msg:
                        error_msg = "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                    
                    errors.append(f"{chat.title}: {error_msg}")
                    print(f"‚ùå {chat.title}: {error_msg}")
                    
                    await asyncio.sleep(1)
            else:
                failed_count += 1
                print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö")
        
        await client.stop()
        
        print(f"üìä –ò–¢–û–ì–û: ‚úÖ {sent_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ‚ùå {failed_count} –æ—à–∏–±–æ–∫")
        
        return {
            'sent': sent_count,
            'failed': failed_count,
            'errors': errors
        }
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        return {
            'sent': 0,
            'failed': len(group_ids),
            'errors': [f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"]
        }

async def check_can_send_messages(client, chat):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        chat_full = await client.get_chat(chat.id)
        
        # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if chat.type.name == "CHANNEL":
            return False  # –í –∫–∞–Ω–∞–ª—ã –æ–±—ã—á–Ω–æ –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å
        
        # –î–ª—è –≥—Ä—É–ø–ø –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        await client.send_chat_action(chat.id, "typing")
        return True
        
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –¥–∞–∂–µ typing –æ—Ç–ø—Ä–∞–≤–∏—Ç—å - –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç –ø—Ä–∞–≤
        return False

def schedule_next_repeat(task):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á"""
    try:
        next_time = task['scheduled_time']
        
        if task['repeat'] == 'daily':
            next_time += timedelta(days=1)
        elif task['repeat'] == 'weekly':
            next_time += timedelta(weeks=1)
        elif task['repeat'] == 'monthly':
            next_time += timedelta(days=30)  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        new_task_id = str(uuid.uuid4())[:8]
        new_task = task.copy()
        new_task['id'] = new_task_id
        new_task['scheduled_time'] = next_time
        new_task['status'] = 'scheduled'
        
        broadcast_tasks[new_task_id] = new_task
        
        print(f"üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ {next_time}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–∞: {e}")

async def get_current_account_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
    try:
        client = get_user_client('local_user')
        if not client:
            return None
            
        await client.start()
        me = await client.get_me()
        await client.stop()
        
        return {
            'first_name': me.first_name or '',
            'last_name': me.last_name or '',
            'username': me.username or '',
            'phone': me.phone_number or '',
            'user_id': str(me.id)
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return None

@app.route('/web_auth_send_code', methods=['POST'])
def web_auth_send_code():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±"""
    try:
        data = request.json
        phone = data.get('phone', '').strip()
        
        if not phone:
            return jsonify({'error': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}), 400
        
        if not phone.startswith('+'):
            return jsonify({'error': '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +'}), 400
        
        print(f"üì± –í–µ–±-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ {phone}")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
        session_id = str(uuid.uuid4())[:8]
        
        def run_send_code():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                temp_client = Client(f"temp_{session_id}", api_id=API_ID, api_hash=API_HASH)
                
                async def send_code():
                    await temp_client.connect()
                    sent_code = await temp_client.send_code(phone)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                    auth_sessions[session_id] = {
                        'phone': phone,
                        'phone_code_hash': sent_code.phone_code_hash,
                        'created_at': datetime.now()
                    }
                    
                    # –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç, –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è sign_in
                    return sent_code
                
                result = loop.run_until_complete(send_code())
                print(f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}, —Å–µ—Å—Å–∏—è {session_id}")
                
                return {'success': True, 'session_id': session_id}
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
                return {'success': False, 'error': str(e)}
            finally:
                loop.close()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        future = executor.submit(run_send_code)
        result = future.result(timeout=60)
        
        if result['success']:
            return jsonify({
                'success': True,
                'session_id': result['session_id'],
                'message': '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
            })
        else:
            return jsonify({'error': result['error']}), 400
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/web_auth_verify_code', methods=['POST'])
def web_auth_verify_code():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±"""
    try:
        data = request.json
        phone = data.get('phone', '').strip()
        code = data.get('code', '').strip()
        
        if not phone or not code:
            return jsonify({'error': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–¥'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
        if not code:
            return jsonify({'error': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥'}), 400

        # –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç –±—É–∫–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–µ—Ç—Å—è 5 —Ü–∏—Ñ—Ä
        # –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±—É–∫–≤
        clean_code = ''.join(filter(str.isdigit, code.replace(' ', '')))
        if len(clean_code) != 5:
            return jsonify({'error': '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 —Ü–∏—Ñ—Ä (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –±—É–∫–≤—ã –º–µ–∂–¥—É –Ω–∏–º–∏)'}), 400

        print(f"üîß –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: '{code}', –æ—á–∏—â–µ–Ω–Ω—ã–π: '{clean_code}'")
        
        print(f"üîê –í–µ–±-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –¥–ª—è {phone}")
        
        # –ò—â–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        session_id = None
        for sid, session_data in auth_sessions.items():
            if session_data.get('phone') == phone:
                session_id = sid
                break
        
        if not session_id:
            return jsonify({'error': '–°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ'}), 400
        
        def run_verify_code():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                session_data = auth_sessions[session_id]

                
                print(f"üîß –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: '{code}', –æ—á–∏—â–µ–Ω–Ω—ã–π: '{clean_code}'")
                
                temp_client = Client(f"temp_{session_id}", api_id=API_ID, api_hash=API_HASH)
                
                async def verify_code():
                    try:
                        await temp_client.connect()
                        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–ß–ò–©–ï–ù–ù–´–ô –ö–û–î
                        await temp_client.sign_in(phone, session_data['phone_code_hash'], clean_code)
                        
                        me = await temp_client.get_me()
                        await temp_client.disconnect()
                        return me
                        
                    except Exception as e:
                        await temp_client.disconnect()
                        raise e
                
                me = loop.run_until_complete(verify_code())
                
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                import shutil
                temp_session = f"temp_{session_id}.session"
                permanent_session = "user_local.session"
                
                if os.path.exists(temp_session):
                    if os.path.exists(permanent_session):
                        os.remove(permanent_session)
                    shutil.move(temp_session, permanent_session)
                    print(f"‚úÖ –°–µ—Å—Å–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ {permanent_session}")
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                del auth_sessions[session_id]
                
                user_info = {
                    'first_name': me.first_name or '',
                    'last_name': me.last_name or '',
                    'username': me.username or '',
                    'phone': me.phone_number or phone,
                    'user_id': str(me.id)
                }
                
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {user_info['first_name']} ({user_info['phone']})")
                
                return {'success': True, 'user_info': user_info}
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                
                error_msg = str(e)
                if "PHONE_CODE_INVALID" in error_msg:
                    error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"
                elif "PHONE_CODE_EXPIRED" in error_msg:
                    error_msg = "–ö–æ–¥ –∏—Å—Ç–µ–∫, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π"
                elif "SESSION_PASSWORD_NEEDED" in error_msg:
                    error_msg = "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                
                return {'success': False, 'error': error_msg}
            finally:
                loop.close()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        future = executor.submit(run_verify_code)
        result = future.result(timeout=60)
        
        if result['success']:
            global REQUIRES_AUTH
            REQUIRES_AUTH = False  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            
            return jsonify({
                'success': True,
                'user_info': result['user_info'],
                'message': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
            })
        else:
            return jsonify({'error': result['error']}), 400
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/check_bot_auth', methods=['GET'])
def check_bot_auth():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
        session_files = [f for f in os.listdir('.') if f.startswith('user_') and f.endswith('.session')]
        
        if session_files:
            global REQUIRES_AUTH
            REQUIRES_AUTH = False
            
            return jsonify({
                'success': True,
                'authorized': True,
                'message': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            })
        else:
            return jsonify({
                'success': True,
                'authorized': False,
                'message': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            })
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞: {str(e)}'
        })


def verify_auth_code_sync(session_id, phone, code):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞"""
    try:
        if session_id not in auth_sessions:
            return {
                'success': False,
                'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }
        
        session_data = auth_sessions[session_id]
        temp_client = session_data['temp_client']
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            async def do_verify():
                # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
                await temp_client.sign_in(phone, session_data['phone_code_hash'], code)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                me = await temp_client.get_me()
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
                await temp_client.disconnect()
                
                return me
            
            me = loop.run_until_complete(do_verify())
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é
            import shutil
            temp_session = f"temp_{session_id}.session"
            permanent_session = "user_local.session"
            
            if os.path.exists(temp_session):
                if os.path.exists(permanent_session):
                    os.remove(permanent_session)
                shutil.move(temp_session, permanent_session)
                print(f"‚úÖ –°–µ—Å—Å–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ {permanent_session}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            del auth_sessions[session_id]
            
            user_info = {
                'first_name': me.first_name or '',
                'last_name': me.last_name or '',
                'username': me.username or '',
                'phone': me.phone_number or phone,
                'user_id': str(me.id)
            }
            
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {user_info['first_name']} ({user_info['phone']})")
            
            return {
                'success': True,
                'user_info': user_info
            }
            
        finally:
            loop.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        
        error_msg = str(e)
        if "PHONE_CODE_INVALID" in error_msg:
            error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"
        elif "PHONE_CODE_EXPIRED" in error_msg:
            error_msg = "–ö–æ–¥ –∏—Å—Ç–µ–∫, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π"
        elif "SESSION_PASSWORD_NEEDED" in error_msg:
            error_msg = "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        
        return {
            'success': False,
            'error': error_msg
        }

# ... –¥—Ä—É–≥–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã ...



@app.route('/get_available_sessions', methods=['GET'])
def get_available_sessions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    try:
        sessions = []
        sessions_dir = 'sessions'
        
        if os.path.exists(sessions_dir):
            for file in os.listdir(sessions_dir):
                if file.endswith('_info.json'):
                    try:
                        with open(f"{sessions_dir}/{file}", 'r', encoding='utf-8') as f:
                            session_info = json.load(f)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        session_file = f"{sessions_dir}/{session_info['session_file']}"
                        if os.path.exists(session_file):
                            sessions.append(session_info)
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {file}: {e}")
                        continue
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(sessions)} —Å–µ—Å—Å–∏–π")
        
        return jsonify({
            'success': True,
            'sessions': sessions
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞: {str(e)}'
        })

@app.route('/use_session', methods=['POST'])
def use_session():
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
    try:
        data = request.json
        account_name = data.get('account_name', '')
        
        if not account_name:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞'}), 400
        
        sessions_dir = 'sessions'
        info_file = f"{sessions_dir}/{account_name}_info.json"
        
        if not os.path.exists(info_file):
            return jsonify({'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        # –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        with open(info_file, 'r', encoding='utf-8') as f:
            session_info = json.load(f)
        
        session_file = f"{sessions_dir}/{session_info['session_file']}"
        
        if not os.path.exists(session_file):
            return jsonify({'error': '–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É –∫–∞–∫ user_local.session
        import shutil
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if os.path.exists('user_local.session'):
            os.remove('user_local.session')
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        shutil.copy2(session_file, 'user_local.session')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ
        current_account_info = {
            'account_name': account_name,
            'user_info': session_info['user_info'],
            'activated_at': datetime.now().isoformat()
        }
        
        with open('current_account.json', 'w', encoding='utf-8') as f:
            json.dump(current_account_info, f, ensure_ascii=False, indent=2)
        
        global REQUIRES_AUTH
        REQUIRES_AUTH = False
        
        print(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {account_name}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {session_info['user_info']['first_name']}")
        
        return jsonify({
            'success': True,
            'message': '–°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞',
            'user_info': session_info['user_info']
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/create_session_terminal', methods=['POST'])
def create_session_terminal():
    """–ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç"""
    try:
        print("\n" + "="*50)
        print("üöÄ –ó–ê–ü–£–°–ö –°–û–ó–î–ê–ù–ò–Ø –°–ï–°–°–ò–ò")
        print("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!")
        print("="*50)
        
        def run_creation():
            try:
                import subprocess
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
                result = subprocess.run([
                    'python3', 'create_session_tool.py'
                ], capture_output=True, text=True, timeout=300)
                
                if result.returncode == 0:
                    print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {result.stderr}")
                    return False
                    
            except subprocess.TimeoutExpired:
                print("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
                return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
                return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        future = executor.submit(run_creation)
        result = future.result(timeout=350)
        
        if result:
            return jsonify({
                'success': True,
                'message': '–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
            })
        else:
            return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏'}), 500
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/get_current_account', methods=['GET'])
def get_current_account():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
    try:
        if os.path.exists('current_account.json'):
            with open('current_account.json', 'r', encoding='utf-8') as f:
                account_info = json.load(f)
            
            return jsonify({
                'success': True,
                'account': account_info
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞'
            })
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞: {str(e)}'
        })

@app.route('/switch_account', methods=['GET'])
def switch_account():
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞"""
    global REQUIRES_AUTH
    REQUIRES_AUTH = True
    
    return jsonify({
        'success': True,
        'message': '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞'
    })

@app.route('/get_multi_accounts', methods=['GET'])
def get_multi_accounts():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        accounts = account_manager.load_available_accounts()
        
        return jsonify({
            'success': True,
            'accounts': accounts,
            'active_count': len(account_manager.get_active_accounts())
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞: {str(e)}'
        })

@app.route('/toggle_account', methods=['POST'])
def toggle_account():
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    try:
        data = request.json
        account_name = data.get('account_name', '')
        action = data.get('action', 'toggle')
        
        if not account_name:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        sessions_dir = 'sessions'
        info_file = f"{sessions_dir}/{account_name}_info.json"
        
        if not os.path.exists(info_file):
            return jsonify({'error': '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        current_active = account_name in account_manager.clients
        
        if action == 'activate' or (action == 'toggle' and not current_active):
            success = account_manager.activate_account(account_name)
            message = '–ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã' if success else '–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏'
        else:
            success = account_manager.deactivate_account(account_name)
            message = '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if success else '–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏'
        
        if success:
            return jsonify({
                'success': True,
                'message': message,
                'is_active': account_name in account_manager.clients
            })
        else:
            return jsonify({'error': message}), 500
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ toggle_account: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/parallel_search', methods=['POST'])
def parallel_search():
    """–ü–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    try:
        data = request.json
        keyword = data.get('keyword', '').strip()
        selected_groups = data.get('selected_groups', [])
        search_depth = data.get('search_depth', 500)
        account_names = data.get('accounts', [])  # –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        if not keyword:
            return jsonify({'error': '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'}), 400
        
        if not selected_groups:
            return jsonify({'error': '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞'}), 400
        
        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
        if not account_names:
            account_names = account_manager.get_active_accounts()
        
        if not account_names:
            return jsonify({'error': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞'}), 400
        
        print(f"üîç –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫:")
        print(f"  –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keyword}")
        print(f"  –ì—Ä—É–ø–ø: {len(selected_groups)}")
        print(f"  –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_names)} - {account_names}")
        
        def run_parallel_search():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                return loop.run_until_complete(execute_parallel_search(
                    keyword, selected_groups, search_depth, account_names
                ))
            finally:
                loop.close()
        
        future = executor.submit(run_parallel_search)
        results = future.result(timeout=300)
        
        return jsonify({
            'success': True,
            'results': results['messages'],
            'total': len(results['messages']),
            'accounts_used': results['accounts_used'],
            'search_stats': results['stats']
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}'}), 500

async def execute_parallel_search(keyword, selected_groups, search_depth, account_names):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    try:
        all_results = []
        search_stats = {}
        accounts_used = []
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        groups_per_account = len(selected_groups) // len(account_names)
        remaining_groups = len(selected_groups) % len(account_names)
        
        tasks = []
        start_idx = 0
        
        for i, account_name in enumerate(account_names):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            groups_count = groups_per_account + (1 if i < remaining_groups else 0)
            end_idx = start_idx + groups_count
            account_groups = selected_groups[start_idx:end_idx]
            start_idx = end_idx
            
            if account_groups:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
                client = account_manager.get_client(account_name)
                if client:
                    task = search_with_account(client, account_name, keyword, account_groups, search_depth)
                    tasks.append(task)
                    accounts_used.append(account_name)
        
        if not tasks:
            return {
                'messages': [],
                'accounts_used': [],
                'stats': {}
            }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ {accounts_used[i]}: {result}")
                search_stats[accounts_used[i]] = {'error': str(result), 'found': 0}
            else:
                all_results.extend(result['messages'])
                search_stats[accounts_used[i]] = {
                    'found': len(result['messages']),
                    'groups_searched': result['groups_count']
                }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞—Ç–µ
        all_results.sort(key=lambda x: x.get('date_timestamp', 0), reverse=True)
        
        # –£–¥–∞–ª—è–µ–º timestamp –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for msg in all_results:
            if 'date_timestamp' in msg:
                del msg['date_timestamp']
        
        print(f"üéâ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(all_results)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts_used)}")
        
        return {
            'messages': all_results,
            'accounts_used': accounts_used,
            'stats': search_stats
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        raise e

async def search_with_account(client, account_name, keyword, groups, search_depth):
    """–ü–æ–∏—Å–∫ –æ–¥–Ω–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö"""
    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –µ—Å—Ç—å event loop
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        await client.start()
        
        keywords = [word.strip().lower() for word in keyword.split() if word.strip()]
        found_messages = []
        
        print(f"[{account_name}] üîç –ü–æ–∏—Å–∫ –≤ {len(groups)} –≥—Ä—É–ø–ø–∞—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞
        available_groups = {}
        async for dialog in client.get_dialogs():
            chat = dialog.chat
            if chat.type.name in ["GROUP", "SUPERGROUP"]:
                available_groups[str(chat.id)] = chat
        
        # –ò—â–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
        for group_id in groups:
            if group_id in available_groups:
                chat = available_groups[group_id]
                try:
                    print(f"[{account_name}] üìÇ –ü–æ–∏—Å–∫ –≤: {chat.title}")
                    
                    message_count = 0
                    async for message in client.get_chat_history(chat.id, limit=search_depth):
                        if message.text:
                            message_text = message.text.lower()
                            matched_words = [word for word in keywords if word in message_text]
                            
                            if matched_words:
                                found_messages.append({
                                    'text': message.text,
                                    'author': message.from_user.username if message.from_user and message.from_user.username else "–ê–Ω–æ–Ω–∏–º",
                                    'chat': chat.title,
                                    'date': message.date.strftime("%d.%m.%Y %H:%M"),
                                    'date_timestamp': message.date.timestamp(),
                                    'matched_words': matched_words,
                                    'found_by_account': account_name,
                                    'message_id': message.id,
                                    'chat_id': chat.id,
                                    'chat_username': getattr(chat, 'username', None)
                                })
                            
                            message_count += 1
                    
                    found_count = len([m for m in found_messages if m['chat'] == chat.title])
                    print(f"[{account_name}] ‚úÖ {chat.title}: –Ω–∞–π–¥–µ–Ω–æ {found_count} –∏–∑ {message_count}")
                    
                except Exception as e:
                    print(f"[{account_name}] ‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {chat.title}: {e}")
                    continue
                    
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                await asyncio.sleep(1)
        
        await client.stop()
        
        print(f"[{account_name}] üéØ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return {
            'messages': found_messages,
            'groups_count': len(groups),
            'account_name': account_name
        }
        
    except Exception as e:
        print(f"[{account_name}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise e

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Message Hunter...")
    print("üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:")
    for rule in app.url_map.iter_rules():
        print(f"  {rule.rule} - {list(rule.methods)}")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000")
    app.run(debug=True, port=8000, host='0.0.0.0')